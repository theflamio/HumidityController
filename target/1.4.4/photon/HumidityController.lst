
c:/HumidityController/target/1.4.4/photon/HumidityController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003424  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3440  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a3444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005b4  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a34ac  080a34ac  000234ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a34d4  080a34d4  000234d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c3f8a  00000000  00000000  000234d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011d39  00000000  00000000  000e7462  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001561e  00000000  00000000  000f919b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000021c8  00000000  00000000  0010e7b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000034d8  00000000  00000000  00110981  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000289f6  00000000  00000000  00113e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028713  00000000  00000000  0013c84f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a9997  00000000  00000000  00164f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c09c  00000000  00000000  0020e8fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 ffe3 	bl	80a2ff8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 ffe8 	bl	80a300e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3444 	.word	0x080a3444
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	2000061c 	.word	0x2000061c
 80a0058:	2000061c 	.word	0x2000061c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f853 	bl	80a1108 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a33fc 	.word	0x080a33fc
 80a0084:	080a3438 	.word	0x080a3438

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f933 	bl	80a02f8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bff9 	b.w	80a108c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bd69 	b.w	80a0b70 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bd6f 	b.w	80a0b80 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN17LiquidCrystal_I2CD1Ev>:

//#define En B00000100  // Enable bit
//#define Rw B00000010  // Read/Write bit
//#define Rs B00000001  // Register select bit

class LiquidCrystal_I2C : public Print {
 80a00b2:	4770      	bx	lr

080a00b4 <setup>:
 * MQTT client("iot.eclipse.org", 1883, callback);
 **/
//MQTT mqttmclient("server_name", 1883, callback);

void setup() 
{
 80a00b4:	b510      	push	{r4, lr}
    // Setup LCD
    lcd.init();
 80a00b6:	4c0e      	ldr	r4, [pc, #56]	; (80a00f0 <setup+0x3c>)
 80a00b8:	4620      	mov	r0, r4
 80a00ba:	f000 fb6f 	bl	80a079c <_ZN17LiquidCrystal_I2C4initEv>
    lcd.backlight();
 80a00be:	4620      	mov	r0, r4
 80a00c0:	f000 fa84 	bl	80a05cc <_ZN17LiquidCrystal_I2C9backlightEv>
    lcd.setCursor(0, 0);
 80a00c4:	2200      	movs	r2, #0
 80a00c6:	4611      	mov	r1, r2
 80a00c8:	4620      	mov	r0, r4
 80a00ca:	f000 fad1 	bl	80a0670 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd.print(" Ventilator Control");
 80a00ce:	4909      	ldr	r1, [pc, #36]	; (80a00f4 <setup+0x40>)
 80a00d0:	4620      	mov	r0, r4
 80a00d2:	f000 fe51 	bl	80a0d78 <_ZN5Print5printEPKc>
    
    dht.begin();
 80a00d6:	4808      	ldr	r0, [pc, #32]	; (80a00f8 <setup+0x44>)
 80a00d8:	f000 f963 	bl	80a03a2 <_ZN3DHT5beginEv>

    pinMode(VENTILATORONE,OUTPUT);
 80a00dc:	2101      	movs	r1, #1
 80a00de:	2004      	movs	r0, #4
 80a00e0:	f001 fe0e 	bl	80a1d00 <pinMode>
    pinMode(VENTILATORTWO,OUTPUT);

    //Setup Mqtt server
    //MqttSetup();
}
 80a00e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lcd.print(" Ventilator Control");
    
    dht.begin();

    pinMode(VENTILATORONE,OUTPUT);
    pinMode(VENTILATORTWO,OUTPUT);
 80a00e8:	2101      	movs	r1, #1
 80a00ea:	2005      	movs	r0, #5
 80a00ec:	f001 be08 	b.w	80a1d00 <pinMode>
 80a00f0:	20000084 	.word	0x20000084
 80a00f4:	080a30cc 	.word	0x080a30cc
 80a00f8:	20000070 	.word	0x20000070

080a00fc <_Z9Updatelcdfff>:
  Updatelcd(humid,temp,setPointHumidity);
  PublishTempHumid(temp,humid);
}

void Updatelcd(float humid,float temp,float setPointHumidity)
{
 80a00fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0100:	4605      	mov	r5, r0
  //Humidity
  lcd.setCursor(0, 1);
 80a0102:	4c35      	ldr	r4, [pc, #212]	; (80a01d8 <_Z9Updatelcdfff+0xdc>)
  Updatelcd(humid,temp,setPointHumidity);
  PublishTempHumid(temp,humid);
}

void Updatelcd(float humid,float temp,float setPointHumidity)
{
 80a0104:	4688      	mov	r8, r1
 80a0106:	4617      	mov	r7, r2
  //Humidity
  lcd.setCursor(0, 1);
 80a0108:	4620      	mov	r0, r4
 80a010a:	2201      	movs	r2, #1
 80a010c:	2100      	movs	r1, #0
 80a010e:	f000 faaf 	bl	80a0670 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print("Humid   : ");
 80a0112:	4932      	ldr	r1, [pc, #200]	; (80a01dc <_Z9Updatelcdfff+0xe0>)
 80a0114:	4620      	mov	r0, r4
 80a0116:	f000 fe2f 	bl	80a0d78 <_ZN5Print5printEPKc>
  lcd.setCursor(9, 1);
 80a011a:	2201      	movs	r2, #1
 80a011c:	4620      	mov	r0, r4
 80a011e:	2109      	movs	r1, #9
 80a0120:	f000 faa6 	bl	80a0670 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print(humid);
 80a0124:	4628      	mov	r0, r5
 80a0126:	f002 f939 	bl	80a239c <__aeabi_f2d>
 80a012a:	2502      	movs	r5, #2
 80a012c:	460b      	mov	r3, r1
 80a012e:	4602      	mov	r2, r0
  lcd.setCursor(15, 1);
  lcd.print("%");
 80a0130:	4e2b      	ldr	r6, [pc, #172]	; (80a01e0 <_Z9Updatelcdfff+0xe4>)
{
  //Humidity
  lcd.setCursor(0, 1);
  lcd.print("Humid   : ");
  lcd.setCursor(9, 1);
  lcd.print(humid);
 80a0132:	9500      	str	r5, [sp, #0]
 80a0134:	4620      	mov	r0, r4
 80a0136:	f000 ff23 	bl	80a0f80 <_ZN5Print5printEdi>
  lcd.setCursor(15, 1);
 80a013a:	2201      	movs	r2, #1
 80a013c:	4620      	mov	r0, r4
 80a013e:	210f      	movs	r1, #15
 80a0140:	f000 fa96 	bl	80a0670 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print("%");
 80a0144:	4631      	mov	r1, r6
 80a0146:	4620      	mov	r0, r4
 80a0148:	f000 fe16 	bl	80a0d78 <_ZN5Print5printEPKc>
  // Temperature
  lcd.setCursor(0, 2);
 80a014c:	462a      	mov	r2, r5
 80a014e:	4620      	mov	r0, r4
 80a0150:	2100      	movs	r1, #0
 80a0152:	f000 fa8d 	bl	80a0670 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print("Temp    : ");
 80a0156:	4923      	ldr	r1, [pc, #140]	; (80a01e4 <_Z9Updatelcdfff+0xe8>)
 80a0158:	4620      	mov	r0, r4
 80a015a:	f000 fe0d 	bl	80a0d78 <_ZN5Print5printEPKc>
  lcd.setCursor(9, 2);
 80a015e:	462a      	mov	r2, r5
 80a0160:	4620      	mov	r0, r4
 80a0162:	2109      	movs	r1, #9
 80a0164:	f000 fa84 	bl	80a0670 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print(temp);
 80a0168:	4640      	mov	r0, r8
 80a016a:	f002 f917 	bl	80a239c <__aeabi_f2d>
 80a016e:	9500      	str	r5, [sp, #0]
 80a0170:	460b      	mov	r3, r1
 80a0172:	4602      	mov	r2, r0
 80a0174:	4620      	mov	r0, r4
 80a0176:	f000 ff03 	bl	80a0f80 <_ZN5Print5printEdi>
  lcd.setCursor(15, 2);
 80a017a:	462a      	mov	r2, r5
 80a017c:	4620      	mov	r0, r4
 80a017e:	210f      	movs	r1, #15
 80a0180:	f000 fa76 	bl	80a0670 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print("Cel");
 80a0184:	4918      	ldr	r1, [pc, #96]	; (80a01e8 <_Z9Updatelcdfff+0xec>)
 80a0186:	4620      	mov	r0, r4
 80a0188:	f000 fdf6 	bl	80a0d78 <_ZN5Print5printEPKc>
  // Humid Setpoint
  lcd.setCursor(0, 3);
 80a018c:	2203      	movs	r2, #3
 80a018e:	4620      	mov	r0, r4
 80a0190:	2100      	movs	r1, #0
 80a0192:	f000 fa6d 	bl	80a0670 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print("SP Humid: ");
 80a0196:	4915      	ldr	r1, [pc, #84]	; (80a01ec <_Z9Updatelcdfff+0xf0>)
 80a0198:	4620      	mov	r0, r4
 80a019a:	f000 fded 	bl	80a0d78 <_ZN5Print5printEPKc>
  lcd.setCursor(9, 3);
 80a019e:	2203      	movs	r2, #3
 80a01a0:	4620      	mov	r0, r4
 80a01a2:	2109      	movs	r1, #9
 80a01a4:	f000 fa64 	bl	80a0670 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print(setPointHumidity);
 80a01a8:	4638      	mov	r0, r7
 80a01aa:	f002 f8f7 	bl	80a239c <__aeabi_f2d>
 80a01ae:	9500      	str	r5, [sp, #0]
 80a01b0:	460b      	mov	r3, r1
 80a01b2:	4602      	mov	r2, r0
 80a01b4:	4620      	mov	r0, r4
 80a01b6:	f000 fee3 	bl	80a0f80 <_ZN5Print5printEdi>
  lcd.setCursor(15, 3);
 80a01ba:	2203      	movs	r2, #3
 80a01bc:	4620      	mov	r0, r4
 80a01be:	210f      	movs	r1, #15
 80a01c0:	f000 fa56 	bl	80a0670 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd.print("%");
 80a01c4:	4631      	mov	r1, r6
 80a01c6:	4620      	mov	r0, r4
 80a01c8:	f000 fdd6 	bl	80a0d78 <_ZN5Print5printEPKc>
  delay(100);
 80a01cc:	2064      	movs	r0, #100	; 0x64
}
 80a01ce:	b002      	add	sp, #8
 80a01d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  lcd.print("SP Humid: ");
  lcd.setCursor(9, 3);
  lcd.print(setPointHumidity);
  lcd.setCursor(15, 3);
  lcd.print("%");
  delay(100);
 80a01d4:	f000 bef8 	b.w	80a0fc8 <delay>
 80a01d8:	20000084 	.word	0x20000084
 80a01dc:	080a30e0 	.word	0x080a30e0
 80a01e0:	080a30eb 	.word	0x080a30eb
 80a01e4:	080a30ed 	.word	0x080a30ed
 80a01e8:	080a30f8 	.word	0x080a30f8
 80a01ec:	080a30fc 	.word	0x080a30fc

080a01f0 <_Z8ReadTempv>:
    //mqttmclient.publish("outTopic/message","hello world");
}

float ReadTemp()
{
  float t = dht.getTempCelcius();
 80a01f0:	4801      	ldr	r0, [pc, #4]	; (80a01f8 <_Z8ReadTempv+0x8>)
 80a01f2:	f000 b993 	b.w	80a051c <_ZN3DHT14getTempCelciusEv>
 80a01f6:	bf00      	nop
 80a01f8:	20000070 	.word	0x20000070

080a01fc <_Z9ReadHumidv>:
  return t;
}

float ReadHumid()
{
  float h = dht.getHumidity();
 80a01fc:	4801      	ldr	r0, [pc, #4]	; (80a0204 <_Z9ReadHumidv+0x8>)
 80a01fe:	f000 b9b7 	b.w	80a0570 <_ZN3DHT11getHumidityEv>
 80a0202:	bf00      	nop
 80a0204:	20000070 	.word	0x20000070

080a0208 <_Z17VentilatorControlff>:
  float val = 50;
  return val;
}

void VentilatorControl(float setPoint, float humid)
{
 80a0208:	b538      	push	{r3, r4, r5, lr}
 80a020a:	460c      	mov	r4, r1
 80a020c:	4605      	mov	r5, r0
  if (humid >= setPoint) {
 80a020e:	4601      	mov	r1, r0
 80a0210:	4620      	mov	r0, r4
 80a0212:	f002 fecf 	bl	80a2fb4 <__aeabi_fcmpge>
 80a0216:	b128      	cbz	r0, 80a0224 <_Z17VentilatorControlff+0x1c>
    digitalWrite(VENTILATORONE,LOW);
 80a0218:	2100      	movs	r1, #0
 80a021a:	2004      	movs	r0, #4
 80a021c:	f001 fd81 	bl	80a1d22 <digitalWrite>
    digitalWrite(VENTILATORTWO,LOW);
 80a0220:	2100      	movs	r1, #0
 80a0222:	e00d      	b.n	80a0240 <_Z17VentilatorControlff+0x38>
  }else if(humid < (setPoint - 3))
 80a0224:	4909      	ldr	r1, [pc, #36]	; (80a024c <_Z17VentilatorControlff+0x44>)
 80a0226:	4628      	mov	r0, r5
 80a0228:	f002 fc08 	bl	80a2a3c <__aeabi_fsub>
 80a022c:	4601      	mov	r1, r0
 80a022e:	4620      	mov	r0, r4
 80a0230:	f002 feac 	bl	80a2f8c <__aeabi_fcmplt>
 80a0234:	b148      	cbz	r0, 80a024a <_Z17VentilatorControlff+0x42>
  {
    digitalWrite(VENTILATORONE,HIGH);
 80a0236:	2101      	movs	r1, #1
 80a0238:	2004      	movs	r0, #4
 80a023a:	f001 fd72 	bl	80a1d22 <digitalWrite>
    digitalWrite(VENTILATORTWO,HIGH); 
 80a023e:	2101      	movs	r1, #1
 80a0240:	2005      	movs	r0, #5
        client.publish("outTopic/message","hello world");
        client.subscribe("inTopic/message");
    }
  }
  */
}
 80a0242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(VENTILATORONE,LOW);
    digitalWrite(VENTILATORTWO,LOW);
  }else if(humid < (setPoint - 3))
  {
    digitalWrite(VENTILATORONE,HIGH);
    digitalWrite(VENTILATORTWO,HIGH); 
 80a0246:	f001 bd6c 	b.w	80a1d22 <digitalWrite>
 80a024a:	bd38      	pop	{r3, r4, r5, pc}
 80a024c:	40400000 	.word	0x40400000

080a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0250:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0252:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0254:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0256:	b17c      	cbz	r4, 80a0278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0258:	6863      	ldr	r3, [r4, #4]
 80a025a:	3b01      	subs	r3, #1
 80a025c:	6063      	str	r3, [r4, #4]
 80a025e:	b95b      	cbnz	r3, 80a0278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0260:	6823      	ldr	r3, [r4, #0]
 80a0262:	4620      	mov	r0, r4
 80a0264:	689b      	ldr	r3, [r3, #8]
 80a0266:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0268:	68a3      	ldr	r3, [r4, #8]
 80a026a:	3b01      	subs	r3, #1
 80a026c:	60a3      	str	r3, [r4, #8]
 80a026e:	b91b      	cbnz	r3, 80a0278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0270:	6823      	ldr	r3, [r4, #0]
 80a0272:	4620      	mov	r0, r4
 80a0274:	68db      	ldr	r3, [r3, #12]
 80a0276:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0278:	4628      	mov	r0, r5
 80a027a:	bd38      	pop	{r3, r4, r5, pc}

080a027c <_Z16PublishTempHumidff>:
  lcd.print("%");
  delay(100);
}

void PublishTempHumid(float temp, float humid)
{
 80a027c:	b570      	push	{r4, r5, r6, lr}
 80a027e:	b088      	sub	sp, #32
 80a0280:	460e      	mov	r6, r1
    Particle.publish("Temperature",String::format("%.2f",temp) , PUBLIC);
 80a0282:	f002 f88b 	bl	80a239c <__aeabi_f2d>
 80a0286:	4d18      	ldr	r5, [pc, #96]	; (80a02e8 <_Z16PublishTempHumidff+0x6c>)
 80a0288:	4c18      	ldr	r4, [pc, #96]	; (80a02ec <_Z16PublishTempHumidff+0x70>)
 80a028a:	4602      	mov	r2, r0
 80a028c:	460b      	mov	r3, r1
 80a028e:	a804      	add	r0, sp, #16
 80a0290:	4629      	mov	r1, r5
 80a0292:	f000 fd23 	bl	80a0cdc <_ZN6String6formatEPKcz>
 80a0296:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0298:	9a04      	ldr	r2, [sp, #16]
 80a029a:	4915      	ldr	r1, [pc, #84]	; (80a02f0 <_Z16PublishTempHumidff+0x74>)
 80a029c:	f88d 3000 	strb.w	r3, [sp]
 80a02a0:	a802      	add	r0, sp, #8
 80a02a2:	233c      	movs	r3, #60	; 0x3c
 80a02a4:	f001 f89e 	bl	80a13e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a02a8:	a803      	add	r0, sp, #12
 80a02aa:	f7ff ffd1 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a02ae:	a804      	add	r0, sp, #16
 80a02b0:	f000 fcba 	bl	80a0c28 <_ZN6StringD1Ev>
    Particle.publish("Humidity",String::format("%.2f",humid) , PUBLIC);
 80a02b4:	4630      	mov	r0, r6
 80a02b6:	f002 f871 	bl	80a239c <__aeabi_f2d>
 80a02ba:	4602      	mov	r2, r0
 80a02bc:	460b      	mov	r3, r1
 80a02be:	a804      	add	r0, sp, #16
 80a02c0:	4629      	mov	r1, r5
 80a02c2:	f000 fd0b 	bl	80a0cdc <_ZN6String6formatEPKcz>
 80a02c6:	7823      	ldrb	r3, [r4, #0]
 80a02c8:	9a04      	ldr	r2, [sp, #16]
 80a02ca:	490a      	ldr	r1, [pc, #40]	; (80a02f4 <_Z16PublishTempHumidff+0x78>)
 80a02cc:	f88d 3000 	strb.w	r3, [sp]
 80a02d0:	a802      	add	r0, sp, #8
 80a02d2:	233c      	movs	r3, #60	; 0x3c
 80a02d4:	f001 f886 	bl	80a13e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a02d8:	a803      	add	r0, sp, #12
 80a02da:	f7ff ffb9 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a02de:	a804      	add	r0, sp, #16
 80a02e0:	f000 fca2 	bl	80a0c28 <_ZN6StringD1Ev>
    //mqttmclient.publish("outTopic/message","hello world");
    //mqttmclient.publish("outTopic/message","hello world");
}
 80a02e4:	b008      	add	sp, #32
 80a02e6:	bd70      	pop	{r4, r5, r6, pc}
 80a02e8:	080a3107 	.word	0x080a3107
 80a02ec:	2000006c 	.word	0x2000006c
 80a02f0:	080a310c 	.word	0x080a310c
 80a02f4:	080a3118 	.word	0x080a3118

080a02f8 <loop>:
    //MqttSetup();
}


void loop()
{ 
 80a02f8:	b570      	push	{r4, r5, r6, lr}
  // Mqtt loop
  //if (mqttmclient.isConnected())
  //      mqttmclient.loop();

  //read temperatur and humidity
  delay(2000);
 80a02fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a02fe:	f000 fe63 	bl	80a0fc8 <delay>
  float temp = ReadTemp();
 80a0302:	f7ff ff75 	bl	80a01f0 <_Z8ReadTempv>
 80a0306:	4605      	mov	r5, r0
  float humid = ReadHumid();
 80a0308:	f7ff ff78 	bl	80a01fc <_Z9ReadHumidv>
 80a030c:	4604      	mov	r4, r0

  //Control ventilation
  float setPointHumidity = GetSetPointFromUser();
  VentilatorControl(setPointHumidity , humid);
 80a030e:	4e08      	ldr	r6, [pc, #32]	; (80a0330 <loop+0x38>)
 80a0310:	4601      	mov	r1, r0
 80a0312:	4630      	mov	r0, r6
 80a0314:	f7ff ff78 	bl	80a0208 <_Z17VentilatorControlff>

  // update lcd screen
  Updatelcd(humid,temp,setPointHumidity);
 80a0318:	4629      	mov	r1, r5
 80a031a:	4620      	mov	r0, r4
 80a031c:	4632      	mov	r2, r6
 80a031e:	f7ff feed 	bl	80a00fc <_Z9Updatelcdfff>
  PublishTempHumid(temp,humid);
 80a0322:	4621      	mov	r1, r4
 80a0324:	4628      	mov	r0, r5
}
 80a0326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  float setPointHumidity = GetSetPointFromUser();
  VentilatorControl(setPointHumidity , humid);

  // update lcd screen
  Updatelcd(humid,temp,setPointHumidity);
  PublishTempHumid(temp,humid);
 80a032a:	f7ff bfa7 	b.w	80a027c <_Z16PublishTempHumidff>
 80a032e:	bf00      	nop
 80a0330:	42480000 	.word	0x42480000

080a0334 <_ZN17LiquidCrystal_I2CD0Ev>:
 80a0334:	b510      	push	{r4, lr}
 80a0336:	4604      	mov	r4, r0
 80a0338:	2110      	movs	r1, #16
 80a033a:	f001 fd7e 	bl	80a1e3a <_ZdlPvj>
 80a033e:	4620      	mov	r0, r4
 80a0340:	bd10      	pop	{r4, pc}
	...

080a0344 <_GLOBAL__sub_I_dht>:
        client.publish("outTopic/message","hello world");
        client.subscribe("inTopic/message");
    }
  }
  */
}
 80a0344:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0346:	4b0e      	ldr	r3, [pc, #56]	; (80a0380 <_GLOBAL__sub_I_dht+0x3c>)
 80a0348:	2400      	movs	r4, #0
 80a034a:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a034c:	f000 fa2a 	bl	80a07a4 <HAL_Pin_Map>
float ReadTemp();
float ReadHumid();
void callback(char* topic, byte* payload, unsigned int length);
float GetSetPointFromUser();
void VentilatorControl(float setPoint,float humid);
SYSTEM_THREAD(ENABLED);
 80a0350:	4621      	mov	r1, r4
 80a0352:	2001      	movs	r0, #1

#define DHTTYPE DHT22

DHT dht(DHTPIN, DHTTYPE);
  
LiquidCrystal_I2C lcd(0x27,20,4); //set the LCD address to 0x27 for a 20 chars and 4 line display
 80a0354:	4c0b      	ldr	r4, [pc, #44]	; (80a0384 <_GLOBAL__sub_I_dht+0x40>)
float ReadTemp();
float ReadHumid();
void callback(char* topic, byte* payload, unsigned int length);
float GetSetPointFromUser();
void VentilatorControl(float setPoint,float humid);
SYSTEM_THREAD(ENABLED);
 80a0356:	f000 fb77 	bl	80a0a48 <system_thread_set_state>

#define DHTPIN D2 //Data read pin 

#define DHTTYPE DHT22

DHT dht(DHTPIN, DHTTYPE);
 80a035a:	2306      	movs	r3, #6
 80a035c:	2216      	movs	r2, #22
 80a035e:	2102      	movs	r1, #2
 80a0360:	4809      	ldr	r0, [pc, #36]	; (80a0388 <_GLOBAL__sub_I_dht+0x44>)
 80a0362:	f000 f817 	bl	80a0394 <_ZN3DHTC1Ehhh>
  
LiquidCrystal_I2C lcd(0x27,20,4); //set the LCD address to 0x27 for a 20 chars and 4 line display
 80a0366:	2214      	movs	r2, #20
 80a0368:	2127      	movs	r1, #39	; 0x27
 80a036a:	4620      	mov	r0, r4
 80a036c:	2304      	movs	r3, #4
 80a036e:	f000 f903 	bl	80a0578 <_ZN17LiquidCrystal_I2CC1Ehhh>
 80a0372:	4620      	mov	r0, r4
        client.publish("outTopic/message","hello world");
        client.subscribe("inTopic/message");
    }
  }
  */
}
 80a0374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#define DHTTYPE DHT22

DHT dht(DHTPIN, DHTTYPE);
  
LiquidCrystal_I2C lcd(0x27,20,4); //set the LCD address to 0x27 for a 20 chars and 4 line display
 80a0378:	4a04      	ldr	r2, [pc, #16]	; (80a038c <_GLOBAL__sub_I_dht+0x48>)
 80a037a:	4905      	ldr	r1, [pc, #20]	; (80a0390 <_GLOBAL__sub_I_dht+0x4c>)
 80a037c:	f001 bd58 	b.w	80a1e30 <__aeabi_atexit>
 80a0380:	2000006c 	.word	0x2000006c
 80a0384:	20000084 	.word	0x20000084
 80a0388:	20000070 	.word	0x20000070
 80a038c:	20000068 	.word	0x20000068
 80a0390:	080a00b3 	.word	0x080a00b3

080a0394 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
 80a0394:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
 80a0396:	7203      	strb	r3, [r0, #8]
	firstreading = true;
 80a0398:	2301      	movs	r3, #1
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
 80a039a:	7181      	strb	r1, [r0, #6]
	_type = type;
 80a039c:	71c2      	strb	r2, [r0, #7]
	_count = count;
	firstreading = true;
 80a039e:	7403      	strb	r3, [r0, #16]
}
 80a03a0:	bd10      	pop	{r4, pc}

080a03a2 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
 80a03a2:	b510      	push	{r4, lr}
 80a03a4:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
 80a03a6:	2100      	movs	r1, #0
 80a03a8:	7980      	ldrb	r0, [r0, #6]
 80a03aa:	f001 fca9 	bl	80a1d00 <pinMode>
	digitalWrite(_pin, HIGH);
 80a03ae:	2101      	movs	r1, #1
 80a03b0:	79a0      	ldrb	r0, [r4, #6]
 80a03b2:	f001 fcb6 	bl	80a1d22 <digitalWrite>
	_lastreadtime = 0;
 80a03b6:	2300      	movs	r3, #0
 80a03b8:	60e3      	str	r3, [r4, #12]
 80a03ba:	bd10      	pop	{r4, pc}

080a03bc <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
 80a03bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a03c0:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a03c2:	f000 fa47 	bl	80a0854 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
 80a03c6:	68e3      	ldr	r3, [r4, #12]
 80a03c8:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
 80a03ca:	bf84      	itt	hi
 80a03cc:	2300      	movhi	r3, #0
 80a03ce:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a03d0:	7c23      	ldrb	r3, [r4, #16]
 80a03d2:	b93b      	cbnz	r3, 80a03e4 <_ZN3DHT4readEv+0x28>
 80a03d4:	68e3      	ldr	r3, [r4, #12]
 80a03d6:	1ac0      	subs	r0, r0, r3
 80a03d8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80a03dc:	d202      	bcs.n	80a03e4 <_ZN3DHT4readEv+0x28>
		return true; // return last correct measurement
 80a03de:	2001      	movs	r0, #1
 80a03e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
 80a03e4:	2500      	movs	r5, #0
 80a03e6:	7425      	strb	r5, [r4, #16]
 80a03e8:	f000 fa34 	bl	80a0854 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 80a03ec:	2101      	movs	r1, #1
	firstreading = false;
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
 80a03ee:	60e0      	str	r0, [r4, #12]

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a03f0:	7125      	strb	r5, [r4, #4]
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 80a03f2:	79a0      	ldrb	r0, [r4, #6]
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a03f4:	70e5      	strb	r5, [r4, #3]
 80a03f6:	70a5      	strb	r5, [r4, #2]
 80a03f8:	7065      	strb	r5, [r4, #1]
 80a03fa:	7025      	strb	r5, [r4, #0]
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 80a03fc:	f001 fc91 	bl	80a1d22 <digitalWrite>
	delay(250);
 80a0400:	20fa      	movs	r0, #250	; 0xfa
 80a0402:	f000 fde1 	bl	80a0fc8 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
 80a0406:	2101      	movs	r1, #1
 80a0408:	79a0      	ldrb	r0, [r4, #6]
 80a040a:	f001 fc79 	bl	80a1d00 <pinMode>
	digitalWrite(_pin, LOW);
 80a040e:	4629      	mov	r1, r5
 80a0410:	79a0      	ldrb	r0, [r4, #6]
 80a0412:	f001 fc86 	bl	80a1d22 <digitalWrite>
	delay(20);
 80a0416:	2014      	movs	r0, #20
 80a0418:	f000 fdd6 	bl	80a0fc8 <delay>
	noInterrupts();
 80a041c:	f001 fa96 	bl	80a194c <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
 80a0420:	2101      	movs	r1, #1
 80a0422:	79a0      	ldrb	r0, [r4, #6]
 80a0424:	f001 fc7d 	bl	80a1d22 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0428:	2028      	movs	r0, #40	; 0x28
 80a042a:	f000 fa0b 	bl	80a0844 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
 80a042e:	4629      	mov	r1, r5
 80a0430:	79a0      	ldrb	r0, [r4, #6]
 80a0432:	f001 fc65 	bl	80a1d00 <pinMode>


boolean DHT::read(void) {
	uint8_t laststate = HIGH;
	uint8_t counter = 0;
	uint8_t j = 0, i;
 80a0436:	462e      	mov	r6, r5
	return Td;
}


boolean DHT::read(void) {
	uint8_t laststate = HIGH;
 80a0438:	2701      	movs	r7, #1
 80a043a:	f04f 0800 	mov.w	r8, #0
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
 80a043e:	79a0      	ldrb	r0, [r4, #6]
 80a0440:	f001 fc88 	bl	80a1d54 <digitalRead>
 80a0444:	42b8      	cmp	r0, r7
 80a0446:	fa5f f988 	uxtb.w	r9, r8
 80a044a:	d108      	bne.n	80a045e <_ZN3DHT4readEv+0xa2>
 80a044c:	2001      	movs	r0, #1
 80a044e:	f108 0801 	add.w	r8, r8, #1
 80a0452:	f000 f9f7 	bl	80a0844 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
 80a0456:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80a045a:	d1f0      	bne.n	80a043e <_ZN3DHT4readEv+0x82>
 80a045c:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
 80a045e:	79a0      	ldrb	r0, [r4, #6]
 80a0460:	f001 fc78 	bl	80a1d54 <digitalRead>

		if (counter == 255) break;
 80a0464:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = digitalRead(_pin);
 80a0468:	b2c7      	uxtb	r7, r0

		if (counter == 255) break;
 80a046a:	d014      	beq.n	80a0496 <_ZN3DHT4readEv+0xda>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
 80a046c:	2d03      	cmp	r5, #3
 80a046e:	d90e      	bls.n	80a048e <_ZN3DHT4readEv+0xd2>
 80a0470:	07eb      	lsls	r3, r5, #31
 80a0472:	d40c      	bmi.n	80a048e <_ZN3DHT4readEv+0xd2>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 80a0474:	08f2      	lsrs	r2, r6, #3
 80a0476:	5ca3      	ldrb	r3, [r4, r2]
			if (counter > _count)
				data[j/8] |= 1;
			j++;
 80a0478:	3601      	adds	r6, #1
		if (counter == 255) break;

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 80a047a:	005b      	lsls	r3, r3, #1
 80a047c:	b2db      	uxtb	r3, r3
 80a047e:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
 80a0480:	7a21      	ldrb	r1, [r4, #8]
				data[j/8] |= 1;
			j++;
 80a0482:	b2f6      	uxtb	r6, r6

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
			if (counter > _count)
 80a0484:	4549      	cmp	r1, r9
				data[j/8] |= 1;
 80a0486:	bf3c      	itt	cc
 80a0488:	f043 0301 	orrcc.w	r3, r3, #1
 80a048c:	54a3      	strbcc	r3, [r4, r2]
	digitalWrite(_pin, HIGH);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
 80a048e:	3501      	adds	r5, #1
 80a0490:	b2ed      	uxtb	r5, r5
 80a0492:	2d55      	cmp	r5, #85	; 0x55
 80a0494:	d1d1      	bne.n	80a043a <_ZN3DHT4readEv+0x7e>
			j++;
		}

	}

	interrupts();
 80a0496:	f001 fa5b 	bl	80a1950 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
 80a049a:	2e27      	cmp	r6, #39	; 0x27
 80a049c:	d90a      	bls.n	80a04b4 <_ZN3DHT4readEv+0xf8>
 80a049e:	7822      	ldrb	r2, [r4, #0]
 80a04a0:	7863      	ldrb	r3, [r4, #1]
 80a04a2:	7921      	ldrb	r1, [r4, #4]
 80a04a4:	4413      	add	r3, r2
 80a04a6:	78a2      	ldrb	r2, [r4, #2]
 80a04a8:	4413      	add	r3, r2
 80a04aa:	78e2      	ldrb	r2, [r4, #3]
 80a04ac:	4413      	add	r3, r2
 80a04ae:	b2db      	uxtb	r3, r3
 80a04b0:	4299      	cmp	r1, r3
 80a04b2:	d094      	beq.n	80a03de <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}
 
	return false;
 80a04b4:	2000      	movs	r0, #0

}
 80a04b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080a04bc <_ZN3DHT15readTemperatureEv>:
	pinMode(_pin, INPUT);
	digitalWrite(_pin, HIGH);
	_lastreadtime = 0;
}

float DHT::readTemperature() {
 80a04bc:	b570      	push	{r4, r5, r6, lr}
 80a04be:	4604      	mov	r4, r0
	float f;

	if (read()) {
 80a04c0:	f7ff ff7c 	bl	80a03bc <_ZN3DHT4readEv>
 80a04c4:	b318      	cbz	r0, 80a050e <_ZN3DHT15readTemperatureEv+0x52>
		switch (_type) {
 80a04c6:	79e3      	ldrb	r3, [r4, #7]
 80a04c8:	2b0b      	cmp	r3, #11
 80a04ca:	d004      	beq.n	80a04d6 <_ZN3DHT15readTemperatureEv+0x1a>
 80a04cc:	d31f      	bcc.n	80a050e <_ZN3DHT15readTemperatureEv+0x52>
 80a04ce:	3b15      	subs	r3, #21
 80a04d0:	2b01      	cmp	r3, #1
 80a04d2:	d904      	bls.n	80a04de <_ZN3DHT15readTemperatureEv+0x22>
 80a04d4:	e01b      	b.n	80a050e <_ZN3DHT15readTemperatureEv+0x52>
			case DHT11:
				f = data[2];
 80a04d6:	78a0      	ldrb	r0, [r4, #2]
 80a04d8:	f002 fb62 	bl	80a2ba0 <__aeabi_ui2f>
				return f;
 80a04dc:	bd70      	pop	{r4, r5, r6, pc}
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
 80a04de:	78a5      	ldrb	r5, [r4, #2]
 80a04e0:	f005 007f 	and.w	r0, r5, #127	; 0x7f
 80a04e4:	f002 fb60 	bl	80a2ba8 <__aeabi_i2f>
				f *= 256;
 80a04e8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a04ec:	f002 fbb0 	bl	80a2c50 <__aeabi_fmul>
 80a04f0:	4606      	mov	r6, r0
				f += data[3];
 80a04f2:	78e0      	ldrb	r0, [r4, #3]
 80a04f4:	f002 fb58 	bl	80a2ba8 <__aeabi_i2f>
 80a04f8:	4631      	mov	r1, r6
 80a04fa:	f002 faa1 	bl	80a2a40 <__addsf3>
				f /= 10;
 80a04fe:	4905      	ldr	r1, [pc, #20]	; (80a0514 <_ZN3DHT15readTemperatureEv+0x58>)
 80a0500:	f002 fc5a 	bl	80a2db8 <__aeabi_fdiv>
				if (data[2] & 0x80)
 80a0504:	062b      	lsls	r3, r5, #24
 80a0506:	d503      	bpl.n	80a0510 <_ZN3DHT15readTemperatureEv+0x54>
					f *= -1;
 80a0508:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a050c:	bd70      	pop	{r4, r5, r6, pc}
				return f;
		}
	}
	return NAN;
 80a050e:	4802      	ldr	r0, [pc, #8]	; (80a0518 <_ZN3DHT15readTemperatureEv+0x5c>)
}
 80a0510:	bd70      	pop	{r4, r5, r6, pc}
 80a0512:	bf00      	nop
 80a0514:	41200000 	.word	0x41200000
 80a0518:	7fc00000 	.word	0x7fc00000

080a051c <_ZN3DHT14getTempCelciusEv>:
float DHT::getHumidity() {
	return readHumidity();
}

float DHT::getTempCelcius() {
	return readTemperature();
 80a051c:	f7ff bfce 	b.w	80a04bc <_ZN3DHT15readTemperatureEv>

080a0520 <_ZN3DHT12readHumidityEv>:

float DHT::convertCtoK(float c) {
	return c + 273.15;
}

float DHT::readHumidity(void) {
 80a0520:	b538      	push	{r3, r4, r5, lr}
 80a0522:	4604      	mov	r4, r0
	float f;

	if (read()) {
 80a0524:	f7ff ff4a 	bl	80a03bc <_ZN3DHT4readEv>
 80a0528:	b1e0      	cbz	r0, 80a0564 <_ZN3DHT12readHumidityEv+0x44>
		switch (_type) {
 80a052a:	79e3      	ldrb	r3, [r4, #7]
 80a052c:	2b0b      	cmp	r3, #11
 80a052e:	d015      	beq.n	80a055c <_ZN3DHT12readHumidityEv+0x3c>
 80a0530:	d318      	bcc.n	80a0564 <_ZN3DHT12readHumidityEv+0x44>
 80a0532:	3b15      	subs	r3, #21
 80a0534:	2b01      	cmp	r3, #1
 80a0536:	d815      	bhi.n	80a0564 <_ZN3DHT12readHumidityEv+0x44>
			case DHT11:
				f = data[0];
				return f;
			case DHT22:
			case DHT21:
				f = data[0];
 80a0538:	7820      	ldrb	r0, [r4, #0]
 80a053a:	f002 fb31 	bl	80a2ba0 <__aeabi_ui2f>
				f *= 256;
 80a053e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a0542:	f002 fb85 	bl	80a2c50 <__aeabi_fmul>
 80a0546:	4605      	mov	r5, r0
				f += data[1];
 80a0548:	7860      	ldrb	r0, [r4, #1]
 80a054a:	f002 fb2d 	bl	80a2ba8 <__aeabi_i2f>
 80a054e:	4629      	mov	r1, r5
 80a0550:	f002 fa76 	bl	80a2a40 <__addsf3>
				f /= 10;
 80a0554:	4904      	ldr	r1, [pc, #16]	; (80a0568 <_ZN3DHT12readHumidityEv+0x48>)
 80a0556:	f002 fc2f 	bl	80a2db8 <__aeabi_fdiv>
 80a055a:	bd38      	pop	{r3, r4, r5, pc}
	float f;

	if (read()) {
		switch (_type) {
			case DHT11:
				f = data[0];
 80a055c:	7820      	ldrb	r0, [r4, #0]
 80a055e:	f002 fb1f 	bl	80a2ba0 <__aeabi_ui2f>
				return f;
 80a0562:	bd38      	pop	{r3, r4, r5, pc}
				f += data[1];
				f /= 10;
				return f;
		}
	}
	return NAN;
 80a0564:	4801      	ldr	r0, [pc, #4]	; (80a056c <_ZN3DHT12readHumidityEv+0x4c>)
}
 80a0566:	bd38      	pop	{r3, r4, r5, pc}
 80a0568:	41200000 	.word	0x41200000
 80a056c:	7fc00000 	.word	0x7fc00000

080a0570 <_ZN3DHT11getHumidityEv>:
	}
	return NAN;
}

float DHT::getHumidity() {
	return readHumidity();
 80a0570:	f7ff bfd6 	b.w	80a0520 <_ZN3DHT12readHumidityEv>

080a0574 <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
 80a0574:	f000 b916 	b.w	80a07a4 <HAL_Pin_Map>

080a0578 <_ZN17LiquidCrystal_I2CC1Ehhh>:
#include "application.h"

#include "LiquidCrystal_I2C_Spark.h"


LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
 80a0578:	b570      	push	{r4, r5, r6, lr}
 80a057a:	4e04      	ldr	r6, [pc, #16]	; (80a058c <_ZN17LiquidCrystal_I2CC1Ehhh+0x14>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a057c:	2500      	movs	r5, #0
 80a057e:	6045      	str	r5, [r0, #4]
 80a0580:	6006      	str	r6, [r0, #0]
{
  _Addr = lcd_Addr;
 80a0582:	7201      	strb	r1, [r0, #8]
  _cols = lcd_cols;
 80a0584:	7342      	strb	r2, [r0, #13]
  _rows = lcd_rows;
 80a0586:	7383      	strb	r3, [r0, #14]
  _backlightval = LCD_NOBACKLIGHT;
 80a0588:	73c5      	strb	r5, [r0, #15]
}
 80a058a:	bd70      	pop	{r4, r5, r6, pc}
 80a058c:	080a312c 	.word	0x080a312c

080a0590 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
        expanderWrite(value);
        pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){
 80a0590:	b538      	push	{r3, r4, r5, lr}
 80a0592:	4604      	mov	r4, r0
 80a0594:	460d      	mov	r5, r1
        Wire.beginTransmission(_Addr);
 80a0596:	f001 fc2b 	bl	80a1df0 <_Z19__fetch_global_Wirev>
 80a059a:	7a21      	ldrb	r1, [r4, #8]
 80a059c:	f001 fabc 	bl	80a1b18 <_ZN7TwoWire17beginTransmissionEh>
 80a05a0:	2002      	movs	r0, #2
 80a05a2:	f000 f94f 	bl	80a0844 <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.write((int)(_data) | _backlightval);
 80a05a6:	f001 fc23 	bl	80a1df0 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a05aa:	7be1      	ldrb	r1, [r4, #15]
 80a05ac:	6803      	ldr	r3, [r0, #0]
 80a05ae:	4329      	orrs	r1, r5
 80a05b0:	689b      	ldr	r3, [r3, #8]
 80a05b2:	4798      	blx	r3
 80a05b4:	2002      	movs	r0, #2
 80a05b6:	f000 f945 	bl	80a0844 <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.endTransmission();
 80a05ba:	f001 fc19 	bl	80a1df0 <_Z19__fetch_global_Wirev>
 80a05be:	f001 fab3 	bl	80a1b28 <_ZN7TwoWire15endTransmissionEv>
        delayMicroseconds(2);
        }
 80a05c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a05c6:	2002      	movs	r0, #2
 80a05c8:	f000 b93c 	b.w	80a0844 <HAL_Delay_Microseconds>

080a05cc <_ZN17LiquidCrystal_I2C9backlightEv>:
        _backlightval=LCD_NOBACKLIGHT;
        expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
        _backlightval=LCD_BACKLIGHT;
 80a05cc:	2308      	movs	r3, #8
 80a05ce:	73c3      	strb	r3, [r0, #15]
        expanderWrite(0);
 80a05d0:	2100      	movs	r1, #0
 80a05d2:	f7ff bfdd 	b.w	80a0590 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

080a05d6 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
        delayMicroseconds(2);
        Wire.endTransmission();
        delayMicroseconds(2);
        }

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
 80a05d6:	b538      	push	{r3, r4, r5, lr}
 80a05d8:	4605      	mov	r5, r0
 80a05da:	460c      	mov	r4, r1
        expanderWrite(_data | (1<<2));  // En high
 80a05dc:	f041 0104 	orr.w	r1, r1, #4
 80a05e0:	f7ff ffd6 	bl	80a0590 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
 80a05e4:	2001      	movs	r0, #1
 80a05e6:	f000 f92d 	bl	80a0844 <HAL_Delay_Microseconds>
        delayMicroseconds(1);           // enable pulse must be >450ns

        expanderWrite(_data & ~(1<<2)); // En low
 80a05ea:	4628      	mov	r0, r5
 80a05ec:	f004 01fb 	and.w	r1, r4, #251	; 0xfb
 80a05f0:	f7ff ffce 	bl	80a0590 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delayMicroseconds(50);          // commands need > 37us to settle
}
 80a05f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a05f8:	2032      	movs	r0, #50	; 0x32
 80a05fa:	f000 b923 	b.w	80a0844 <HAL_Delay_Microseconds>

080a05fe <_ZN17LiquidCrystal_I2C10write4bitsEh>:
        uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
        write4bits((lownib)|mode);
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
 80a05fe:	b538      	push	{r3, r4, r5, lr}
 80a0600:	4604      	mov	r4, r0
 80a0602:	460d      	mov	r5, r1
        expanderWrite(value);
 80a0604:	f7ff ffc4 	bl	80a0590 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        pulseEnable(value);
 80a0608:	4629      	mov	r1, r5
 80a060a:	4620      	mov	r0, r4
}
 80a060c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        write4bits((lownib)|mode);
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
        expanderWrite(value);
        pulseEnable(value);
 80a0610:	f7ff bfe1 	b.w	80a05d6 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

080a0614 <_ZN17LiquidCrystal_I2C4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
 80a0614:	b570      	push	{r4, r5, r6, lr}
 80a0616:	460d      	mov	r5, r1
 80a0618:	4614      	mov	r4, r2
 80a061a:	4606      	mov	r6, r0
        uint8_t highnib=value&0xf0;
        uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
 80a061c:	f021 010f 	bic.w	r1, r1, #15
 80a0620:	4311      	orrs	r1, r2
 80a0622:	f7ff ffec 	bl	80a05fe <_ZN17LiquidCrystal_I2C10write4bitsEh>
        write4bits((lownib)|mode);
 80a0626:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
 80a062a:	4630      	mov	r0, r6
}
 80a062c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
        uint8_t highnib=value&0xf0;
        uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
        write4bits((lownib)|mode);
 80a0630:	b2c9      	uxtb	r1, r1
 80a0632:	f7ff bfe4 	b.w	80a05fe <_ZN17LiquidCrystal_I2C10write4bitsEh>

080a0636 <_ZN17LiquidCrystal_I2C5writeEh>:

inline void LiquidCrystal_I2C::command(uint8_t value) {
        send(value, 0);
}

inline size_t LiquidCrystal_I2C::write(uint8_t value) {
 80a0636:	b508      	push	{r3, lr}
        send(value, 1);
 80a0638:	2201      	movs	r2, #1
 80a063a:	f7ff ffeb 	bl	80a0614 <_ZN17LiquidCrystal_I2C4sendEhh>
        return 0;
}
 80a063e:	2000      	movs	r0, #0
 80a0640:	bd08      	pop	{r3, pc}

080a0642 <_ZN17LiquidCrystal_I2C7commandEh>:


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
        send(value, 0);
 80a0642:	2200      	movs	r2, #0
 80a0644:	f7ff bfe6 	b.w	80a0614 <_ZN17LiquidCrystal_I2C4sendEhh>

080a0648 <_ZN17LiquidCrystal_I2C5clearEv>:
}



/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
 80a0648:	b508      	push	{r3, lr}
        command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 80a064a:	2101      	movs	r1, #1
 80a064c:	f7ff fff9 	bl	80a0642 <_ZN17LiquidCrystal_I2C7commandEh>
        delayMicroseconds(2000);  // this command takes a long time!
}
 80a0650:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0654:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0658:	f000 b8f4 	b.w	80a0844 <HAL_Delay_Microseconds>

080a065c <_ZN17LiquidCrystal_I2C4homeEv>:

void LiquidCrystal_I2C::home(){
 80a065c:	b508      	push	{r3, lr}
        command(LCD_RETURNHOME);  // set cursor position to zero
 80a065e:	2102      	movs	r1, #2
 80a0660:	f7ff ffef 	bl	80a0642 <_ZN17LiquidCrystal_I2C7commandEh>
        delayMicroseconds(2000);  // this command takes a long time!
}
 80a0664:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0668:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a066c:	f000 b8ea 	b.w	80a0844 <HAL_Delay_Microseconds>

080a0670 <_ZN17LiquidCrystal_I2C9setCursorEhh>:

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
 80a0670:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0672:	4605      	mov	r5, r0
 80a0674:	4614      	mov	r4, r2
 80a0676:	460e      	mov	r6, r1
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80a0678:	4b0c      	ldr	r3, [pc, #48]	; (80a06ac <_ZN17LiquidCrystal_I2C9setCursorEhh+0x3c>)
 80a067a:	f10d 0e10 	add.w	lr, sp, #16
 80a067e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80a0680:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        if ( row > _numlines ) {
 80a0684:	7b2b      	ldrb	r3, [r5, #12]
                row = _numlines-1;    // we count rows starting w/0
        }
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a0686:	4628      	mov	r0, r5
        delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
        if ( row > _numlines ) {
 80a0688:	42a3      	cmp	r3, r4
                row = _numlines-1;    // we count rows starting w/0
 80a068a:	bf3c      	itt	cc
 80a068c:	f103 34ff 	addcc.w	r4, r3, #4294967295
 80a0690:	b2e4      	uxtbcc	r4, r4
        }
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a0692:	ab04      	add	r3, sp, #16
 80a0694:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a0698:	f854 1c10 	ldr.w	r1, [r4, #-16]
 80a069c:	4431      	add	r1, r6
 80a069e:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80a06a2:	b2c9      	uxtb	r1, r1
 80a06a4:	f7ff ffcd 	bl	80a0642 <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a06a8:	b004      	add	sp, #16
 80a06aa:	bd70      	pop	{r4, r5, r6, pc}
 80a06ac:	080a313c 	.word	0x080a313c

080a06b0 <_ZN17LiquidCrystal_I2C7displayEv>:
// Turn the display on/off (quickly)
void LiquidCrystal_I2C::noDisplay() {
        _displaycontrol &= ~LCD_DISPLAYON;
        command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal_I2C::display() {
 80a06b0:	b508      	push	{r3, lr}
        _displaycontrol |= LCD_DISPLAYON;
 80a06b2:	7a81      	ldrb	r1, [r0, #10]
 80a06b4:	f041 0204 	orr.w	r2, r1, #4
 80a06b8:	7282      	strb	r2, [r0, #10]
        command(LCD_DISPLAYCONTROL | _displaycontrol);
 80a06ba:	f041 010c 	orr.w	r1, r1, #12
 80a06be:	f7ff ffc0 	bl	80a0642 <_ZN17LiquidCrystal_I2C7commandEh>
 80a06c2:	bd08      	pop	{r3, pc}

080a06c4 <_ZN17LiquidCrystal_I2C5beginEhhh>:
        Wire.begin();
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
        begin(_cols, _rows);
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a06c4:	b510      	push	{r4, lr}
        if (lines > 1) {
 80a06c6:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_2LINE;
 80a06c8:	bf88      	it	hi
 80a06ca:	7a41      	ldrbhi	r1, [r0, #9]
        Wire.begin();
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
        begin(_cols, _rows);
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a06cc:	4604      	mov	r4, r0
        if (lines > 1) {
                _displayfunction |= LCD_2LINE;
 80a06ce:	bf84      	itt	hi
 80a06d0:	f041 0108 	orrhi.w	r1, r1, #8
 80a06d4:	7241      	strbhi	r1, [r0, #9]
        }
        _numlines = lines;
 80a06d6:	7302      	strb	r2, [r0, #12]

        // for some 1 line displays you can select a 10 pixel high font
        if ((dotsize != 0) && (lines == 1)) {
 80a06d8:	b12b      	cbz	r3, 80a06e6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x22>
 80a06da:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_5x10DOTS;
 80a06dc:	bf02      	ittt	eq
 80a06de:	7a43      	ldrbeq	r3, [r0, #9]
 80a06e0:	f043 0304 	orreq.w	r3, r3, #4
 80a06e4:	7243      	strbeq	r3, [r0, #9]
        }

        // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
        // according to datasheet, we need at least 40ms after power rises above 2.7V
        // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
        delay(50);
 80a06e6:	2032      	movs	r0, #50	; 0x32
 80a06e8:	f000 fc6e 	bl	80a0fc8 <delay>

        // Now we pull both RS and R/W low to begin commands
        expanderWrite(_backlightval);   // reset expanderand turn backlight off (Bit 8 =1)
 80a06ec:	7be1      	ldrb	r1, [r4, #15]
 80a06ee:	4620      	mov	r0, r4
 80a06f0:	f7ff ff4e 	bl	80a0590 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delay(1000);
 80a06f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a06f8:	f000 fc66 	bl	80a0fc8 <delay>
        //put the LCD into 4 bit mode
        // this is according to the hitachi HD44780 datasheet
        // figure 24, pg 46

          // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
 80a06fc:	2130      	movs	r1, #48	; 0x30
 80a06fe:	4620      	mov	r0, r4
 80a0700:	f7ff ff7d 	bl	80a05fe <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0704:	f241 1094 	movw	r0, #4500	; 0x1194
 80a0708:	f000 f89c 	bl	80a0844 <HAL_Delay_Microseconds>
   delayMicroseconds(4500); // wait min 4.1ms

   // second try
   write4bits(0x03 << 4);
 80a070c:	2130      	movs	r1, #48	; 0x30
 80a070e:	4620      	mov	r0, r4
 80a0710:	f7ff ff75 	bl	80a05fe <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0714:	f241 1094 	movw	r0, #4500	; 0x1194
 80a0718:	f000 f894 	bl	80a0844 <HAL_Delay_Microseconds>
   delayMicroseconds(4500); // wait min 4.1ms

   // third go!
   write4bits(0x03 << 4);
 80a071c:	2130      	movs	r1, #48	; 0x30
 80a071e:	4620      	mov	r0, r4
 80a0720:	f7ff ff6d 	bl	80a05fe <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0724:	2096      	movs	r0, #150	; 0x96
 80a0726:	f000 f88d 	bl	80a0844 <HAL_Delay_Microseconds>
   delayMicroseconds(150);

   // finally, set to 4-bit interface
   write4bits(0x02 << 4);
 80a072a:	4620      	mov	r0, r4
 80a072c:	2120      	movs	r1, #32
 80a072e:	f7ff ff66 	bl	80a05fe <_ZN17LiquidCrystal_I2C10write4bitsEh>



        // set # lines, font size, etc.
        command(LCD_FUNCTIONSET | _displayfunction);
 80a0732:	7a61      	ldrb	r1, [r4, #9]
 80a0734:	4620      	mov	r0, r4
 80a0736:	f041 0120 	orr.w	r1, r1, #32
 80a073a:	f7ff ff82 	bl	80a0642 <_ZN17LiquidCrystal_I2C7commandEh>

        // turn the display on with no cursor or blinking default
        _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a073e:	2304      	movs	r3, #4
 80a0740:	72a3      	strb	r3, [r4, #10]
        display();
 80a0742:	4620      	mov	r0, r4
 80a0744:	f7ff ffb4 	bl	80a06b0 <_ZN17LiquidCrystal_I2C7displayEv>

        // clear it off
        clear();
 80a0748:	4620      	mov	r0, r4
 80a074a:	f7ff ff7d 	bl	80a0648 <_ZN17LiquidCrystal_I2C5clearEv>

        // Initialize to default text direction (for roman languages)
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a074e:	2302      	movs	r3, #2

        // set the entry mode
        command(LCD_ENTRYMODESET | _displaymode);
 80a0750:	4620      	mov	r0, r4

        // clear it off
        clear();

        // Initialize to default text direction (for roman languages)
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a0752:	72e3      	strb	r3, [r4, #11]

        // set the entry mode
        command(LCD_ENTRYMODESET | _displaymode);
 80a0754:	2106      	movs	r1, #6
 80a0756:	f7ff ff74 	bl	80a0642 <_ZN17LiquidCrystal_I2C7commandEh>

        home();
 80a075a:	4620      	mov	r0, r4

}
 80a075c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

        // set the entry mode
        command(LCD_ENTRYMODESET | _displaymode);

        home();
 80a0760:	f7ff bf7c 	b.w	80a065c <_ZN17LiquidCrystal_I2C4homeEv>

080a0764 <_ZN17LiquidCrystal_I2C9init_privEv>:
void LiquidCrystal_I2C::init(){
        init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
 80a0764:	b510      	push	{r4, lr}
 80a0766:	4604      	mov	r4, r0
        Wire.setSpeed(CLOCK_SPEED_100KHZ);
 80a0768:	f001 fb42 	bl	80a1df0 <_Z19__fetch_global_Wirev>
 80a076c:	490a      	ldr	r1, [pc, #40]	; (80a0798 <_ZN17LiquidCrystal_I2C9init_privEv+0x34>)
 80a076e:	f001 f9c5 	bl	80a1afc <_ZN7TwoWire8setSpeedEm>
        Wire.stretchClock(true);
 80a0772:	f001 fb3d 	bl	80a1df0 <_Z19__fetch_global_Wirev>
 80a0776:	2101      	movs	r1, #1
 80a0778:	f001 f9c4 	bl	80a1b04 <_ZN7TwoWire12stretchClockEb>
        Wire.begin();
 80a077c:	f001 fb38 	bl	80a1df0 <_Z19__fetch_global_Wirev>
 80a0780:	f001 f9c4 	bl	80a1b0c <_ZN7TwoWire5beginEv>
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80a0784:	2300      	movs	r3, #0
 80a0786:	7263      	strb	r3, [r4, #9]
        begin(_cols, _rows);
 80a0788:	7ba2      	ldrb	r2, [r4, #14]
 80a078a:	7b61      	ldrb	r1, [r4, #13]
 80a078c:	4620      	mov	r0, r4
}
 80a078e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
        Wire.setSpeed(CLOCK_SPEED_100KHZ);
        Wire.stretchClock(true);
        Wire.begin();
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
        begin(_cols, _rows);
 80a0792:	f7ff bf97 	b.w	80a06c4 <_ZN17LiquidCrystal_I2C5beginEhhh>
 80a0796:	bf00      	nop
 80a0798:	000186a0 	.word	0x000186a0

080a079c <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
        init_priv();
 80a079c:	f7ff bfe2 	b.w	80a0764 <_ZN17LiquidCrystal_I2C9init_privEv>

080a07a0 <_GLOBAL__sub_I__ZN17LiquidCrystal_I2CC2Ehhh>:
 80a07a0:	f000 b800 	b.w	80a07a4 <HAL_Pin_Map>

080a07a4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a07a4:	b508      	push	{r3, lr}
 80a07a6:	4b02      	ldr	r3, [pc, #8]	; (80a07b0 <HAL_Pin_Map+0xc>)
 80a07a8:	681b      	ldr	r3, [r3, #0]
 80a07aa:	681b      	ldr	r3, [r3, #0]
 80a07ac:	9301      	str	r3, [sp, #4]
 80a07ae:	bd08      	pop	{r3, pc}
 80a07b0:	080601b0 	.word	0x080601b0

080a07b4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a07b4:	b508      	push	{r3, lr}
 80a07b6:	4b02      	ldr	r3, [pc, #8]	; (80a07c0 <HAL_Pin_Mode+0xc>)
 80a07b8:	681b      	ldr	r3, [r3, #0]
 80a07ba:	689b      	ldr	r3, [r3, #8]
 80a07bc:	9301      	str	r3, [sp, #4]
 80a07be:	bd08      	pop	{r3, pc}
 80a07c0:	080601b0 	.word	0x080601b0

080a07c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a07c4:	b508      	push	{r3, lr}
 80a07c6:	4b02      	ldr	r3, [pc, #8]	; (80a07d0 <HAL_Get_Pin_Mode+0xc>)
 80a07c8:	681b      	ldr	r3, [r3, #0]
 80a07ca:	68db      	ldr	r3, [r3, #12]
 80a07cc:	9301      	str	r3, [sp, #4]
 80a07ce:	bd08      	pop	{r3, pc}
 80a07d0:	080601b0 	.word	0x080601b0

080a07d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a07d4:	b508      	push	{r3, lr}
 80a07d6:	4b02      	ldr	r3, [pc, #8]	; (80a07e0 <HAL_GPIO_Write+0xc>)
 80a07d8:	681b      	ldr	r3, [r3, #0]
 80a07da:	691b      	ldr	r3, [r3, #16]
 80a07dc:	9301      	str	r3, [sp, #4]
 80a07de:	bd08      	pop	{r3, pc}
 80a07e0:	080601b0 	.word	0x080601b0

080a07e4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a07e4:	b508      	push	{r3, lr}
 80a07e6:	4b02      	ldr	r3, [pc, #8]	; (80a07f0 <HAL_GPIO_Read+0xc>)
 80a07e8:	681b      	ldr	r3, [r3, #0]
 80a07ea:	695b      	ldr	r3, [r3, #20]
 80a07ec:	9301      	str	r3, [sp, #4]
 80a07ee:	bd08      	pop	{r3, pc}
 80a07f0:	080601b0 	.word	0x080601b0

080a07f4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a07f4:	b508      	push	{r3, lr}
 80a07f6:	4b02      	ldr	r3, [pc, #8]	; (80a0800 <HAL_Interrupts_Enable_All+0xc>)
 80a07f8:	681b      	ldr	r3, [r3, #0]
 80a07fa:	6a1b      	ldr	r3, [r3, #32]
 80a07fc:	9301      	str	r3, [sp, #4]
 80a07fe:	bd08      	pop	{r3, pc}
 80a0800:	080601b0 	.word	0x080601b0

080a0804 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a0804:	b508      	push	{r3, lr}
 80a0806:	4b02      	ldr	r3, [pc, #8]	; (80a0810 <HAL_Interrupts_Disable_All+0xc>)
 80a0808:	681b      	ldr	r3, [r3, #0]
 80a080a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a080c:	9301      	str	r3, [sp, #4]
 80a080e:	bd08      	pop	{r3, pc}
 80a0810:	080601b0 	.word	0x080601b0

080a0814 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0814:	b508      	push	{r3, lr}
 80a0816:	4b02      	ldr	r3, [pc, #8]	; (80a0820 <HAL_SPI_Init+0xc>)
 80a0818:	681b      	ldr	r3, [r3, #0]
 80a081a:	69db      	ldr	r3, [r3, #28]
 80a081c:	9301      	str	r3, [sp, #4]
 80a081e:	bd08      	pop	{r3, pc}
 80a0820:	080601b4 	.word	0x080601b4

080a0824 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0824:	b508      	push	{r3, lr}
 80a0826:	4b02      	ldr	r3, [pc, #8]	; (80a0830 <HAL_SPI_Is_Enabled+0xc>)
 80a0828:	681b      	ldr	r3, [r3, #0]
 80a082a:	6a1b      	ldr	r3, [r3, #32]
 80a082c:	9301      	str	r3, [sp, #4]
 80a082e:	bd08      	pop	{r3, pc}
 80a0830:	080601b4 	.word	0x080601b4

080a0834 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0834:	b508      	push	{r3, lr}
 80a0836:	4b02      	ldr	r3, [pc, #8]	; (80a0840 <HAL_RNG_GetRandomNumber+0xc>)
 80a0838:	681b      	ldr	r3, [r3, #0]
 80a083a:	685b      	ldr	r3, [r3, #4]
 80a083c:	9301      	str	r3, [sp, #4]
 80a083e:	bd08      	pop	{r3, pc}
 80a0840:	0806019c 	.word	0x0806019c

080a0844 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0844:	b508      	push	{r3, lr}
 80a0846:	4b02      	ldr	r3, [pc, #8]	; (80a0850 <HAL_Delay_Microseconds+0xc>)
 80a0848:	681b      	ldr	r3, [r3, #0]
 80a084a:	68db      	ldr	r3, [r3, #12]
 80a084c:	9301      	str	r3, [sp, #4]
 80a084e:	bd08      	pop	{r3, pc}
 80a0850:	0806019c 	.word	0x0806019c

080a0854 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0854:	b508      	push	{r3, lr}
 80a0856:	4b02      	ldr	r3, [pc, #8]	; (80a0860 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0858:	681b      	ldr	r3, [r3, #0]
 80a085a:	695b      	ldr	r3, [r3, #20]
 80a085c:	9301      	str	r3, [sp, #4]
 80a085e:	bd08      	pop	{r3, pc}
 80a0860:	0806019c 	.word	0x0806019c

080a0864 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0864:	b508      	push	{r3, lr}
 80a0866:	4b02      	ldr	r3, [pc, #8]	; (80a0870 <os_mutex_create+0xc>)
 80a0868:	681b      	ldr	r3, [r3, #0]
 80a086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a086c:	9301      	str	r3, [sp, #4]
 80a086e:	bd08      	pop	{r3, pc}
 80a0870:	080601d0 	.word	0x080601d0

080a0874 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0874:	b508      	push	{r3, lr}
 80a0876:	4b02      	ldr	r3, [pc, #8]	; (80a0880 <HAL_USART_Init+0xc>)
 80a0878:	681b      	ldr	r3, [r3, #0]
 80a087a:	699b      	ldr	r3, [r3, #24]
 80a087c:	9301      	str	r3, [sp, #4]
 80a087e:	bd08      	pop	{r3, pc}
 80a0880:	080601c4 	.word	0x080601c4

080a0884 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0884:	b508      	push	{r3, lr}
 80a0886:	4b02      	ldr	r3, [pc, #8]	; (80a0890 <HAL_USART_Write_Data+0xc>)
 80a0888:	681b      	ldr	r3, [r3, #0]
 80a088a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a088c:	9301      	str	r3, [sp, #4]
 80a088e:	bd08      	pop	{r3, pc}
 80a0890:	080601c4 	.word	0x080601c4

080a0894 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0894:	b508      	push	{r3, lr}
 80a0896:	4b02      	ldr	r3, [pc, #8]	; (80a08a0 <HAL_USART_Available_Data+0xc>)
 80a0898:	681b      	ldr	r3, [r3, #0]
 80a089a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a089c:	9301      	str	r3, [sp, #4]
 80a089e:	bd08      	pop	{r3, pc}
 80a08a0:	080601c4 	.word	0x080601c4

080a08a4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a08a4:	b508      	push	{r3, lr}
 80a08a6:	4b02      	ldr	r3, [pc, #8]	; (80a08b0 <HAL_USART_Read_Data+0xc>)
 80a08a8:	681b      	ldr	r3, [r3, #0]
 80a08aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a08ac:	9301      	str	r3, [sp, #4]
 80a08ae:	bd08      	pop	{r3, pc}
 80a08b0:	080601c4 	.word	0x080601c4

080a08b4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a08b4:	b508      	push	{r3, lr}
 80a08b6:	4b02      	ldr	r3, [pc, #8]	; (80a08c0 <HAL_USART_Peek_Data+0xc>)
 80a08b8:	681b      	ldr	r3, [r3, #0]
 80a08ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08bc:	9301      	str	r3, [sp, #4]
 80a08be:	bd08      	pop	{r3, pc}
 80a08c0:	080601c4 	.word	0x080601c4

080a08c4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a08c4:	b508      	push	{r3, lr}
 80a08c6:	4b02      	ldr	r3, [pc, #8]	; (80a08d0 <HAL_USART_Flush_Data+0xc>)
 80a08c8:	681b      	ldr	r3, [r3, #0]
 80a08ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a08cc:	9301      	str	r3, [sp, #4]
 80a08ce:	bd08      	pop	{r3, pc}
 80a08d0:	080601c4 	.word	0x080601c4

080a08d4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a08d4:	b508      	push	{r3, lr}
 80a08d6:	4b02      	ldr	r3, [pc, #8]	; (80a08e0 <HAL_USART_Is_Enabled+0xc>)
 80a08d8:	681b      	ldr	r3, [r3, #0]
 80a08da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a08dc:	9301      	str	r3, [sp, #4]
 80a08de:	bd08      	pop	{r3, pc}
 80a08e0:	080601c4 	.word	0x080601c4

080a08e4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a08e4:	b508      	push	{r3, lr}
 80a08e6:	4b02      	ldr	r3, [pc, #8]	; (80a08f0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a08e8:	681b      	ldr	r3, [r3, #0]
 80a08ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a08ec:	9301      	str	r3, [sp, #4]
 80a08ee:	bd08      	pop	{r3, pc}
 80a08f0:	080601c4 	.word	0x080601c4

080a08f4 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a08f4:	b508      	push	{r3, lr}
 80a08f6:	4b02      	ldr	r3, [pc, #8]	; (80a0900 <HAL_I2C_Set_Speed+0xc>)
 80a08f8:	681b      	ldr	r3, [r3, #0]
 80a08fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a08fc:	9301      	str	r3, [sp, #4]
 80a08fe:	bd08      	pop	{r3, pc}
 80a0900:	080601ac 	.word	0x080601ac

080a0904 <HAL_I2C_Stretch_Clock>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
 80a0904:	b508      	push	{r3, lr}
 80a0906:	4b02      	ldr	r3, [pc, #8]	; (80a0910 <HAL_I2C_Stretch_Clock+0xc>)
 80a0908:	681b      	ldr	r3, [r3, #0]
 80a090a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a090c:	9301      	str	r3, [sp, #4]
 80a090e:	bd08      	pop	{r3, pc}
 80a0910:	080601ac 	.word	0x080601ac

080a0914 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0914:	b508      	push	{r3, lr}
 80a0916:	4b02      	ldr	r3, [pc, #8]	; (80a0920 <HAL_I2C_Begin+0xc>)
 80a0918:	681b      	ldr	r3, [r3, #0]
 80a091a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a091c:	9301      	str	r3, [sp, #4]
 80a091e:	bd08      	pop	{r3, pc}
 80a0920:	080601ac 	.word	0x080601ac

080a0924 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a0924:	b508      	push	{r3, lr}
 80a0926:	4b02      	ldr	r3, [pc, #8]	; (80a0930 <HAL_I2C_Begin_Transmission+0xc>)
 80a0928:	681b      	ldr	r3, [r3, #0]
 80a092a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a092c:	9301      	str	r3, [sp, #4]
 80a092e:	bd08      	pop	{r3, pc}
 80a0930:	080601ac 	.word	0x080601ac

080a0934 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0934:	b508      	push	{r3, lr}
 80a0936:	4b02      	ldr	r3, [pc, #8]	; (80a0940 <HAL_I2C_End_Transmission+0xc>)
 80a0938:	681b      	ldr	r3, [r3, #0]
 80a093a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a093c:	9301      	str	r3, [sp, #4]
 80a093e:	bd08      	pop	{r3, pc}
 80a0940:	080601ac 	.word	0x080601ac

080a0944 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0944:	b508      	push	{r3, lr}
 80a0946:	4b02      	ldr	r3, [pc, #8]	; (80a0950 <HAL_I2C_Write_Data+0xc>)
 80a0948:	681b      	ldr	r3, [r3, #0]
 80a094a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a094c:	9301      	str	r3, [sp, #4]
 80a094e:	bd08      	pop	{r3, pc}
 80a0950:	080601ac 	.word	0x080601ac

080a0954 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0954:	b508      	push	{r3, lr}
 80a0956:	4b02      	ldr	r3, [pc, #8]	; (80a0960 <HAL_I2C_Available_Data+0xc>)
 80a0958:	681b      	ldr	r3, [r3, #0]
 80a095a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a095c:	9301      	str	r3, [sp, #4]
 80a095e:	bd08      	pop	{r3, pc}
 80a0960:	080601ac 	.word	0x080601ac

080a0964 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0964:	b508      	push	{r3, lr}
 80a0966:	4b02      	ldr	r3, [pc, #8]	; (80a0970 <HAL_I2C_Read_Data+0xc>)
 80a0968:	681b      	ldr	r3, [r3, #0]
 80a096a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a096c:	9301      	str	r3, [sp, #4]
 80a096e:	bd08      	pop	{r3, pc}
 80a0970:	080601ac 	.word	0x080601ac

080a0974 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0974:	b508      	push	{r3, lr}
 80a0976:	4b02      	ldr	r3, [pc, #8]	; (80a0980 <HAL_I2C_Peek_Data+0xc>)
 80a0978:	681b      	ldr	r3, [r3, #0]
 80a097a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a097c:	9301      	str	r3, [sp, #4]
 80a097e:	bd08      	pop	{r3, pc}
 80a0980:	080601ac 	.word	0x080601ac

080a0984 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0984:	b508      	push	{r3, lr}
 80a0986:	4b02      	ldr	r3, [pc, #8]	; (80a0990 <HAL_I2C_Flush_Data+0xc>)
 80a0988:	681b      	ldr	r3, [r3, #0]
 80a098a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a098c:	9301      	str	r3, [sp, #4]
 80a098e:	bd08      	pop	{r3, pc}
 80a0990:	080601ac 	.word	0x080601ac

080a0994 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0994:	b508      	push	{r3, lr}
 80a0996:	4b02      	ldr	r3, [pc, #8]	; (80a09a0 <HAL_I2C_Is_Enabled+0xc>)
 80a0998:	681b      	ldr	r3, [r3, #0]
 80a099a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a099c:	9301      	str	r3, [sp, #4]
 80a099e:	bd08      	pop	{r3, pc}
 80a09a0:	080601ac 	.word	0x080601ac

080a09a4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a09a4:	b508      	push	{r3, lr}
 80a09a6:	4b03      	ldr	r3, [pc, #12]	; (80a09b4 <HAL_I2C_Init+0x10>)
 80a09a8:	681b      	ldr	r3, [r3, #0]
 80a09aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a09ae:	9301      	str	r3, [sp, #4]
 80a09b0:	bd08      	pop	{r3, pc}
 80a09b2:	0000      	.short	0x0000
 80a09b4:	080601ac 	.word	0x080601ac

080a09b8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a09b8:	b508      	push	{r3, lr}
 80a09ba:	4b02      	ldr	r3, [pc, #8]	; (80a09c4 <HAL_USB_USART_Init+0xc>)
 80a09bc:	681b      	ldr	r3, [r3, #0]
 80a09be:	681b      	ldr	r3, [r3, #0]
 80a09c0:	9301      	str	r3, [sp, #4]
 80a09c2:	bd08      	pop	{r3, pc}
 80a09c4:	080601d8 	.word	0x080601d8

080a09c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b02      	ldr	r3, [pc, #8]	; (80a09d4 <HAL_USB_USART_Available_Data+0xc>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	691b      	ldr	r3, [r3, #16]
 80a09d0:	9301      	str	r3, [sp, #4]
 80a09d2:	bd08      	pop	{r3, pc}
 80a09d4:	080601d8 	.word	0x080601d8

080a09d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a09d8:	b508      	push	{r3, lr}
 80a09da:	4b02      	ldr	r3, [pc, #8]	; (80a09e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a09dc:	681b      	ldr	r3, [r3, #0]
 80a09de:	695b      	ldr	r3, [r3, #20]
 80a09e0:	9301      	str	r3, [sp, #4]
 80a09e2:	bd08      	pop	{r3, pc}
 80a09e4:	080601d8 	.word	0x080601d8

080a09e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a09e8:	b508      	push	{r3, lr}
 80a09ea:	4b02      	ldr	r3, [pc, #8]	; (80a09f4 <HAL_USB_USART_Receive_Data+0xc>)
 80a09ec:	681b      	ldr	r3, [r3, #0]
 80a09ee:	699b      	ldr	r3, [r3, #24]
 80a09f0:	9301      	str	r3, [sp, #4]
 80a09f2:	bd08      	pop	{r3, pc}
 80a09f4:	080601d8 	.word	0x080601d8

080a09f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a09f8:	b508      	push	{r3, lr}
 80a09fa:	4b02      	ldr	r3, [pc, #8]	; (80a0a04 <HAL_USB_USART_Send_Data+0xc>)
 80a09fc:	681b      	ldr	r3, [r3, #0]
 80a09fe:	69db      	ldr	r3, [r3, #28]
 80a0a00:	9301      	str	r3, [sp, #4]
 80a0a02:	bd08      	pop	{r3, pc}
 80a0a04:	080601d8 	.word	0x080601d8

080a0a08 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0a08:	b508      	push	{r3, lr}
 80a0a0a:	4b02      	ldr	r3, [pc, #8]	; (80a0a14 <HAL_USB_USART_Flush_Data+0xc>)
 80a0a0c:	681b      	ldr	r3, [r3, #0]
 80a0a0e:	6a1b      	ldr	r3, [r3, #32]
 80a0a10:	9301      	str	r3, [sp, #4]
 80a0a12:	bd08      	pop	{r3, pc}
 80a0a14:	080601d8 	.word	0x080601d8

080a0a18 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0a18:	b508      	push	{r3, lr}
 80a0a1a:	4b02      	ldr	r3, [pc, #8]	; (80a0a24 <inet_gethostbyname+0xc>)
 80a0a1c:	681b      	ldr	r3, [r3, #0]
 80a0a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a20:	9301      	str	r3, [sp, #4]
 80a0a22:	bd08      	pop	{r3, pc}
 80a0a24:	080601c0 	.word	0x080601c0

080a0a28 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0a28:	b508      	push	{r3, lr}
 80a0a2a:	4b02      	ldr	r3, [pc, #8]	; (80a0a34 <set_system_mode+0xc>)
 80a0a2c:	681b      	ldr	r3, [r3, #0]
 80a0a2e:	685b      	ldr	r3, [r3, #4]
 80a0a30:	9301      	str	r3, [sp, #4]
 80a0a32:	bd08      	pop	{r3, pc}
 80a0a34:	080601a4 	.word	0x080601a4

080a0a38 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0a38:	b508      	push	{r3, lr}
 80a0a3a:	4b02      	ldr	r3, [pc, #8]	; (80a0a44 <system_delay_ms+0xc>)
 80a0a3c:	681b      	ldr	r3, [r3, #0]
 80a0a3e:	695b      	ldr	r3, [r3, #20]
 80a0a40:	9301      	str	r3, [sp, #4]
 80a0a42:	bd08      	pop	{r3, pc}
 80a0a44:	080601a4 	.word	0x080601a4

080a0a48 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0a48:	b508      	push	{r3, lr}
 80a0a4a:	4b02      	ldr	r3, [pc, #8]	; (80a0a54 <system_thread_set_state+0xc>)
 80a0a4c:	681b      	ldr	r3, [r3, #0]
 80a0a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a50:	9301      	str	r3, [sp, #4]
 80a0a52:	bd08      	pop	{r3, pc}
 80a0a54:	080601a4 	.word	0x080601a4

080a0a58 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0a58:	b508      	push	{r3, lr}
 80a0a5a:	4b02      	ldr	r3, [pc, #8]	; (80a0a64 <application_thread_current+0xc>)
 80a0a5c:	681b      	ldr	r3, [r3, #0]
 80a0a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0a60:	9301      	str	r3, [sp, #4]
 80a0a62:	bd08      	pop	{r3, pc}
 80a0a64:	080601a4 	.word	0x080601a4

080a0a68 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0a68:	b508      	push	{r3, lr}
 80a0a6a:	4b02      	ldr	r3, [pc, #8]	; (80a0a74 <application_thread_invoke+0xc>)
 80a0a6c:	681b      	ldr	r3, [r3, #0]
 80a0a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0a70:	9301      	str	r3, [sp, #4]
 80a0a72:	bd08      	pop	{r3, pc}
 80a0a74:	080601a4 	.word	0x080601a4

080a0a78 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0a78:	b508      	push	{r3, lr}
 80a0a7a:	4b03      	ldr	r3, [pc, #12]	; (80a0a88 <system_ctrl_set_app_request_handler+0x10>)
 80a0a7c:	681b      	ldr	r3, [r3, #0]
 80a0a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0a82:	9301      	str	r3, [sp, #4]
 80a0a84:	bd08      	pop	{r3, pc}
 80a0a86:	0000      	.short	0x0000
 80a0a88:	080601a4 	.word	0x080601a4

080a0a8c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0a8c:	b508      	push	{r3, lr}
 80a0a8e:	4b03      	ldr	r3, [pc, #12]	; (80a0a9c <system_ctrl_set_result+0x10>)
 80a0a90:	681b      	ldr	r3, [r3, #0]
 80a0a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0a96:	9301      	str	r3, [sp, #4]
 80a0a98:	bd08      	pop	{r3, pc}
 80a0a9a:	0000      	.short	0x0000
 80a0a9c:	080601a4 	.word	0x080601a4

080a0aa0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0aa0:	b508      	push	{r3, lr}
 80a0aa2:	4b02      	ldr	r3, [pc, #8]	; (80a0aac <network_connect+0xc>)
 80a0aa4:	681b      	ldr	r3, [r3, #0]
 80a0aa6:	685b      	ldr	r3, [r3, #4]
 80a0aa8:	9301      	str	r3, [sp, #4]
 80a0aaa:	bd08      	pop	{r3, pc}
 80a0aac:	080601c8 	.word	0x080601c8

080a0ab0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0ab0:	b508      	push	{r3, lr}
 80a0ab2:	4b02      	ldr	r3, [pc, #8]	; (80a0abc <network_connecting+0xc>)
 80a0ab4:	681b      	ldr	r3, [r3, #0]
 80a0ab6:	689b      	ldr	r3, [r3, #8]
 80a0ab8:	9301      	str	r3, [sp, #4]
 80a0aba:	bd08      	pop	{r3, pc}
 80a0abc:	080601c8 	.word	0x080601c8

080a0ac0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0ac0:	b508      	push	{r3, lr}
 80a0ac2:	4b02      	ldr	r3, [pc, #8]	; (80a0acc <network_disconnect+0xc>)
 80a0ac4:	681b      	ldr	r3, [r3, #0]
 80a0ac6:	68db      	ldr	r3, [r3, #12]
 80a0ac8:	9301      	str	r3, [sp, #4]
 80a0aca:	bd08      	pop	{r3, pc}
 80a0acc:	080601c8 	.word	0x080601c8

080a0ad0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0ad0:	b508      	push	{r3, lr}
 80a0ad2:	4b02      	ldr	r3, [pc, #8]	; (80a0adc <network_ready+0xc>)
 80a0ad4:	681b      	ldr	r3, [r3, #0]
 80a0ad6:	691b      	ldr	r3, [r3, #16]
 80a0ad8:	9301      	str	r3, [sp, #4]
 80a0ada:	bd08      	pop	{r3, pc}
 80a0adc:	080601c8 	.word	0x080601c8

080a0ae0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ae0:	b508      	push	{r3, lr}
 80a0ae2:	4b02      	ldr	r3, [pc, #8]	; (80a0aec <network_on+0xc>)
 80a0ae4:	681b      	ldr	r3, [r3, #0]
 80a0ae6:	695b      	ldr	r3, [r3, #20]
 80a0ae8:	9301      	str	r3, [sp, #4]
 80a0aea:	bd08      	pop	{r3, pc}
 80a0aec:	080601c8 	.word	0x080601c8

080a0af0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0af0:	b508      	push	{r3, lr}
 80a0af2:	4b02      	ldr	r3, [pc, #8]	; (80a0afc <network_off+0xc>)
 80a0af4:	681b      	ldr	r3, [r3, #0]
 80a0af6:	699b      	ldr	r3, [r3, #24]
 80a0af8:	9301      	str	r3, [sp, #4]
 80a0afa:	bd08      	pop	{r3, pc}
 80a0afc:	080601c8 	.word	0x080601c8

080a0b00 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0b00:	b508      	push	{r3, lr}
 80a0b02:	4b02      	ldr	r3, [pc, #8]	; (80a0b0c <network_listen+0xc>)
 80a0b04:	681b      	ldr	r3, [r3, #0]
 80a0b06:	69db      	ldr	r3, [r3, #28]
 80a0b08:	9301      	str	r3, [sp, #4]
 80a0b0a:	bd08      	pop	{r3, pc}
 80a0b0c:	080601c8 	.word	0x080601c8

080a0b10 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0b10:	b508      	push	{r3, lr}
 80a0b12:	4b02      	ldr	r3, [pc, #8]	; (80a0b1c <network_listening+0xc>)
 80a0b14:	681b      	ldr	r3, [r3, #0]
 80a0b16:	6a1b      	ldr	r3, [r3, #32]
 80a0b18:	9301      	str	r3, [sp, #4]
 80a0b1a:	bd08      	pop	{r3, pc}
 80a0b1c:	080601c8 	.word	0x080601c8

080a0b20 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0b20:	b508      	push	{r3, lr}
 80a0b22:	4b02      	ldr	r3, [pc, #8]	; (80a0b2c <network_set_listen_timeout+0xc>)
 80a0b24:	681b      	ldr	r3, [r3, #0]
 80a0b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b28:	9301      	str	r3, [sp, #4]
 80a0b2a:	bd08      	pop	{r3, pc}
 80a0b2c:	080601c8 	.word	0x080601c8

080a0b30 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0b30:	b508      	push	{r3, lr}
 80a0b32:	4b02      	ldr	r3, [pc, #8]	; (80a0b3c <network_get_listen_timeout+0xc>)
 80a0b34:	681b      	ldr	r3, [r3, #0]
 80a0b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b38:	9301      	str	r3, [sp, #4]
 80a0b3a:	bd08      	pop	{r3, pc}
 80a0b3c:	080601c8 	.word	0x080601c8

080a0b40 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0b40:	b508      	push	{r3, lr}
 80a0b42:	4b02      	ldr	r3, [pc, #8]	; (80a0b4c <spark_cloud_flag_connected+0xc>)
 80a0b44:	681b      	ldr	r3, [r3, #0]
 80a0b46:	695b      	ldr	r3, [r3, #20]
 80a0b48:	9301      	str	r3, [sp, #4]
 80a0b4a:	bd08      	pop	{r3, pc}
 80a0b4c:	080601cc 	.word	0x080601cc

080a0b50 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0b50:	b508      	push	{r3, lr}
 80a0b52:	4b02      	ldr	r3, [pc, #8]	; (80a0b5c <spark_send_event+0xc>)
 80a0b54:	681b      	ldr	r3, [r3, #0]
 80a0b56:	6a1b      	ldr	r3, [r3, #32]
 80a0b58:	9301      	str	r3, [sp, #4]
 80a0b5a:	bd08      	pop	{r3, pc}
 80a0b5c:	080601cc 	.word	0x080601cc

080a0b60 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0b60:	b508      	push	{r3, lr}
 80a0b62:	4b02      	ldr	r3, [pc, #8]	; (80a0b6c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0b64:	681b      	ldr	r3, [r3, #0]
 80a0b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0b68:	9301      	str	r3, [sp, #4]
 80a0b6a:	bd08      	pop	{r3, pc}
 80a0b6c:	080601cc 	.word	0x080601cc

080a0b70 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0b70:	b508      	push	{r3, lr}
 80a0b72:	4b02      	ldr	r3, [pc, #8]	; (80a0b7c <malloc+0xc>)
 80a0b74:	681b      	ldr	r3, [r3, #0]
 80a0b76:	681b      	ldr	r3, [r3, #0]
 80a0b78:	9301      	str	r3, [sp, #4]
 80a0b7a:	bd08      	pop	{r3, pc}
 80a0b7c:	080601a0 	.word	0x080601a0

080a0b80 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0b80:	b508      	push	{r3, lr}
 80a0b82:	4b02      	ldr	r3, [pc, #8]	; (80a0b8c <free+0xc>)
 80a0b84:	681b      	ldr	r3, [r3, #0]
 80a0b86:	685b      	ldr	r3, [r3, #4]
 80a0b88:	9301      	str	r3, [sp, #4]
 80a0b8a:	bd08      	pop	{r3, pc}
 80a0b8c:	080601a0 	.word	0x080601a0

080a0b90 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0b90:	b508      	push	{r3, lr}
 80a0b92:	4b02      	ldr	r3, [pc, #8]	; (80a0b9c <realloc+0xc>)
 80a0b94:	681b      	ldr	r3, [r3, #0]
 80a0b96:	689b      	ldr	r3, [r3, #8]
 80a0b98:	9301      	str	r3, [sp, #4]
 80a0b9a:	bd08      	pop	{r3, pc}
 80a0b9c:	080601a0 	.word	0x080601a0

080a0ba0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0ba0:	b508      	push	{r3, lr}
 80a0ba2:	4b02      	ldr	r3, [pc, #8]	; (80a0bac <vsnprintf+0xc>)
 80a0ba4:	681b      	ldr	r3, [r3, #0]
 80a0ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0ba8:	9301      	str	r3, [sp, #4]
 80a0baa:	bd08      	pop	{r3, pc}
 80a0bac:	080601a0 	.word	0x080601a0

080a0bb0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0bb0:	b508      	push	{r3, lr}
 80a0bb2:	4b02      	ldr	r3, [pc, #8]	; (80a0bbc <abort+0xc>)
 80a0bb4:	681b      	ldr	r3, [r3, #0]
 80a0bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0bb8:	9301      	str	r3, [sp, #4]
 80a0bba:	bd08      	pop	{r3, pc}
 80a0bbc:	080601a0 	.word	0x080601a0

080a0bc0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0bc0:	b508      	push	{r3, lr}
 80a0bc2:	4b02      	ldr	r3, [pc, #8]	; (80a0bcc <_malloc_r+0xc>)
 80a0bc4:	681b      	ldr	r3, [r3, #0]
 80a0bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0bc8:	9301      	str	r3, [sp, #4]
 80a0bca:	bd08      	pop	{r3, pc}
 80a0bcc:	080601a0 	.word	0x080601a0

080a0bd0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0bd0:	4770      	bx	lr

080a0bd2 <_ZN8SPIClassD0Ev>:
 80a0bd2:	b510      	push	{r4, lr}
 80a0bd4:	4604      	mov	r4, r0
 80a0bd6:	2110      	movs	r1, #16
 80a0bd8:	f001 f92f 	bl	80a1e3a <_ZdlPvj>
 80a0bdc:	4620      	mov	r0, r4
 80a0bde:	bd10      	pop	{r4, pc}

080a0be0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0be0:	b570      	push	{r4, r5, r6, lr}
 80a0be2:	4604      	mov	r4, r0
 80a0be4:	460e      	mov	r6, r1
 80a0be6:	4b07      	ldr	r3, [pc, #28]	; (80a0c04 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0be8:	2500      	movs	r5, #0
 80a0bea:	6003      	str	r3, [r0, #0]
 80a0bec:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0bf0:	f7ff fe38 	bl	80a0864 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0bf4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0bf6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0bf8:	f7ff fe0c 	bl	80a0814 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0bfc:	60a5      	str	r5, [r4, #8]
}
 80a0bfe:	4620      	mov	r0, r4
 80a0c00:	bd70      	pop	{r4, r5, r6, pc}
 80a0c02:	bf00      	nop
 80a0c04:	080a3154 	.word	0x080a3154

080a0c08 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0c08:	7900      	ldrb	r0, [r0, #4]
 80a0c0a:	f7ff be0b 	b.w	80a0824 <HAL_SPI_Is_Enabled>
	...

080a0c10 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0c14:	4b03      	ldr	r3, [pc, #12]	; (80a0c24 <_GLOBAL__sub_I_System+0x14>)
 80a0c16:	2000      	movs	r0, #0
 80a0c18:	7018      	strb	r0, [r3, #0]
 80a0c1a:	8058      	strh	r0, [r3, #2]
 80a0c1c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0c1e:	f7ff bf03 	b.w	80a0a28 <set_system_mode>
 80a0c22:	bf00      	nop
 80a0c24:	20000094 	.word	0x20000094

080a0c28 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0c28:	b510      	push	{r4, lr}
 80a0c2a:	4604      	mov	r4, r0
{
	free(buffer);
 80a0c2c:	6800      	ldr	r0, [r0, #0]
 80a0c2e:	f7ff ffa7 	bl	80a0b80 <free>
}
 80a0c32:	4620      	mov	r0, r4
 80a0c34:	bd10      	pop	{r4, pc}

080a0c36 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0c36:	b510      	push	{r4, lr}
 80a0c38:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0c3a:	6800      	ldr	r0, [r0, #0]
 80a0c3c:	b108      	cbz	r0, 80a0c42 <_ZN6String10invalidateEv+0xc>
 80a0c3e:	f7ff ff9f 	bl	80a0b80 <free>
	buffer = NULL;
 80a0c42:	2300      	movs	r3, #0
 80a0c44:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0c46:	60a3      	str	r3, [r4, #8]
 80a0c48:	6063      	str	r3, [r4, #4]
 80a0c4a:	bd10      	pop	{r4, pc}

080a0c4c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0c4c:	b538      	push	{r3, r4, r5, lr}
 80a0c4e:	4604      	mov	r4, r0
 80a0c50:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0c52:	6800      	ldr	r0, [r0, #0]
 80a0c54:	3101      	adds	r1, #1
 80a0c56:	f7ff ff9b 	bl	80a0b90 <realloc>
	if (newbuffer) {
 80a0c5a:	b110      	cbz	r0, 80a0c62 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0c5c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0c60:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0c62:	bd38      	pop	{r3, r4, r5, pc}

080a0c64 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0c64:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0c66:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0c68:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0c6a:	b113      	cbz	r3, 80a0c72 <_ZN6String7reserveEj+0xe>
 80a0c6c:	6843      	ldr	r3, [r0, #4]
 80a0c6e:	428b      	cmp	r3, r1
 80a0c70:	d207      	bcs.n	80a0c82 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0c72:	4620      	mov	r0, r4
 80a0c74:	f7ff ffea 	bl	80a0c4c <_ZN6String12changeBufferEj>
 80a0c78:	b120      	cbz	r0, 80a0c84 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0c7a:	68a3      	ldr	r3, [r4, #8]
 80a0c7c:	b90b      	cbnz	r3, 80a0c82 <_ZN6String7reserveEj+0x1e>
 80a0c7e:	6822      	ldr	r2, [r4, #0]
 80a0c80:	7013      	strb	r3, [r2, #0]
 80a0c82:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0c84:	bd10      	pop	{r4, pc}

080a0c86 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0c86:	b570      	push	{r4, r5, r6, lr}
 80a0c88:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0c8a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0c8c:	4604      	mov	r4, r0
 80a0c8e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0c90:	f7ff ffe8 	bl	80a0c64 <_ZN6String7reserveEj>
 80a0c94:	b918      	cbnz	r0, 80a0c9e <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0c96:	4620      	mov	r0, r4
 80a0c98:	f7ff ffcd 	bl	80a0c36 <_ZN6String10invalidateEv>
		return *this;
 80a0c9c:	e009      	b.n	80a0cb2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0c9e:	462a      	mov	r2, r5
 80a0ca0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0ca2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0ca4:	6820      	ldr	r0, [r4, #0]
 80a0ca6:	f002 f9a7 	bl	80a2ff8 <memcpy>
	buffer[len] = 0;
 80a0caa:	6822      	ldr	r2, [r4, #0]
 80a0cac:	68a3      	ldr	r3, [r4, #8]
 80a0cae:	2100      	movs	r1, #0
 80a0cb0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0cb2:	4620      	mov	r0, r4
 80a0cb4:	bd70      	pop	{r4, r5, r6, pc}

080a0cb6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0cb6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0cb8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0cba:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0cbc:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0cbe:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0cc0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0cc2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0cc4:	460d      	mov	r5, r1
 80a0cc6:	b139      	cbz	r1, 80a0cd8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0cc8:	4608      	mov	r0, r1
 80a0cca:	f002 f9ec 	bl	80a30a6 <strlen>
 80a0cce:	4629      	mov	r1, r5
 80a0cd0:	4602      	mov	r2, r0
 80a0cd2:	4620      	mov	r0, r4
 80a0cd4:	f7ff ffd7 	bl	80a0c86 <_ZN6String4copyEPKcj>
}
 80a0cd8:	4620      	mov	r0, r4
 80a0cda:	bd38      	pop	{r3, r4, r5, pc}

080a0cdc <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a0cdc:	b40e      	push	{r1, r2, r3}
 80a0cde:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a0ce0:	ac09      	add	r4, sp, #36	; 0x24
 80a0ce2:	f854 7b04 	ldr.w	r7, [r4], #4
 80a0ce6:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a0ce8:	4623      	mov	r3, r4
 80a0cea:	463a      	mov	r2, r7
 80a0cec:	2105      	movs	r1, #5
 80a0cee:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80a0cf0:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a0cf2:	f7ff ff55 	bl	80a0ba0 <vsnprintf>
 80a0cf6:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a0cf8:	490b      	ldr	r1, [pc, #44]	; (80a0d28 <_ZN6String6formatEPKcz+0x4c>)
 80a0cfa:	4628      	mov	r0, r5
 80a0cfc:	f7ff ffdb 	bl	80a0cb6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a0d00:	4631      	mov	r1, r6
 80a0d02:	4628      	mov	r0, r5
 80a0d04:	f7ff ffae 	bl	80a0c64 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a0d08:	6828      	ldr	r0, [r5, #0]
 80a0d0a:	b130      	cbz	r0, 80a0d1a <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a0d0c:	4623      	mov	r3, r4
 80a0d0e:	463a      	mov	r2, r7
 80a0d10:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80a0d12:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a0d14:	f7ff ff44 	bl	80a0ba0 <vsnprintf>
        va_end(marker);
        result.len = n;
 80a0d18:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80a0d1a:	4628      	mov	r0, r5
 80a0d1c:	b004      	add	sp, #16
 80a0d1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a0d22:	b003      	add	sp, #12
 80a0d24:	4770      	bx	lr
 80a0d26:	bf00      	nop
 80a0d28:	080a3214 	.word	0x080a3214

080a0d2c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d2e:	4606      	mov	r6, r0
 80a0d30:	460d      	mov	r5, r1
 80a0d32:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0d34:	2400      	movs	r4, #0
  while (size--) {
 80a0d36:	42bd      	cmp	r5, r7
 80a0d38:	d00c      	beq.n	80a0d54 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0d3a:	6833      	ldr	r3, [r6, #0]
 80a0d3c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0d40:	689b      	ldr	r3, [r3, #8]
 80a0d42:	4630      	mov	r0, r6
 80a0d44:	4798      	blx	r3
     if (chunk>=0)
 80a0d46:	2800      	cmp	r0, #0
 80a0d48:	db01      	blt.n	80a0d4e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0d4a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0d4c:	e7f3      	b.n	80a0d36 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0d4e:	2c00      	cmp	r4, #0
 80a0d50:	bf08      	it	eq
 80a0d52:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0d54:	4620      	mov	r0, r4
 80a0d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0d58 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0d58:	b570      	push	{r4, r5, r6, lr}
 80a0d5a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0d5c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0d5e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0d60:	b149      	cbz	r1, 80a0d76 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0d62:	f002 f9a0 	bl	80a30a6 <strlen>
 80a0d66:	682b      	ldr	r3, [r5, #0]
 80a0d68:	4602      	mov	r2, r0
 80a0d6a:	4621      	mov	r1, r4
 80a0d6c:	4628      	mov	r0, r5
    }
 80a0d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0d72:	68db      	ldr	r3, [r3, #12]
 80a0d74:	4718      	bx	r3
    }
 80a0d76:	bd70      	pop	{r4, r5, r6, pc}

080a0d78 <_ZN5Print5printEPKc>:
 80a0d78:	b508      	push	{r3, lr}
 80a0d7a:	f7ff ffed 	bl	80a0d58 <_ZN5Print5writeEPKc>
 80a0d7e:	bd08      	pop	{r3, pc}

080a0d80 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0d80:	6803      	ldr	r3, [r0, #0]
 80a0d82:	689b      	ldr	r3, [r3, #8]
 80a0d84:	4718      	bx	r3

080a0d86 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0d86:	2a01      	cmp	r2, #1
 80a0d88:	bf98      	it	ls
 80a0d8a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0d8c:	b530      	push	{r4, r5, lr}
 80a0d8e:	460b      	mov	r3, r1
 80a0d90:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0d92:	2100      	movs	r1, #0
 80a0d94:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0d98:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0d9c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0da0:	fb05 3312 	mls	r3, r5, r2, r3
 80a0da4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0da6:	2b09      	cmp	r3, #9
 80a0da8:	bf94      	ite	ls
 80a0daa:	3330      	addls	r3, #48	; 0x30
 80a0dac:	3337      	addhi	r3, #55	; 0x37
 80a0dae:	b2db      	uxtb	r3, r3
 80a0db0:	4621      	mov	r1, r4
 80a0db2:	f804 3901 	strb.w	r3, [r4], #-1
 80a0db6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0db8:	2d00      	cmp	r5, #0
 80a0dba:	d1ef      	bne.n	80a0d9c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0dbc:	f7ff ffcc 	bl	80a0d58 <_ZN5Print5writeEPKc>
}
 80a0dc0:	b00b      	add	sp, #44	; 0x2c
 80a0dc2:	bd30      	pop	{r4, r5, pc}

080a0dc4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0dc4:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0dc6:	b922      	cbnz	r2, 80a0dd2 <_ZN5Print5printEmi+0xe>
 80a0dc8:	6803      	ldr	r3, [r0, #0]
 80a0dca:	b2c9      	uxtb	r1, r1
 80a0dcc:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0dce:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0dd0:	4718      	bx	r3
  else return printNumber(n, base);
 80a0dd2:	b2d2      	uxtb	r2, r2
}
 80a0dd4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0dd6:	f7ff bfd6 	b.w	80a0d86 <_ZN5Print11printNumberEmh>

080a0dda <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0dda:	f7ff bff3 	b.w	80a0dc4 <_ZN5Print5printEmi>

080a0dde <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a0dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0de2:	4607      	mov	r7, r0
 80a0de4:	460e      	mov	r6, r1
  if (base == 0) {
 80a0de6:	4615      	mov	r5, r2
 80a0de8:	b92a      	cbnz	r2, 80a0df6 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a0dee:	6803      	ldr	r3, [r0, #0]
 80a0df0:	b2c9      	uxtb	r1, r1
 80a0df2:	689b      	ldr	r3, [r3, #8]
 80a0df4:	4718      	bx	r3
  } else if (base == 10) {
 80a0df6:	2a0a      	cmp	r2, #10
 80a0df8:	d102      	bne.n	80a0e00 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a0dfa:	2900      	cmp	r1, #0
 80a0dfc:	da01      	bge.n	80a0e02 <_ZN5Print5printEli+0x24>
 80a0dfe:	e004      	b.n	80a0e0a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0e00:	b2d2      	uxtb	r2, r2
  }
}
 80a0e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0e06:	f7ff bfbe 	b.w	80a0d86 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0e0a:	212d      	movs	r1, #45	; 0x2d
 80a0e0c:	f7ff ffb8 	bl	80a0d80 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a0e10:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0e12:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a0e14:	4271      	negs	r1, r6
 80a0e16:	4638      	mov	r0, r7
 80a0e18:	f7ff ffb5 	bl	80a0d86 <_ZN5Print11printNumberEmh>
 80a0e1c:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a0e24 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0e28:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0e2a:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0e2c:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0e2e:	4617      	mov	r7, r2
 80a0e30:	461e      	mov	r6, r3
 80a0e32:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0e36:	f001 fd9f 	bl	80a2978 <__aeabi_dcmpun>
 80a0e3a:	b108      	cbz	r0, 80a0e40 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0e3c:	4947      	ldr	r1, [pc, #284]	; (80a0f5c <_ZN5Print10printFloatEdh+0x138>)
 80a0e3e:	e012      	b.n	80a0e66 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a0e40:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a0e44:	f04f 32ff 	mov.w	r2, #4294967295
 80a0e48:	4b45      	ldr	r3, [pc, #276]	; (80a0f60 <_ZN5Print10printFloatEdh+0x13c>)
 80a0e4a:	4638      	mov	r0, r7
 80a0e4c:	4621      	mov	r1, r4
 80a0e4e:	f001 fd93 	bl	80a2978 <__aeabi_dcmpun>
 80a0e52:	b968      	cbnz	r0, 80a0e70 <_ZN5Print10printFloatEdh+0x4c>
 80a0e54:	f04f 32ff 	mov.w	r2, #4294967295
 80a0e58:	4b41      	ldr	r3, [pc, #260]	; (80a0f60 <_ZN5Print10printFloatEdh+0x13c>)
 80a0e5a:	4638      	mov	r0, r7
 80a0e5c:	4621      	mov	r1, r4
 80a0e5e:	f001 fd6d 	bl	80a293c <__aeabi_dcmple>
 80a0e62:	b928      	cbnz	r0, 80a0e70 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0e64:	493f      	ldr	r1, [pc, #252]	; (80a0f64 <_ZN5Print10printFloatEdh+0x140>)
 80a0e66:	4640      	mov	r0, r8
 80a0e68:	f7ff ff76 	bl	80a0d58 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a0e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a0e70:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0e74:	4b3c      	ldr	r3, [pc, #240]	; (80a0f68 <_ZN5Print10printFloatEdh+0x144>)
 80a0e76:	4638      	mov	r0, r7
 80a0e78:	4631      	mov	r1, r6
 80a0e7a:	f001 fd73 	bl	80a2964 <__aeabi_dcmpgt>
 80a0e7e:	b108      	cbz	r0, 80a0e84 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0e80:	493a      	ldr	r1, [pc, #232]	; (80a0f6c <_ZN5Print10printFloatEdh+0x148>)
 80a0e82:	e7f0      	b.n	80a0e66 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a0e84:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0e88:	4b39      	ldr	r3, [pc, #228]	; (80a0f70 <_ZN5Print10printFloatEdh+0x14c>)
 80a0e8a:	4638      	mov	r0, r7
 80a0e8c:	4631      	mov	r1, r6
 80a0e8e:	f001 fd4b 	bl	80a2928 <__aeabi_dcmplt>
 80a0e92:	2800      	cmp	r0, #0
 80a0e94:	d1f4      	bne.n	80a0e80 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a0e96:	2200      	movs	r2, #0
 80a0e98:	2300      	movs	r3, #0
 80a0e9a:	4638      	mov	r0, r7
 80a0e9c:	4631      	mov	r1, r6
 80a0e9e:	f001 fd43 	bl	80a2928 <__aeabi_dcmplt>
 80a0ea2:	b138      	cbz	r0, 80a0eb4 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a0ea4:	212d      	movs	r1, #45	; 0x2d
 80a0ea6:	4640      	mov	r0, r8
 80a0ea8:	f7ff ff6a 	bl	80a0d80 <_ZN5Print5printEc>
     number = -number;
 80a0eac:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a0eb0:	4604      	mov	r4, r0
 80a0eb2:	e000      	b.n	80a0eb6 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a0eb4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a0eb6:	492f      	ldr	r1, [pc, #188]	; (80a0f74 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a0eb8:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a0ebc:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a0ebe:	fa5f f389 	uxtb.w	r3, r9
 80a0ec2:	429d      	cmp	r5, r3
 80a0ec4:	d906      	bls.n	80a0ed4 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a0ec6:	2200      	movs	r2, #0
 80a0ec8:	4b2b      	ldr	r3, [pc, #172]	; (80a0f78 <_ZN5Print10printFloatEdh+0x154>)
 80a0eca:	f001 fbe5 	bl	80a2698 <__aeabi_ddiv>
 80a0ece:	f109 0901 	add.w	r9, r9, #1
 80a0ed2:	e7f4      	b.n	80a0ebe <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a0ed4:	463a      	mov	r2, r7
 80a0ed6:	4633      	mov	r3, r6
 80a0ed8:	f001 f902 	bl	80a20e0 <__adddf3>
 80a0edc:	460f      	mov	r7, r1
 80a0ede:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a0ee0:	f001 fd88 	bl	80a29f4 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0ee4:	220a      	movs	r2, #10
 80a0ee6:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a0ee8:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0eea:	4640      	mov	r0, r8
 80a0eec:	f7ff ff4b 	bl	80a0d86 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a0ef0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a0ef2:	b37d      	cbz	r5, 80a0f54 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a0ef4:	4648      	mov	r0, r9
 80a0ef6:	f001 fa2f 	bl	80a2358 <__aeabi_ui2d>
 80a0efa:	4602      	mov	r2, r0
 80a0efc:	460b      	mov	r3, r1
 80a0efe:	4630      	mov	r0, r6
 80a0f00:	4639      	mov	r1, r7
 80a0f02:	f001 f8eb 	bl	80a20dc <__aeabi_dsub>
 80a0f06:	4606      	mov	r6, r0
 80a0f08:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0f0a:	4640      	mov	r0, r8
 80a0f0c:	491b      	ldr	r1, [pc, #108]	; (80a0f7c <_ZN5Print10printFloatEdh+0x158>)
 80a0f0e:	f7ff ff23 	bl	80a0d58 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a0f12:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a0f14:	4b18      	ldr	r3, [pc, #96]	; (80a0f78 <_ZN5Print10printFloatEdh+0x154>)
 80a0f16:	2200      	movs	r2, #0
 80a0f18:	4630      	mov	r0, r6
 80a0f1a:	4639      	mov	r1, r7
 80a0f1c:	f001 fa92 	bl	80a2444 <__aeabi_dmul>
 80a0f20:	460f      	mov	r7, r1
 80a0f22:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a0f24:	f001 fd3e 	bl	80a29a4 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0f28:	220a      	movs	r2, #10
 80a0f2a:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a0f2c:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0f2e:	4640      	mov	r0, r8
 80a0f30:	f7ff ff55 	bl	80a0dde <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a0f34:	4404      	add	r4, r0
    remainder -= toPrint;
 80a0f36:	4648      	mov	r0, r9
 80a0f38:	f001 fa1e 	bl	80a2378 <__aeabi_i2d>
 80a0f3c:	4602      	mov	r2, r0
 80a0f3e:	460b      	mov	r3, r1
 80a0f40:	4630      	mov	r0, r6
 80a0f42:	4639      	mov	r1, r7
 80a0f44:	f001 f8ca 	bl	80a20dc <__aeabi_dsub>
 80a0f48:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a0f4a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a0f4e:	4606      	mov	r6, r0
 80a0f50:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a0f52:	d1df      	bne.n	80a0f14 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a0f54:	4620      	mov	r0, r4
 80a0f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0f5a:	bf00      	nop
 80a0f5c:	080a315c 	.word	0x080a315c
 80a0f60:	7fefffff 	.word	0x7fefffff
 80a0f64:	080a3166 	.word	0x080a3166
 80a0f68:	41efffff 	.word	0x41efffff
 80a0f6c:	080a3160 	.word	0x080a3160
 80a0f70:	c1efffff 	.word	0xc1efffff
 80a0f74:	3fe00000 	.word	0x3fe00000
 80a0f78:	40240000 	.word	0x40240000
 80a0f7c:	080a3164 	.word	0x080a3164

080a0f80 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a0f80:	f89d 1000 	ldrb.w	r1, [sp]
 80a0f84:	9100      	str	r1, [sp, #0]
 80a0f86:	f7ff bf4d 	b.w	80a0e24 <_ZN5Print10printFloatEdh>

080a0f8a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0f8a:	2300      	movs	r3, #0
 80a0f8c:	461a      	mov	r2, r3
 80a0f8e:	4619      	mov	r1, r3
 80a0f90:	6840      	ldr	r0, [r0, #4]
 80a0f92:	f7ff bda5 	b.w	80a0ae0 <network_on>

080a0f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0f96:	680b      	ldr	r3, [r1, #0]
 80a0f98:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0f9a:	b113      	cbz	r3, 80a0fa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0f9c:	685a      	ldr	r2, [r3, #4]
 80a0f9e:	3201      	adds	r2, #1
 80a0fa0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0fa2:	4770      	bx	lr

080a0fa4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0fa4:	4a01      	ldr	r2, [pc, #4]	; (80a0fac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0fa6:	4b02      	ldr	r3, [pc, #8]	; (80a0fb0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0fa8:	601a      	str	r2, [r3, #0]
 80a0faa:	4770      	bx	lr
 80a0fac:	080a31e0 	.word	0x080a31e0
 80a0fb0:	2000009c 	.word	0x2000009c

080a0fb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0fb4:	4b02      	ldr	r3, [pc, #8]	; (80a0fc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0fb6:	681a      	ldr	r2, [r3, #0]
 80a0fb8:	4b02      	ldr	r3, [pc, #8]	; (80a0fc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0fba:	601a      	str	r2, [r3, #0]
 80a0fbc:	4770      	bx	lr
 80a0fbe:	bf00      	nop
 80a0fc0:	20000000 	.word	0x20000000
 80a0fc4:	200000a0 	.word	0x200000a0

080a0fc8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0fc8:	2100      	movs	r1, #0
 80a0fca:	f7ff bd35 	b.w	80a0a38 <system_delay_ms>

080a0fce <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0fce:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0fd0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0fd2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0fd4:	b113      	cbz	r3, 80a0fdc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0fd6:	2203      	movs	r2, #3
 80a0fd8:	4601      	mov	r1, r0
 80a0fda:	4798      	blx	r3
    }
 80a0fdc:	4620      	mov	r0, r4
 80a0fde:	bd10      	pop	{r4, pc}

080a0fe0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0fe0:	b510      	push	{r4, lr}
 80a0fe2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0fe4:	f7ff fff3 	bl	80a0fce <_ZNSt14_Function_baseD1Ev>
 80a0fe8:	4620      	mov	r0, r4
 80a0fea:	bd10      	pop	{r4, pc}

080a0fec <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0fec:	b513      	push	{r0, r1, r4, lr}
 80a0fee:	460b      	mov	r3, r1
 80a0ff0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0ff2:	c803      	ldmia	r0, {r0, r1}
 80a0ff4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0ff8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0ffc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1000:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1004:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1008:	b002      	add	sp, #8
 80a100a:	bd10      	pop	{r4, pc}

080a100c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a100c:	4803      	ldr	r0, [pc, #12]	; (80a101c <_GLOBAL__sub_I_RGB+0x10>)
 80a100e:	2300      	movs	r3, #0
 80a1010:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1012:	4a03      	ldr	r2, [pc, #12]	; (80a1020 <_GLOBAL__sub_I_RGB+0x14>)
 80a1014:	4903      	ldr	r1, [pc, #12]	; (80a1024 <_GLOBAL__sub_I_RGB+0x18>)
 80a1016:	f000 bf0b 	b.w	80a1e30 <__aeabi_atexit>
 80a101a:	bf00      	nop
 80a101c:	200000a4 	.word	0x200000a4
 80a1020:	20000068 	.word	0x20000068
 80a1024:	080a0fe1 	.word	0x080a0fe1

080a1028 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1028:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a102a:	4b14      	ldr	r3, [pc, #80]	; (80a107c <serialEventRun+0x54>)
 80a102c:	b133      	cbz	r3, 80a103c <serialEventRun+0x14>
 80a102e:	f000 fc2b 	bl	80a1888 <_Z16_fetch_usbserialv>
 80a1032:	6803      	ldr	r3, [r0, #0]
 80a1034:	691b      	ldr	r3, [r3, #16]
 80a1036:	4798      	blx	r3
 80a1038:	2800      	cmp	r0, #0
 80a103a:	dc16      	bgt.n	80a106a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a103c:	4b10      	ldr	r3, [pc, #64]	; (80a1080 <serialEventRun+0x58>)
 80a103e:	b133      	cbz	r3, 80a104e <serialEventRun+0x26>
 80a1040:	f000 fce4 	bl	80a1a0c <_Z22__fetch_global_Serial1v>
 80a1044:	6803      	ldr	r3, [r0, #0]
 80a1046:	691b      	ldr	r3, [r3, #16]
 80a1048:	4798      	blx	r3
 80a104a:	2800      	cmp	r0, #0
 80a104c:	dc10      	bgt.n	80a1070 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a104e:	4b0d      	ldr	r3, [pc, #52]	; (80a1084 <serialEventRun+0x5c>)
 80a1050:	b10b      	cbz	r3, 80a1056 <serialEventRun+0x2e>
 80a1052:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1056:	4b0c      	ldr	r3, [pc, #48]	; (80a1088 <serialEventRun+0x60>)
 80a1058:	b17b      	cbz	r3, 80a107a <serialEventRun+0x52>
 80a105a:	f000 fc51 	bl	80a1900 <_Z17_fetch_usbserial1v>
 80a105e:	6803      	ldr	r3, [r0, #0]
 80a1060:	691b      	ldr	r3, [r3, #16]
 80a1062:	4798      	blx	r3
 80a1064:	2800      	cmp	r0, #0
 80a1066:	dc06      	bgt.n	80a1076 <serialEventRun+0x4e>
 80a1068:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a106a:	f3af 8000 	nop.w
 80a106e:	e7e5      	b.n	80a103c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1070:	f3af 8000 	nop.w
 80a1074:	e7eb      	b.n	80a104e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1076:	f3af 8000 	nop.w
 80a107a:	bd08      	pop	{r3, pc}
	...

080a108c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a108c:	b508      	push	{r3, lr}
	serialEventRun();
 80a108e:	f7ff ffcb 	bl	80a1028 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1092:	f7ff fbdf 	bl	80a0854 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1096:	4b01      	ldr	r3, [pc, #4]	; (80a109c <_post_loop+0x10>)
 80a1098:	6018      	str	r0, [r3, #0]
 80a109a:	bd08      	pop	{r3, pc}
 80a109c:	20000548 	.word	0x20000548

080a10a0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a10a0:	4802      	ldr	r0, [pc, #8]	; (80a10ac <_Z33system_initialize_user_backup_ramv+0xc>)
 80a10a2:	4a03      	ldr	r2, [pc, #12]	; (80a10b0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a10a4:	4903      	ldr	r1, [pc, #12]	; (80a10b4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a10a6:	1a12      	subs	r2, r2, r0
 80a10a8:	f001 bfa6 	b.w	80a2ff8 <memcpy>
 80a10ac:	40024000 	.word	0x40024000
 80a10b0:	40024004 	.word	0x40024004
 80a10b4:	080a3440 	.word	0x080a3440

080a10b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a10b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a10ba:	2300      	movs	r3, #0
 80a10bc:	9300      	str	r3, [sp, #0]
 80a10be:	461a      	mov	r2, r3
 80a10c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a10c4:	f7ff fce2 	bl	80a0a8c <system_ctrl_set_result>
}
 80a10c8:	b003      	add	sp, #12
 80a10ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a10d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a10d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a10d2:	8843      	ldrh	r3, [r0, #2]
 80a10d4:	2b0a      	cmp	r3, #10
 80a10d6:	d008      	beq.n	80a10ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a10d8:	2b50      	cmp	r3, #80	; 0x50
 80a10da:	d109      	bne.n	80a10f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a10dc:	4b09      	ldr	r3, [pc, #36]	; (80a1104 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a10de:	681b      	ldr	r3, [r3, #0]
 80a10e0:	b13b      	cbz	r3, 80a10f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a10e2:	b003      	add	sp, #12
 80a10e4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a10e8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a10ea:	f7ff ffe5 	bl	80a10b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a10ee:	e006      	b.n	80a10fe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a10f0:	2300      	movs	r3, #0
 80a10f2:	9300      	str	r3, [sp, #0]
 80a10f4:	461a      	mov	r2, r3
 80a10f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a10fa:	f7ff fcc7 	bl	80a0a8c <system_ctrl_set_result>
        break;
    }
}
 80a10fe:	b003      	add	sp, #12
 80a1100:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1104:	200000b4 	.word	0x200000b4

080a1108 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1108:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a110a:	4c10      	ldr	r4, [pc, #64]	; (80a114c <module_user_init_hook+0x44>)
 80a110c:	4d10      	ldr	r5, [pc, #64]	; (80a1150 <module_user_init_hook+0x48>)
 80a110e:	6823      	ldr	r3, [r4, #0]
 80a1110:	42ab      	cmp	r3, r5
 80a1112:	4b10      	ldr	r3, [pc, #64]	; (80a1154 <module_user_init_hook+0x4c>)
 80a1114:	bf0c      	ite	eq
 80a1116:	2201      	moveq	r2, #1
 80a1118:	2200      	movne	r2, #0
 80a111a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a111c:	d002      	beq.n	80a1124 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a111e:	f7ff ffbf 	bl	80a10a0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1122:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1124:	f7ff fb86 	bl	80a0834 <HAL_RNG_GetRandomNumber>
 80a1128:	4604      	mov	r4, r0
    srand(seed);
 80a112a:	f001 ff79 	bl	80a3020 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a112e:	4b0a      	ldr	r3, [pc, #40]	; (80a1158 <module_user_init_hook+0x50>)
 80a1130:	b113      	cbz	r3, 80a1138 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1132:	4620      	mov	r0, r4
 80a1134:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1138:	2100      	movs	r1, #0
 80a113a:	4807      	ldr	r0, [pc, #28]	; (80a1158 <module_user_init_hook+0x50>)
 80a113c:	f7ff fd10 	bl	80a0b60 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1144:	2100      	movs	r1, #0
 80a1146:	4805      	ldr	r0, [pc, #20]	; (80a115c <module_user_init_hook+0x54>)
 80a1148:	f7ff bc96 	b.w	80a0a78 <system_ctrl_set_app_request_handler>
 80a114c:	40024000 	.word	0x40024000
 80a1150:	9a271c1e 	.word	0x9a271c1e
 80a1154:	200000b8 	.word	0x200000b8
 80a1158:	00000000 	.word	0x00000000
 80a115c:	080a10d1 	.word	0x080a10d1

080a1160 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1160:	4770      	bx	lr

080a1162 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1162:	2000      	movs	r0, #0
 80a1164:	4770      	bx	lr

080a1166 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1166:	b510      	push	{r4, lr}
 80a1168:	4604      	mov	r4, r0
 80a116a:	2110      	movs	r1, #16
 80a116c:	f000 fe65 	bl	80a1e3a <_ZdlPvj>
 80a1170:	4620      	mov	r0, r4
 80a1172:	bd10      	pop	{r4, pc}

080a1174 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1174:	b508      	push	{r3, lr}
      { delete this; }
 80a1176:	b108      	cbz	r0, 80a117c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1178:	f7ff fff5 	bl	80a1166 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a117c:	bd08      	pop	{r3, pc}

080a117e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a117e:	2200      	movs	r2, #0
 80a1180:	6002      	str	r2, [r0, #0]
 80a1182:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a1186:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1188:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a118a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a118e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1190:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1192:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1194:	680c      	ldr	r4, [r1, #0]
 80a1196:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1198:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a119a:	bd10      	pop	{r4, pc}

080a119c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a119c:	b510      	push	{r4, lr}
 80a119e:	4604      	mov	r4, r0
    free((void*)msg_);
 80a11a0:	6800      	ldr	r0, [r0, #0]
 80a11a2:	f7ff fced 	bl	80a0b80 <free>
}
 80a11a6:	4620      	mov	r0, r4
 80a11a8:	bd10      	pop	{r4, pc}

080a11aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a11aa:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a11ac:	68c4      	ldr	r4, [r0, #12]
 80a11ae:	b1f4      	cbz	r4, 80a11ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a11b0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a11b2:	2b02      	cmp	r3, #2
 80a11b4:	d103      	bne.n	80a11be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a11b6:	f104 000c 	add.w	r0, r4, #12
 80a11ba:	f7ff ffef 	bl	80a119c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a11be:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a11c0:	b135      	cbz	r5, 80a11d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a11c2:	4628      	mov	r0, r5
 80a11c4:	f7ff ff03 	bl	80a0fce <_ZNSt14_Function_baseD1Ev>
 80a11c8:	2110      	movs	r1, #16
 80a11ca:	4628      	mov	r0, r5
 80a11cc:	f000 fe35 	bl	80a1e3a <_ZdlPvj>
 80a11d0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a11d2:	b135      	cbz	r5, 80a11e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a11d4:	4628      	mov	r0, r5
 80a11d6:	f7ff fefa 	bl	80a0fce <_ZNSt14_Function_baseD1Ev>
 80a11da:	2110      	movs	r1, #16
 80a11dc:	4628      	mov	r0, r5
 80a11de:	f000 fe2c 	bl	80a1e3a <_ZdlPvj>
 80a11e2:	4620      	mov	r0, r4
 80a11e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a11e8:	2114      	movs	r1, #20
 80a11ea:	f000 be26 	b.w	80a1e3a <_ZdlPvj>
 80a11ee:	bd38      	pop	{r3, r4, r5, pc}

080a11f0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a11f0:	b513      	push	{r0, r1, r4, lr}
 80a11f2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a11f4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a11f8:	2300      	movs	r3, #0
 80a11fa:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a11fc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a11fe:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1200:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1202:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1204:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1206:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1208:	f7ff f822 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a120c:	4620      	mov	r0, r4
 80a120e:	b002      	add	sp, #8
 80a1210:	bd10      	pop	{r4, pc}

080a1212 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1214:	460c      	mov	r4, r1
 80a1216:	4606      	mov	r6, r0
 80a1218:	460f      	mov	r7, r1
 80a121a:	f854 3b04 	ldr.w	r3, [r4], #4
 80a121e:	ad02      	add	r5, sp, #8
 80a1220:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1224:	4621      	mov	r1, r4
 80a1226:	a801      	add	r0, sp, #4
 80a1228:	f7ff feb5 	bl	80a0f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a122c:	4629      	mov	r1, r5
 80a122e:	4630      	mov	r0, r6
 80a1230:	f7ff ffde 	bl	80a11f0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1234:	a801      	add	r0, sp, #4
 80a1236:	f7ff f80b 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a123a:	4620      	mov	r0, r4
 80a123c:	f7ff f808 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1240:	4638      	mov	r0, r7
 80a1242:	2108      	movs	r1, #8
 80a1244:	f000 fdf9 	bl	80a1e3a <_ZdlPvj>
        return p;
    }
 80a1248:	4630      	mov	r0, r6
 80a124a:	b003      	add	sp, #12
 80a124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a1250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1250:	b538      	push	{r3, r4, r5, lr}
 80a1252:	2300      	movs	r3, #0
 80a1254:	4604      	mov	r4, r0
 80a1256:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1258:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a125a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a125c:	f7fe ff1d 	bl	80a009a <_Znwj>
 80a1260:	b128      	cbz	r0, 80a126e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1262:	2301      	movs	r3, #1
 80a1264:	6043      	str	r3, [r0, #4]
 80a1266:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a1268:	4b02      	ldr	r3, [pc, #8]	; (80a1274 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a126a:	60c5      	str	r5, [r0, #12]
 80a126c:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a126e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a1270:	4620      	mov	r0, r4
 80a1272:	bd38      	pop	{r3, r4, r5, pc}
 80a1274:	080a3280 	.word	0x080a3280

080a1278 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1278:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a127a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a127c:	b90a      	cbnz	r2, 80a1282 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a127e:	f000 fdde 	bl	80a1e3e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1282:	68c3      	ldr	r3, [r0, #12]
    }
 80a1284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1288:	4718      	bx	r3

080a128a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a128a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a128c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a128e:	f100 0110 	add.w	r1, r0, #16
 80a1292:	f7ff fff1 	bl	80a1278 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1296:	bd08      	pop	{r3, pc}

080a1298 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1298:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a129a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a129c:	b90a      	cbnz	r2, 80a12a2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a129e:	f000 fdce 	bl	80a1e3e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a12a2:	68c3      	ldr	r3, [r0, #12]
    }
 80a12a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a12a8:	4718      	bx	r3

080a12aa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a12aa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a12ac:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a12ae:	f100 0110 	add.w	r1, r0, #16
 80a12b2:	f7ff fff1 	bl	80a1298 <_ZNKSt8functionIFvRKbEEclES1_>
 80a12b6:	bd08      	pop	{r3, pc}

080a12b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a12b8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a12ba:	2300      	movs	r3, #0
 80a12bc:	6083      	str	r3, [r0, #8]
 80a12be:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a12c0:	4604      	mov	r4, r0
 80a12c2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a12c4:	b12b      	cbz	r3, 80a12d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a12c6:	2202      	movs	r2, #2
 80a12c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a12ca:	68eb      	ldr	r3, [r5, #12]
 80a12cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a12ce:	68ab      	ldr	r3, [r5, #8]
 80a12d0:	60a3      	str	r3, [r4, #8]
	}
    }
 80a12d2:	4620      	mov	r0, r4
 80a12d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a12d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a12d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a12da:	b089      	sub	sp, #36	; 0x24
 80a12dc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a12de:	4668      	mov	r0, sp
 80a12e0:	f7ff ff4d 	bl	80a117e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a12e4:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a12e8:	2300      	movs	r3, #0
 80a12ea:	f88d 3008 	strb.w	r3, [sp, #8]
 80a12ee:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a12f2:	2b00      	cmp	r3, #0
 80a12f4:	d103      	bne.n	80a12fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a12f6:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a12fa:	2900      	cmp	r1, #0
 80a12fc:	d1f7      	bne.n	80a12ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a12fe:	d002      	beq.n	80a1306 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a1300:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1304:	e063      	b.n	80a13ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1306:	f114 050c 	adds.w	r5, r4, #12
 80a130a:	d003      	beq.n	80a1314 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a130c:	4669      	mov	r1, sp
 80a130e:	4628      	mov	r0, r5
 80a1310:	f7ff ff35 	bl	80a117e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1314:	f3bf 8f5f 	dmb	sy
 80a1318:	2301      	movs	r3, #1
 80a131a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a131c:	f3bf 8f5f 	dmb	sy
 80a1320:	f104 0308 	add.w	r3, r4, #8
 80a1324:	2000      	movs	r0, #0
 80a1326:	e853 6f00 	ldrex	r6, [r3]
 80a132a:	e843 0200 	strex	r2, r0, [r3]
 80a132e:	2a00      	cmp	r2, #0
 80a1330:	d1f9      	bne.n	80a1326 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a1332:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1336:	2e00      	cmp	r6, #0
 80a1338:	d049      	beq.n	80a13ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a133a:	f7ff fb8d 	bl	80a0a58 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a133e:	b120      	cbz	r0, 80a134a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1340:	4629      	mov	r1, r5
 80a1342:	4630      	mov	r0, r6
 80a1344:	f7ff ff98 	bl	80a1278 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1348:	e03a      	b.n	80a13c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a134a:	4631      	mov	r1, r6
 80a134c:	a802      	add	r0, sp, #8
 80a134e:	f7ff ffb3 	bl	80a12b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1352:	68e0      	ldr	r0, [r4, #12]
 80a1354:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1358:	b108      	cbz	r0, 80a135e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a135a:	f001 fe89 	bl	80a3070 <strdup>
 80a135e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1360:	2010      	movs	r0, #16
 80a1362:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a1366:	f7fe fe98 	bl	80a009a <_Znwj>
 80a136a:	4605      	mov	r5, r0
 80a136c:	b1e8      	cbz	r0, 80a13aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a136e:	2700      	movs	r7, #0
 80a1370:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1372:	2018      	movs	r0, #24
 80a1374:	f7fe fe91 	bl	80a009a <_Znwj>
 80a1378:	4604      	mov	r4, r0
 80a137a:	b188      	cbz	r0, 80a13a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a137c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a137e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1380:	a802      	add	r0, sp, #8
 80a1382:	f7ff fe33 	bl	80a0fec <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1386:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1388:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a138a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a138c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a138e:	9204      	str	r2, [sp, #16]
 80a1390:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1392:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1394:	60e3      	str	r3, [r4, #12]
 80a1396:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a139a:	9205      	str	r2, [sp, #20]
 80a139c:	f7ff feef 	bl	80a117e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a13a0:	4b0d      	ldr	r3, [pc, #52]	; (80a13d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a13a2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a13a4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a13a6:	4b0d      	ldr	r3, [pc, #52]	; (80a13dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a13a8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a13aa:	a806      	add	r0, sp, #24
 80a13ac:	f7ff fef6 	bl	80a119c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a13b0:	a802      	add	r0, sp, #8
 80a13b2:	f7ff fe0c 	bl	80a0fce <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a13b6:	2200      	movs	r2, #0
 80a13b8:	4629      	mov	r1, r5
 80a13ba:	4809      	ldr	r0, [pc, #36]	; (80a13e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a13bc:	f7ff fb54 	bl	80a0a68 <application_thread_invoke>
 80a13c0:	4630      	mov	r0, r6
 80a13c2:	f7ff fe04 	bl	80a0fce <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a13c6:	2110      	movs	r1, #16
 80a13c8:	4630      	mov	r0, r6
 80a13ca:	f000 fd36 	bl	80a1e3a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a13ce:	4668      	mov	r0, sp
 80a13d0:	f7ff fee4 	bl	80a119c <_ZN8particle5ErrorD1Ev>
    }
 80a13d4:	b009      	add	sp, #36	; 0x24
 80a13d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a13d8:	080a128b 	.word	0x080a128b
 80a13dc:	080a1501 	.word	0x080a1501
 80a13e0:	080a1a59 	.word	0x080a1a59

080a13e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a13e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a13e8:	b08b      	sub	sp, #44	; 0x2c
 80a13ea:	4606      	mov	r6, r0
 80a13ec:	460f      	mov	r7, r1
 80a13ee:	4690      	mov	r8, r2
 80a13f0:	4699      	mov	r9, r3
 80a13f2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a13f6:	f7ff fba3 	bl	80a0b40 <spark_cloud_flag_connected>
 80a13fa:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a13fc:	4683      	mov	fp, r0
 80a13fe:	bb30      	cbnz	r0, 80a144e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1400:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1404:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1406:	a905      	add	r1, sp, #20
 80a1408:	4628      	mov	r0, r5
 80a140a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a140e:	f7ff feb6 	bl	80a117e <_ZN8particle5ErrorC1EOS0_>
 80a1412:	2014      	movs	r0, #20
 80a1414:	f7fe fe41 	bl	80a009a <_Znwj>
 80a1418:	4604      	mov	r4, r0
 80a141a:	b158      	cbz	r0, 80a1434 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a141c:	2302      	movs	r3, #2
 80a141e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1420:	2301      	movs	r3, #1
 80a1422:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1424:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1428:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a142c:	4629      	mov	r1, r5
 80a142e:	300c      	adds	r0, #12
 80a1430:	f7ff fea5 	bl	80a117e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1434:	4630      	mov	r0, r6
 80a1436:	4621      	mov	r1, r4
 80a1438:	f840 4b04 	str.w	r4, [r0], #4
 80a143c:	f7ff ff08 	bl	80a1250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1440:	4628      	mov	r0, r5
 80a1442:	f7ff feab 	bl	80a119c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1446:	a805      	add	r0, sp, #20
 80a1448:	f7ff fea8 	bl	80a119c <_ZN8particle5ErrorD1Ev>
 80a144c:	e052      	b.n	80a14f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a144e:	2400      	movs	r4, #0
 80a1450:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1452:	2014      	movs	r0, #20
 80a1454:	606c      	str	r4, [r5, #4]
 80a1456:	60ac      	str	r4, [r5, #8]
 80a1458:	9307      	str	r3, [sp, #28]
 80a145a:	f7fe fe1e 	bl	80a009a <_Znwj>
 80a145e:	4601      	mov	r1, r0
 80a1460:	b118      	cbz	r0, 80a146a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a1462:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1464:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1466:	6044      	str	r4, [r0, #4]
 80a1468:	6084      	str	r4, [r0, #8]
 80a146a:	a804      	add	r0, sp, #16
 80a146c:	9103      	str	r1, [sp, #12]
 80a146e:	f7ff feef 	bl	80a1250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1472:	4b22      	ldr	r3, [pc, #136]	; (80a14fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1474:	2008      	movs	r0, #8
 80a1476:	9308      	str	r3, [sp, #32]
 80a1478:	f7fe fe0f 	bl	80a009a <_Znwj>
 80a147c:	4604      	mov	r4, r0
 80a147e:	b128      	cbz	r0, 80a148c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1480:	9b03      	ldr	r3, [sp, #12]
 80a1482:	a904      	add	r1, sp, #16
 80a1484:	f840 3b04 	str.w	r3, [r0], #4
 80a1488:	f7ff fd85 	bl	80a0f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a148c:	9500      	str	r5, [sp, #0]
 80a148e:	fa5f f38a 	uxtb.w	r3, sl
 80a1492:	464a      	mov	r2, r9
 80a1494:	4641      	mov	r1, r8
 80a1496:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1498:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a149a:	f7ff fb59 	bl	80a0b50 <spark_send_event>
 80a149e:	b920      	cbnz	r0, 80a14aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a14a0:	9b03      	ldr	r3, [sp, #12]
 80a14a2:	785b      	ldrb	r3, [r3, #1]
 80a14a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a14a8:	b183      	cbz	r3, 80a14cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a14aa:	9b03      	ldr	r3, [sp, #12]
 80a14ac:	a904      	add	r1, sp, #16
 80a14ae:	a806      	add	r0, sp, #24
 80a14b0:	9305      	str	r3, [sp, #20]
 80a14b2:	f7ff fd70 	bl	80a0f96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a14b6:	a905      	add	r1, sp, #20
 80a14b8:	4630      	mov	r0, r6
 80a14ba:	f7ff fe99 	bl	80a11f0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a14be:	a806      	add	r0, sp, #24
 80a14c0:	f7fe fec6 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a14c4:	a804      	add	r0, sp, #16
 80a14c6:	f7fe fec3 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a14ca:	e013      	b.n	80a14f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a14cc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a14d0:	a905      	add	r1, sp, #20
 80a14d2:	a803      	add	r0, sp, #12
 80a14d4:	9205      	str	r2, [sp, #20]
 80a14d6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a14da:	f7ff fefd 	bl	80a12d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a14de:	a805      	add	r0, sp, #20
 80a14e0:	f7ff fe5c 	bl	80a119c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a14e4:	a805      	add	r0, sp, #20
 80a14e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a14e8:	f7ff fe93 	bl	80a1212 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a14ec:	a806      	add	r0, sp, #24
 80a14ee:	f7fe feaf 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a14f2:	e7da      	b.n	80a14aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a14f4:	4630      	mov	r0, r6
 80a14f6:	b00b      	add	sp, #44	; 0x2c
 80a14f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a14fc:	080a1671 	.word	0x080a1671

080a1500 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1500:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1504:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1506:	d006      	beq.n	80a1516 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1508:	2a03      	cmp	r2, #3
 80a150a:	d017      	beq.n	80a153c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a150c:	2a01      	cmp	r2, #1
 80a150e:	d122      	bne.n	80a1556 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1510:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1512:	6003      	str	r3, [r0, #0]
	      break;
 80a1514:	e01f      	b.n	80a1556 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1516:	2018      	movs	r0, #24
 80a1518:	680e      	ldr	r6, [r1, #0]
 80a151a:	f7fe fdbe 	bl	80a009a <_Znwj>
 80a151e:	4605      	mov	r5, r0
 80a1520:	b150      	cbz	r0, 80a1538 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1522:	4631      	mov	r1, r6
 80a1524:	f7ff fec8 	bl	80a12b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1528:	6930      	ldr	r0, [r6, #16]
 80a152a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a152e:	b108      	cbz	r0, 80a1534 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1530:	f001 fd9e 	bl	80a3070 <strdup>
 80a1534:	6128      	str	r0, [r5, #16]
 80a1536:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1538:	6025      	str	r5, [r4, #0]
 80a153a:	e00c      	b.n	80a1556 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a153c:	6804      	ldr	r4, [r0, #0]
 80a153e:	b154      	cbz	r4, 80a1556 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a1540:	f104 0010 	add.w	r0, r4, #16
 80a1544:	f7ff fe2a 	bl	80a119c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1548:	4620      	mov	r0, r4
 80a154a:	f7ff fd40 	bl	80a0fce <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a154e:	2118      	movs	r1, #24
 80a1550:	4620      	mov	r0, r4
 80a1552:	f000 fc72 	bl	80a1e3a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1556:	2000      	movs	r0, #0
 80a1558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a155a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a155a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a155c:	2300      	movs	r3, #0
 80a155e:	6083      	str	r3, [r0, #8]
 80a1560:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1562:	4604      	mov	r4, r0
 80a1564:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1566:	b12b      	cbz	r3, 80a1574 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1568:	2202      	movs	r2, #2
 80a156a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a156c:	68eb      	ldr	r3, [r5, #12]
 80a156e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1570:	68ab      	ldr	r3, [r5, #8]
 80a1572:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1574:	4620      	mov	r0, r4
 80a1576:	bd38      	pop	{r3, r4, r5, pc}

080a1578 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1578:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a157a:	b570      	push	{r4, r5, r6, lr}
 80a157c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a157e:	d006      	beq.n	80a158e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1580:	2a03      	cmp	r2, #3
 80a1582:	d011      	beq.n	80a15a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1584:	2a01      	cmp	r2, #1
 80a1586:	d118      	bne.n	80a15ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1588:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a158a:	6003      	str	r3, [r0, #0]
	      break;
 80a158c:	e015      	b.n	80a15ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a158e:	2014      	movs	r0, #20
 80a1590:	680e      	ldr	r6, [r1, #0]
 80a1592:	f7fe fd82 	bl	80a009a <_Znwj>
 80a1596:	4605      	mov	r5, r0
 80a1598:	b120      	cbz	r0, 80a15a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a159a:	4631      	mov	r1, r6
 80a159c:	f7ff ffdd 	bl	80a155a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a15a0:	7c33      	ldrb	r3, [r6, #16]
 80a15a2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a15a4:	6025      	str	r5, [r4, #0]
 80a15a6:	e008      	b.n	80a15ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a15a8:	6804      	ldr	r4, [r0, #0]
 80a15aa:	b134      	cbz	r4, 80a15ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a15ac:	4620      	mov	r0, r4
 80a15ae:	f7ff fd0e 	bl	80a0fce <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a15b2:	2114      	movs	r1, #20
 80a15b4:	4620      	mov	r0, r4
 80a15b6:	f000 fc40 	bl	80a1e3a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a15ba:	2000      	movs	r0, #0
 80a15bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080a15c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a15c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a15c2:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a15c4:	f3bf 8f5f 	dmb	sy
 80a15c8:	b087      	sub	sp, #28
 80a15ca:	2300      	movs	r3, #0
 80a15cc:	e850 6f00 	ldrex	r6, [r0]
 80a15d0:	e840 3200 	strex	r2, r3, [r0]
 80a15d4:	2a00      	cmp	r2, #0
 80a15d6:	d1f9      	bne.n	80a15cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a15d8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a15dc:	2e00      	cmp	r6, #0
 80a15de:	d03f      	beq.n	80a1660 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a15e0:	4618      	mov	r0, r3
 80a15e2:	f7ff fa39 	bl	80a0a58 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a15e6:	4607      	mov	r7, r0
 80a15e8:	b120      	cbz	r0, 80a15f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a15ea:	4621      	mov	r1, r4
 80a15ec:	4630      	mov	r0, r6
 80a15ee:	f7ff fe53 	bl	80a1298 <_ZNKSt8functionIFvRKbEEclES1_>
 80a15f2:	e02e      	b.n	80a1652 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a15f4:	4631      	mov	r1, r6
 80a15f6:	a801      	add	r0, sp, #4
 80a15f8:	f7ff ffaf 	bl	80a155a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a15fc:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a15fe:	2010      	movs	r0, #16
 80a1600:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1604:	f7fe fd49 	bl	80a009a <_Znwj>
 80a1608:	4605      	mov	r5, r0
 80a160a:	b1d0      	cbz	r0, 80a1642 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a160c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a160e:	2014      	movs	r0, #20
 80a1610:	f7fe fd43 	bl	80a009a <_Znwj>
 80a1614:	4604      	mov	r4, r0
 80a1616:	b178      	cbz	r0, 80a1638 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1618:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a161a:	4601      	mov	r1, r0
 80a161c:	a801      	add	r0, sp, #4
 80a161e:	f7ff fce5 	bl	80a0fec <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1622:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1624:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1626:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1628:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a162a:	9203      	str	r2, [sp, #12]
 80a162c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a162e:	60e3      	str	r3, [r4, #12]
 80a1630:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1634:	9204      	str	r2, [sp, #16]
 80a1636:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1638:	4b0a      	ldr	r3, [pc, #40]	; (80a1664 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a163a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a163c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a163e:	4b0a      	ldr	r3, [pc, #40]	; (80a1668 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1640:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1642:	a801      	add	r0, sp, #4
 80a1644:	f7ff fcc3 	bl	80a0fce <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1648:	2200      	movs	r2, #0
 80a164a:	4629      	mov	r1, r5
 80a164c:	4807      	ldr	r0, [pc, #28]	; (80a166c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a164e:	f7ff fa0b 	bl	80a0a68 <application_thread_invoke>
 80a1652:	4630      	mov	r0, r6
 80a1654:	f7ff fcbb 	bl	80a0fce <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1658:	2110      	movs	r1, #16
 80a165a:	4630      	mov	r0, r6
 80a165c:	f000 fbed 	bl	80a1e3a <_ZdlPvj>
        }
    }
 80a1660:	b007      	add	sp, #28
 80a1662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1664:	080a12ab 	.word	0x080a12ab
 80a1668:	080a1579 	.word	0x080a1579
 80a166c:	080a1a59 	.word	0x080a1a59

080a1670 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1670:	b530      	push	{r4, r5, lr}
 80a1672:	4604      	mov	r4, r0
 80a1674:	b085      	sub	sp, #20
 80a1676:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1678:	4668      	mov	r0, sp
 80a167a:	4611      	mov	r1, r2
 80a167c:	f7ff fdc9 	bl	80a1212 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1680:	b17c      	cbz	r4, 80a16a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1682:	b224      	sxth	r4, r4
 80a1684:	4628      	mov	r0, r5
 80a1686:	b10d      	cbz	r5, 80a168c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1688:	f001 fcf2 	bl	80a3070 <strdup>
 80a168c:	9002      	str	r0, [sp, #8]
 80a168e:	a902      	add	r1, sp, #8
 80a1690:	4668      	mov	r0, sp
 80a1692:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1696:	f7ff fe1f 	bl	80a12d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a169a:	a802      	add	r0, sp, #8
 80a169c:	f7ff fd7e 	bl	80a119c <_ZN8particle5ErrorD1Ev>
 80a16a0:	e01d      	b.n	80a16de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a16a2:	f04f 0201 	mov.w	r2, #1
 80a16a6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a16a8:	f88d 4008 	strb.w	r4, [sp, #8]
 80a16ac:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a16b0:	42a3      	cmp	r3, r4
 80a16b2:	d103      	bne.n	80a16bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a16b4:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a16b8:	2900      	cmp	r1, #0
 80a16ba:	d1f7      	bne.n	80a16ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a16bc:	d002      	beq.n	80a16c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a16be:	f88d 3008 	strb.w	r3, [sp, #8]
 80a16c2:	e00c      	b.n	80a16de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a16c4:	f110 010c 	adds.w	r1, r0, #12
 80a16c8:	f04f 0301 	mov.w	r3, #1
 80a16cc:	bf18      	it	ne
 80a16ce:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a16d0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a16d4:	3004      	adds	r0, #4
 80a16d6:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a16da:	f7ff ff71 	bl	80a15c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a16de:	a801      	add	r0, sp, #4
 80a16e0:	f7fe fdb6 	bl	80a0250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a16e4:	b005      	add	sp, #20
 80a16e6:	bd30      	pop	{r4, r5, pc}

080a16e8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a16e8:	4770      	bx	lr

080a16ea <_ZN9IPAddressD0Ev>:
 80a16ea:	b510      	push	{r4, lr}
 80a16ec:	4604      	mov	r4, r0
 80a16ee:	2118      	movs	r1, #24
 80a16f0:	f000 fba3 	bl	80a1e3a <_ZdlPvj>
 80a16f4:	4620      	mov	r0, r4
 80a16f6:	bd10      	pop	{r4, pc}

080a16f8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a16f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a16fa:	460f      	mov	r7, r1
 80a16fc:	f100 0608 	add.w	r6, r0, #8
 80a1700:	1d05      	adds	r5, r0, #4
 80a1702:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1704:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1708:	220a      	movs	r2, #10
 80a170a:	4638      	mov	r0, r7
 80a170c:	f7ff fb65 	bl	80a0dda <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1710:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1712:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1714:	d007      	beq.n	80a1726 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1716:	2c00      	cmp	r4, #0
 80a1718:	d0f4      	beq.n	80a1704 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a171a:	212e      	movs	r1, #46	; 0x2e
 80a171c:	4638      	mov	r0, r7
 80a171e:	f7ff fb2f 	bl	80a0d80 <_ZN5Print5printEc>
 80a1722:	4404      	add	r4, r0
 80a1724:	e7ee      	b.n	80a1704 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1726:	4620      	mov	r0, r4
 80a1728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a172c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a172c:	b510      	push	{r4, lr}
 80a172e:	4604      	mov	r4, r0
 80a1730:	4b04      	ldr	r3, [pc, #16]	; (80a1744 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1732:	2211      	movs	r2, #17
 80a1734:	f840 3b04 	str.w	r3, [r0], #4
 80a1738:	2100      	movs	r1, #0
 80a173a:	f001 fc68 	bl	80a300e <memset>
{
    clear();
}
 80a173e:	4620      	mov	r0, r4
 80a1740:	bd10      	pop	{r4, pc}
 80a1742:	bf00      	nop
 80a1744:	080a329c 	.word	0x080a329c

080a1748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1748:	4603      	mov	r3, r0
 80a174a:	4a07      	ldr	r2, [pc, #28]	; (80a1768 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a174c:	b510      	push	{r4, lr}
 80a174e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1752:	f101 0210 	add.w	r2, r1, #16
 80a1756:	f851 4b04 	ldr.w	r4, [r1], #4
 80a175a:	4291      	cmp	r1, r2
 80a175c:	f843 4b04 	str.w	r4, [r3], #4
 80a1760:	d1f9      	bne.n	80a1756 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1762:	780a      	ldrb	r2, [r1, #0]
 80a1764:	701a      	strb	r2, [r3, #0]
}
 80a1766:	bd10      	pop	{r4, pc}
 80a1768:	080a329c 	.word	0x080a329c

080a176c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a176c:	4a02      	ldr	r2, [pc, #8]	; (80a1778 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a176e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1770:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1772:	2204      	movs	r2, #4
 80a1774:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1776:	4770      	bx	lr
 80a1778:	080a329c 	.word	0x080a329c

080a177c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a177c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a177e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1782:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1786:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a178a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a178e:	2304      	movs	r3, #4
 80a1790:	6041      	str	r1, [r0, #4]
 80a1792:	7503      	strb	r3, [r0, #20]
 80a1794:	bd10      	pop	{r4, pc}
	...

080a1798 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a179a:	4d04      	ldr	r5, [pc, #16]	; (80a17ac <_ZN9IPAddressC1Ehhhh+0x14>)
 80a179c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a179e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a17a2:	9500      	str	r5, [sp, #0]
 80a17a4:	f7ff ffea 	bl	80a177c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a17a8:	b003      	add	sp, #12
 80a17aa:	bd30      	pop	{r4, r5, pc}
 80a17ac:	080a329c 	.word	0x080a329c

080a17b0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a17b0:	7441      	strb	r1, [r0, #17]
 80a17b2:	4770      	bx	lr

080a17b4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a17b4:	4770      	bx	lr

080a17b6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a17b6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a17b8:	2100      	movs	r1, #0
 80a17ba:	7c00      	ldrb	r0, [r0, #16]
 80a17bc:	f7ff f914 	bl	80a09e8 <HAL_USB_USART_Receive_Data>
}
 80a17c0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a17c4:	bf28      	it	cs
 80a17c6:	f04f 30ff 	movcs.w	r0, #4294967295
 80a17ca:	bd08      	pop	{r3, pc}

080a17cc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a17cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a17ce:	2101      	movs	r1, #1
 80a17d0:	7c00      	ldrb	r0, [r0, #16]
 80a17d2:	f7ff f909 	bl	80a09e8 <HAL_USB_USART_Receive_Data>
}
 80a17d6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a17da:	bf28      	it	cs
 80a17dc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a17e0:	bd08      	pop	{r3, pc}

080a17e2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a17e2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a17e4:	7c00      	ldrb	r0, [r0, #16]
 80a17e6:	f7ff f8f7 	bl	80a09d8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a17ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a17ee:	bd08      	pop	{r3, pc}

080a17f0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a17f0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a17f2:	7c00      	ldrb	r0, [r0, #16]
 80a17f4:	f7ff f8e8 	bl	80a09c8 <HAL_USB_USART_Available_Data>
}
 80a17f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a17fc:	bd08      	pop	{r3, pc}

080a17fe <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a17fe:	7c00      	ldrb	r0, [r0, #16]
 80a1800:	f7ff b902 	b.w	80a0a08 <HAL_USB_USART_Flush_Data>

080a1804 <_ZN9USBSerialD0Ev>:
 80a1804:	b510      	push	{r4, lr}
 80a1806:	4604      	mov	r4, r0
 80a1808:	2114      	movs	r1, #20
 80a180a:	f000 fb16 	bl	80a1e3a <_ZdlPvj>
 80a180e:	4620      	mov	r0, r4
 80a1810:	bd10      	pop	{r4, pc}

080a1812 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1812:	b538      	push	{r3, r4, r5, lr}
 80a1814:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1816:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1818:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a181a:	f7ff f8dd 	bl	80a09d8 <HAL_USB_USART_Available_Data_For_Write>
 80a181e:	2800      	cmp	r0, #0
 80a1820:	dc01      	bgt.n	80a1826 <_ZN9USBSerial5writeEh+0x14>
 80a1822:	7c60      	ldrb	r0, [r4, #17]
 80a1824:	b128      	cbz	r0, 80a1832 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1826:	4629      	mov	r1, r5
 80a1828:	7c20      	ldrb	r0, [r4, #16]
 80a182a:	f7ff f8e5 	bl	80a09f8 <HAL_USB_USART_Send_Data>
 80a182e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1832:	bd38      	pop	{r3, r4, r5, pc}

080a1834 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1834:	b510      	push	{r4, lr}
 80a1836:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1838:	2300      	movs	r3, #0
 80a183a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a183c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1840:	60a3      	str	r3, [r4, #8]
 80a1842:	4b05      	ldr	r3, [pc, #20]	; (80a1858 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1844:	4608      	mov	r0, r1
 80a1846:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1848:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a184a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a184c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a184e:	4611      	mov	r1, r2
 80a1850:	f7ff f8b2 	bl	80a09b8 <HAL_USB_USART_Init>
}
 80a1854:	4620      	mov	r0, r4
 80a1856:	bd10      	pop	{r4, pc}
 80a1858:	080a32b0 	.word	0x080a32b0

080a185c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a185c:	b510      	push	{r4, lr}
 80a185e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1860:	2214      	movs	r2, #20
 80a1862:	2100      	movs	r1, #0
 80a1864:	f001 fbd3 	bl	80a300e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1868:	4b05      	ldr	r3, [pc, #20]	; (80a1880 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a186a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a186c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a186e:	4b05      	ldr	r3, [pc, #20]	; (80a1884 <_Z19acquireSerialBufferv+0x28>)
 80a1870:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1872:	f240 1301 	movw	r3, #257	; 0x101
 80a1876:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1878:	2381      	movs	r3, #129	; 0x81
 80a187a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a187c:	bd10      	pop	{r4, pc}
 80a187e:	bf00      	nop
 80a1880:	20000141 	.word	0x20000141
 80a1884:	200000c0 	.word	0x200000c0

080a1888 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1888:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a188a:	4d0e      	ldr	r5, [pc, #56]	; (80a18c4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a188c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a188e:	a801      	add	r0, sp, #4
 80a1890:	f7ff ffe4 	bl	80a185c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1894:	6829      	ldr	r1, [r5, #0]
 80a1896:	f011 0401 	ands.w	r4, r1, #1
 80a189a:	d110      	bne.n	80a18be <_Z16_fetch_usbserialv+0x36>
 80a189c:	4628      	mov	r0, r5
 80a189e:	f7fe fc00 	bl	80a00a2 <__cxa_guard_acquire>
 80a18a2:	b160      	cbz	r0, 80a18be <_Z16_fetch_usbserialv+0x36>
 80a18a4:	aa01      	add	r2, sp, #4
 80a18a6:	4621      	mov	r1, r4
 80a18a8:	4807      	ldr	r0, [pc, #28]	; (80a18c8 <_Z16_fetch_usbserialv+0x40>)
 80a18aa:	f7ff ffc3 	bl	80a1834 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a18ae:	4628      	mov	r0, r5
 80a18b0:	f7fe fbfc 	bl	80a00ac <__cxa_guard_release>
 80a18b4:	4a05      	ldr	r2, [pc, #20]	; (80a18cc <_Z16_fetch_usbserialv+0x44>)
 80a18b6:	4906      	ldr	r1, [pc, #24]	; (80a18d0 <_Z16_fetch_usbserialv+0x48>)
 80a18b8:	4803      	ldr	r0, [pc, #12]	; (80a18c8 <_Z16_fetch_usbserialv+0x40>)
 80a18ba:	f000 fab9 	bl	80a1e30 <__aeabi_atexit>
	return _usbserial;
}
 80a18be:	4802      	ldr	r0, [pc, #8]	; (80a18c8 <_Z16_fetch_usbserialv+0x40>)
 80a18c0:	b007      	add	sp, #28
 80a18c2:	bd30      	pop	{r4, r5, pc}
 80a18c4:	200000bc 	.word	0x200000bc
 80a18c8:	20000244 	.word	0x20000244
 80a18cc:	20000068 	.word	0x20000068
 80a18d0:	080a17b5 	.word	0x080a17b5

080a18d4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a18d4:	b510      	push	{r4, lr}
 80a18d6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a18d8:	2214      	movs	r2, #20
 80a18da:	2100      	movs	r1, #0
 80a18dc:	f001 fb97 	bl	80a300e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a18e0:	4b05      	ldr	r3, [pc, #20]	; (80a18f8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a18e2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a18e4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a18e6:	4b05      	ldr	r3, [pc, #20]	; (80a18fc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a18e8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a18ea:	f240 1301 	movw	r3, #257	; 0x101
 80a18ee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a18f0:	2381      	movs	r3, #129	; 0x81
 80a18f2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a18f4:	bd10      	pop	{r4, pc}
 80a18f6:	bf00      	nop
 80a18f8:	200002f4 	.word	0x200002f4
 80a18fc:	2000025c 	.word	0x2000025c

080a1900 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1900:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1902:	4c0e      	ldr	r4, [pc, #56]	; (80a193c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1904:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1906:	a801      	add	r0, sp, #4
 80a1908:	f7ff ffe4 	bl	80a18d4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a190c:	6823      	ldr	r3, [r4, #0]
 80a190e:	07db      	lsls	r3, r3, #31
 80a1910:	d410      	bmi.n	80a1934 <_Z17_fetch_usbserial1v+0x34>
 80a1912:	4620      	mov	r0, r4
 80a1914:	f7fe fbc5 	bl	80a00a2 <__cxa_guard_acquire>
 80a1918:	b160      	cbz	r0, 80a1934 <_Z17_fetch_usbserial1v+0x34>
 80a191a:	aa01      	add	r2, sp, #4
 80a191c:	2101      	movs	r1, #1
 80a191e:	4808      	ldr	r0, [pc, #32]	; (80a1940 <_Z17_fetch_usbserial1v+0x40>)
 80a1920:	f7ff ff88 	bl	80a1834 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1924:	4620      	mov	r0, r4
 80a1926:	f7fe fbc1 	bl	80a00ac <__cxa_guard_release>
 80a192a:	4a06      	ldr	r2, [pc, #24]	; (80a1944 <_Z17_fetch_usbserial1v+0x44>)
 80a192c:	4906      	ldr	r1, [pc, #24]	; (80a1948 <_Z17_fetch_usbserial1v+0x48>)
 80a192e:	4804      	ldr	r0, [pc, #16]	; (80a1940 <_Z17_fetch_usbserial1v+0x40>)
 80a1930:	f000 fa7e 	bl	80a1e30 <__aeabi_atexit>
  return _usbserial1;
}
 80a1934:	4802      	ldr	r0, [pc, #8]	; (80a1940 <_Z17_fetch_usbserial1v+0x40>)
 80a1936:	b006      	add	sp, #24
 80a1938:	bd10      	pop	{r4, pc}
 80a193a:	bf00      	nop
 80a193c:	20000258 	.word	0x20000258
 80a1940:	200002e0 	.word	0x200002e0
 80a1944:	20000068 	.word	0x20000068
 80a1948:	080a17b5 	.word	0x080a17b5

080a194c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a194c:	f7fe bf5a 	b.w	80a0804 <HAL_Interrupts_Disable_All>

080a1950 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a1950:	f7fe bf50 	b.w	80a07f4 <HAL_Interrupts_Enable_All>

080a1954 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1954:	4770      	bx	lr

080a1956 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1956:	7441      	strb	r1, [r0, #17]
 80a1958:	4770      	bx	lr

080a195a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a195a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a195c:	7c00      	ldrb	r0, [r0, #16]
 80a195e:	f7fe ffc1 	bl	80a08e4 <HAL_USART_Available_Data_For_Write>
}
 80a1962:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1966:	bd08      	pop	{r3, pc}

080a1968 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1968:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a196a:	7c00      	ldrb	r0, [r0, #16]
 80a196c:	f7fe ff92 	bl	80a0894 <HAL_USART_Available_Data>
}
 80a1970:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1974:	bd08      	pop	{r3, pc}

080a1976 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1976:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1978:	7c00      	ldrb	r0, [r0, #16]
 80a197a:	f7fe ff9b 	bl	80a08b4 <HAL_USART_Peek_Data>
}
 80a197e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1982:	bf28      	it	cs
 80a1984:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1988:	bd08      	pop	{r3, pc}

080a198a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a198a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a198c:	7c00      	ldrb	r0, [r0, #16]
 80a198e:	f7fe ff89 	bl	80a08a4 <HAL_USART_Read_Data>
}
 80a1992:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1996:	bf28      	it	cs
 80a1998:	f04f 30ff 	movcs.w	r0, #4294967295
 80a199c:	bd08      	pop	{r3, pc}

080a199e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a199e:	7c00      	ldrb	r0, [r0, #16]
 80a19a0:	f7fe bf90 	b.w	80a08c4 <HAL_USART_Flush_Data>

080a19a4 <_ZN11USARTSerialD0Ev>:
 80a19a4:	b510      	push	{r4, lr}
 80a19a6:	4604      	mov	r4, r0
 80a19a8:	2114      	movs	r1, #20
 80a19aa:	f000 fa46 	bl	80a1e3a <_ZdlPvj>
 80a19ae:	4620      	mov	r0, r4
 80a19b0:	bd10      	pop	{r4, pc}

080a19b2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a19b2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a19b4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a19b6:	4604      	mov	r4, r0
 80a19b8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a19ba:	b925      	cbnz	r5, 80a19c6 <_ZN11USARTSerial5writeEh+0x14>
 80a19bc:	7c00      	ldrb	r0, [r0, #16]
 80a19be:	f7fe ff91 	bl	80a08e4 <HAL_USART_Available_Data_For_Write>
 80a19c2:	2800      	cmp	r0, #0
 80a19c4:	dd05      	ble.n	80a19d2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a19c6:	4631      	mov	r1, r6
 80a19c8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a19ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a19ce:	f7fe bf59 	b.w	80a0884 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a19d2:	4628      	mov	r0, r5
 80a19d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a19d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a19d8:	b510      	push	{r4, lr}
 80a19da:	4604      	mov	r4, r0
 80a19dc:	4608      	mov	r0, r1
 80a19de:	4611      	mov	r1, r2
 80a19e0:	2200      	movs	r2, #0
 80a19e2:	6062      	str	r2, [r4, #4]
 80a19e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a19e8:	60a2      	str	r2, [r4, #8]
 80a19ea:	4a05      	ldr	r2, [pc, #20]	; (80a1a00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a19ec:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a19ee:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a19f0:	2201      	movs	r2, #1
 80a19f2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a19f4:	461a      	mov	r2, r3
 80a19f6:	f7fe ff3d 	bl	80a0874 <HAL_USART_Init>
}
 80a19fa:	4620      	mov	r0, r4
 80a19fc:	bd10      	pop	{r4, pc}
 80a19fe:	bf00      	nop
 80a1a00:	080a32e0 	.word	0x080a32e0

080a1a04 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1a04:	7c00      	ldrb	r0, [r0, #16]
 80a1a06:	f7fe bf65 	b.w	80a08d4 <HAL_USART_Is_Enabled>
	...

080a1a0c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1a0c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1a0e:	4d0c      	ldr	r5, [pc, #48]	; (80a1a40 <_Z22__fetch_global_Serial1v+0x34>)
 80a1a10:	6829      	ldr	r1, [r5, #0]
 80a1a12:	f011 0401 	ands.w	r4, r1, #1
 80a1a16:	d111      	bne.n	80a1a3c <_Z22__fetch_global_Serial1v+0x30>
 80a1a18:	4628      	mov	r0, r5
 80a1a1a:	f7fe fb42 	bl	80a00a2 <__cxa_guard_acquire>
 80a1a1e:	b168      	cbz	r0, 80a1a3c <_Z22__fetch_global_Serial1v+0x30>
 80a1a20:	4a08      	ldr	r2, [pc, #32]	; (80a1a44 <_Z22__fetch_global_Serial1v+0x38>)
 80a1a22:	4621      	mov	r1, r4
 80a1a24:	4b08      	ldr	r3, [pc, #32]	; (80a1a48 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1a26:	4809      	ldr	r0, [pc, #36]	; (80a1a4c <_Z22__fetch_global_Serial1v+0x40>)
 80a1a28:	f7ff ffd6 	bl	80a19d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1a2c:	4628      	mov	r0, r5
 80a1a2e:	f7fe fb3d 	bl	80a00ac <__cxa_guard_release>
 80a1a32:	4a07      	ldr	r2, [pc, #28]	; (80a1a50 <_Z22__fetch_global_Serial1v+0x44>)
 80a1a34:	4907      	ldr	r1, [pc, #28]	; (80a1a54 <_Z22__fetch_global_Serial1v+0x48>)
 80a1a36:	4805      	ldr	r0, [pc, #20]	; (80a1a4c <_Z22__fetch_global_Serial1v+0x40>)
 80a1a38:	f000 f9fa 	bl	80a1e30 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1a3c:	4803      	ldr	r0, [pc, #12]	; (80a1a4c <_Z22__fetch_global_Serial1v+0x40>)
 80a1a3e:	bd38      	pop	{r3, r4, r5, pc}
 80a1a40:	20000490 	.word	0x20000490
 80a1a44:	20000494 	.word	0x20000494
 80a1a48:	2000040c 	.word	0x2000040c
 80a1a4c:	200003f8 	.word	0x200003f8
 80a1a50:	20000068 	.word	0x20000068
 80a1a54:	080a1955 	.word	0x080a1955

080a1a58 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1a58:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1a5a:	6883      	ldr	r3, [r0, #8]
 80a1a5c:	4604      	mov	r4, r0
 80a1a5e:	b90b      	cbnz	r3, 80a1a64 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1a60:	f000 f9ed 	bl	80a1e3e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1a64:	68c3      	ldr	r3, [r0, #12]
 80a1a66:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1a68:	68a3      	ldr	r3, [r4, #8]
 80a1a6a:	b11b      	cbz	r3, 80a1a74 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1a6c:	2203      	movs	r2, #3
 80a1a6e:	4621      	mov	r1, r4
 80a1a70:	4620      	mov	r0, r4
 80a1a72:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1a74:	4620      	mov	r0, r4
}
 80a1a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1a7a:	2110      	movs	r1, #16
 80a1a7c:	f000 b9dd 	b.w	80a1e3a <_ZdlPvj>

080a1a80 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1a80:	4770      	bx	lr

080a1a82 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a84:	4606      	mov	r6, r0
 80a1a86:	4615      	mov	r5, r2
 80a1a88:	460c      	mov	r4, r1
 80a1a8a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1a8c:	42bc      	cmp	r4, r7
 80a1a8e:	d006      	beq.n	80a1a9e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1a90:	6833      	ldr	r3, [r6, #0]
 80a1a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1a96:	689b      	ldr	r3, [r3, #8]
 80a1a98:	4630      	mov	r0, r6
 80a1a9a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1a9c:	e7f6      	b.n	80a1a8c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1a9e:	4628      	mov	r0, r5
 80a1aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1aa2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1aa2:	2200      	movs	r2, #0
 80a1aa4:	7c00      	ldrb	r0, [r0, #16]
 80a1aa6:	f7fe bf4d 	b.w	80a0944 <HAL_I2C_Write_Data>

080a1aaa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1aaa:	2100      	movs	r1, #0
 80a1aac:	7c00      	ldrb	r0, [r0, #16]
 80a1aae:	f7fe bf51 	b.w	80a0954 <HAL_I2C_Available_Data>

080a1ab2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1ab2:	2100      	movs	r1, #0
 80a1ab4:	7c00      	ldrb	r0, [r0, #16]
 80a1ab6:	f7fe bf55 	b.w	80a0964 <HAL_I2C_Read_Data>

080a1aba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1aba:	2100      	movs	r1, #0
 80a1abc:	7c00      	ldrb	r0, [r0, #16]
 80a1abe:	f7fe bf59 	b.w	80a0974 <HAL_I2C_Peek_Data>

080a1ac2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1ac2:	2100      	movs	r1, #0
 80a1ac4:	7c00      	ldrb	r0, [r0, #16]
 80a1ac6:	f7fe bf5d 	b.w	80a0984 <HAL_I2C_Flush_Data>

080a1aca <_ZN7TwoWireD0Ev>:
 80a1aca:	b510      	push	{r4, lr}
 80a1acc:	4604      	mov	r4, r0
 80a1ace:	2114      	movs	r1, #20
 80a1ad0:	f000 f9b3 	bl	80a1e3a <_ZdlPvj>
 80a1ad4:	4620      	mov	r0, r4
 80a1ad6:	bd10      	pop	{r4, pc}

080a1ad8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1ad8:	b510      	push	{r4, lr}
 80a1ada:	4604      	mov	r4, r0
 80a1adc:	4608      	mov	r0, r1
 80a1ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1ae2:	60a3      	str	r3, [r4, #8]
 80a1ae4:	4b04      	ldr	r3, [pc, #16]	; (80a1af8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a1ae6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1ae8:	7420      	strb	r0, [r4, #16]
 80a1aea:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1aec:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1aee:	f7fe ff59 	bl	80a09a4 <HAL_I2C_Init>

}
 80a1af2:	4620      	mov	r0, r4
 80a1af4:	bd10      	pop	{r4, pc}
 80a1af6:	bf00      	nop
 80a1af8:	080a3310 	.word	0x080a3310

080a1afc <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a1afc:	2200      	movs	r2, #0
 80a1afe:	7c00      	ldrb	r0, [r0, #16]
 80a1b00:	f7fe bef8 	b.w	80a08f4 <HAL_I2C_Set_Speed>

080a1b04 <_ZN7TwoWire12stretchClockEb>:
  HAL_I2C_Enable_DMA_Mode(_i2c, enableDMAMode, NULL);
}

void TwoWire::stretchClock(bool stretch)
{
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
 80a1b04:	2200      	movs	r2, #0
 80a1b06:	7c00      	ldrb	r0, [r0, #16]
 80a1b08:	f7fe befc 	b.w	80a0904 <HAL_I2C_Stretch_Clock>

080a1b0c <_ZN7TwoWire5beginEv>:
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1b0c:	2300      	movs	r3, #0
 80a1b0e:	461a      	mov	r2, r3
 80a1b10:	4619      	mov	r1, r3
 80a1b12:	7c00      	ldrb	r0, [r0, #16]
 80a1b14:	f7fe befe 	b.w	80a0914 <HAL_I2C_Begin>

080a1b18 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1b18:	2200      	movs	r2, #0
 80a1b1a:	7c00      	ldrb	r0, [r0, #16]
 80a1b1c:	f7fe bf02 	b.w	80a0924 <HAL_I2C_Begin_Transmission>

080a1b20 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1b20:	2200      	movs	r2, #0
 80a1b22:	7c00      	ldrb	r0, [r0, #16]
 80a1b24:	f7fe bf06 	b.w	80a0934 <HAL_I2C_End_Transmission>

080a1b28 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1b28:	2101      	movs	r1, #1
 80a1b2a:	f7ff bff9 	b.w	80a1b20 <_ZN7TwoWire15endTransmissionEh>

080a1b2e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1b2e:	2100      	movs	r1, #0
 80a1b30:	7c00      	ldrb	r0, [r0, #16]
 80a1b32:	f7fe bf2f 	b.w	80a0994 <HAL_I2C_Is_Enabled>

080a1b36 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1b36:	2200      	movs	r2, #0
 80a1b38:	4611      	mov	r1, r2
 80a1b3a:	6840      	ldr	r0, [r0, #4]
 80a1b3c:	f7fe bfc8 	b.w	80a0ad0 <network_ready>

080a1b40 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1b42:	4616      	mov	r6, r2
 80a1b44:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1b46:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1b48:	460f      	mov	r7, r1
 80a1b4a:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1b4c:	2100      	movs	r1, #0
 80a1b4e:	a803      	add	r0, sp, #12
 80a1b50:	f001 fa5d 	bl	80a300e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1b54:	4630      	mov	r0, r6
 80a1b56:	f001 faa6 	bl	80a30a6 <strlen>
 80a1b5a:	2500      	movs	r5, #0
 80a1b5c:	9500      	str	r5, [sp, #0]
 80a1b5e:	b281      	uxth	r1, r0
 80a1b60:	687b      	ldr	r3, [r7, #4]
 80a1b62:	aa03      	add	r2, sp, #12
 80a1b64:	4630      	mov	r0, r6
 80a1b66:	f7fe ff57 	bl	80a0a18 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1b6a:	b120      	cbz	r0, 80a1b76 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1b6c:	4629      	mov	r1, r5
 80a1b6e:	4620      	mov	r0, r4
 80a1b70:	f7ff fdfc 	bl	80a176c <_ZN9IPAddressC1Em>
 80a1b74:	e003      	b.n	80a1b7e <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1b76:	a903      	add	r1, sp, #12
 80a1b78:	4620      	mov	r0, r4
 80a1b7a:	f7ff fde5 	bl	80a1748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1b7e:	4620      	mov	r0, r4
 80a1b80:	b009      	add	sp, #36	; 0x24
 80a1b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b84 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1b84:	2200      	movs	r2, #0
 80a1b86:	4611      	mov	r1, r2
 80a1b88:	6840      	ldr	r0, [r0, #4]
 80a1b8a:	f7fe bfc1 	b.w	80a0b10 <network_listening>

080a1b8e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1b8e:	2200      	movs	r2, #0
 80a1b90:	4611      	mov	r1, r2
 80a1b92:	6840      	ldr	r0, [r0, #4]
 80a1b94:	f7fe bfcc 	b.w	80a0b30 <network_get_listen_timeout>

080a1b98 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1b98:	2200      	movs	r2, #0
 80a1b9a:	6840      	ldr	r0, [r0, #4]
 80a1b9c:	f7fe bfc0 	b.w	80a0b20 <network_set_listen_timeout>

080a1ba0 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1ba0:	2200      	movs	r2, #0
 80a1ba2:	f081 0101 	eor.w	r1, r1, #1
 80a1ba6:	6840      	ldr	r0, [r0, #4]
 80a1ba8:	f7fe bfaa 	b.w	80a0b00 <network_listen>

080a1bac <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1bac:	2300      	movs	r3, #0
 80a1bae:	461a      	mov	r2, r3
 80a1bb0:	4619      	mov	r1, r3
 80a1bb2:	6840      	ldr	r0, [r0, #4]
 80a1bb4:	f7fe bf9c 	b.w	80a0af0 <network_off>

080a1bb8 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1bb8:	2200      	movs	r2, #0
 80a1bba:	4611      	mov	r1, r2
 80a1bbc:	6840      	ldr	r0, [r0, #4]
 80a1bbe:	f7fe bf77 	b.w	80a0ab0 <network_connecting>

080a1bc2 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1bc2:	2200      	movs	r2, #0
 80a1bc4:	2102      	movs	r1, #2
 80a1bc6:	6840      	ldr	r0, [r0, #4]
 80a1bc8:	f7fe bf7a 	b.w	80a0ac0 <network_disconnect>

080a1bcc <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1bcc:	2300      	movs	r3, #0
 80a1bce:	461a      	mov	r2, r3
 80a1bd0:	6840      	ldr	r0, [r0, #4]
 80a1bd2:	f7fe bf65 	b.w	80a0aa0 <network_connect>
	...

080a1bd8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1bd8:	4b02      	ldr	r3, [pc, #8]	; (80a1be4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1bda:	2204      	movs	r2, #4
 80a1bdc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1bde:	4a02      	ldr	r2, [pc, #8]	; (80a1be8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1be0:	601a      	str	r2, [r3, #0]
 80a1be2:	4770      	bx	lr
 80a1be4:	20000518 	.word	0x20000518
 80a1be8:	080a3338 	.word	0x080a3338

080a1bec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1bec:	2300      	movs	r3, #0
 80a1bee:	461a      	mov	r2, r3
 80a1bf0:	6840      	ldr	r0, [r0, #4]
 80a1bf2:	f7fe bf55 	b.w	80a0aa0 <network_connect>

080a1bf6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1bf6:	2200      	movs	r2, #0
 80a1bf8:	2102      	movs	r1, #2
 80a1bfa:	6840      	ldr	r0, [r0, #4]
 80a1bfc:	f7fe bf60 	b.w	80a0ac0 <network_disconnect>

080a1c00 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1c00:	2200      	movs	r2, #0
 80a1c02:	4611      	mov	r1, r2
 80a1c04:	6840      	ldr	r0, [r0, #4]
 80a1c06:	f7fe bf53 	b.w	80a0ab0 <network_connecting>

080a1c0a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1c0a:	2200      	movs	r2, #0
 80a1c0c:	4611      	mov	r1, r2
 80a1c0e:	6840      	ldr	r0, [r0, #4]
 80a1c10:	f7fe bf5e 	b.w	80a0ad0 <network_ready>

080a1c14 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1c14:	2300      	movs	r3, #0
 80a1c16:	461a      	mov	r2, r3
 80a1c18:	4619      	mov	r1, r3
 80a1c1a:	6840      	ldr	r0, [r0, #4]
 80a1c1c:	f7fe bf60 	b.w	80a0ae0 <network_on>

080a1c20 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1c20:	2300      	movs	r3, #0
 80a1c22:	461a      	mov	r2, r3
 80a1c24:	4619      	mov	r1, r3
 80a1c26:	6840      	ldr	r0, [r0, #4]
 80a1c28:	f7fe bf62 	b.w	80a0af0 <network_off>

080a1c2c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1c2c:	2200      	movs	r2, #0
 80a1c2e:	f081 0101 	eor.w	r1, r1, #1
 80a1c32:	6840      	ldr	r0, [r0, #4]
 80a1c34:	f7fe bf64 	b.w	80a0b00 <network_listen>

080a1c38 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1c38:	2200      	movs	r2, #0
 80a1c3a:	6840      	ldr	r0, [r0, #4]
 80a1c3c:	f7fe bf70 	b.w	80a0b20 <network_set_listen_timeout>

080a1c40 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1c40:	2200      	movs	r2, #0
 80a1c42:	4611      	mov	r1, r2
 80a1c44:	6840      	ldr	r0, [r0, #4]
 80a1c46:	f7fe bf73 	b.w	80a0b30 <network_get_listen_timeout>

080a1c4a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1c4a:	2200      	movs	r2, #0
 80a1c4c:	4611      	mov	r1, r2
 80a1c4e:	6840      	ldr	r0, [r0, #4]
 80a1c50:	f7fe bf5e 	b.w	80a0b10 <network_listening>

080a1c54 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1c54:	b570      	push	{r4, r5, r6, lr}
 80a1c56:	4616      	mov	r6, r2
 80a1c58:	b08e      	sub	sp, #56	; 0x38
 80a1c5a:	4604      	mov	r4, r0
    IPAddress addr;
 80a1c5c:	a808      	add	r0, sp, #32
 80a1c5e:	f7ff fd65 	bl	80a172c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1c62:	2211      	movs	r2, #17
 80a1c64:	2100      	movs	r1, #0
 80a1c66:	a803      	add	r0, sp, #12
 80a1c68:	f001 f9d1 	bl	80a300e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1c6c:	4630      	mov	r0, r6
 80a1c6e:	f001 fa1a 	bl	80a30a6 <strlen>
 80a1c72:	2500      	movs	r5, #0
 80a1c74:	4b0a      	ldr	r3, [pc, #40]	; (80a1ca0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1c76:	9500      	str	r5, [sp, #0]
 80a1c78:	b281      	uxth	r1, r0
 80a1c7a:	685b      	ldr	r3, [r3, #4]
 80a1c7c:	aa03      	add	r2, sp, #12
 80a1c7e:	4630      	mov	r0, r6
 80a1c80:	f7fe feca 	bl	80a0a18 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1c84:	b120      	cbz	r0, 80a1c90 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1c86:	4629      	mov	r1, r5
 80a1c88:	4620      	mov	r0, r4
 80a1c8a:	f7ff fd6f 	bl	80a176c <_ZN9IPAddressC1Em>
 80a1c8e:	e003      	b.n	80a1c98 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1c90:	a903      	add	r1, sp, #12
 80a1c92:	4620      	mov	r0, r4
 80a1c94:	f7ff fd58 	bl	80a1748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1c98:	4620      	mov	r0, r4
 80a1c9a:	b00e      	add	sp, #56	; 0x38
 80a1c9c:	bd70      	pop	{r4, r5, r6, pc}
 80a1c9e:	bf00      	nop
 80a1ca0:	20000518 	.word	0x20000518

080a1ca4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1ca4:	4b02      	ldr	r3, [pc, #8]	; (80a1cb0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1ca6:	4a03      	ldr	r2, [pc, #12]	; (80a1cb4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1ca8:	601a      	str	r2, [r3, #0]
 80a1caa:	2200      	movs	r2, #0
 80a1cac:	605a      	str	r2, [r3, #4]
 80a1cae:	4770      	bx	lr
 80a1cb0:	20000520 	.word	0x20000520
 80a1cb4:	080a336c 	.word	0x080a336c

080a1cb8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1cb8:	b510      	push	{r4, lr}
 80a1cba:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1cbc:	480f      	ldr	r0, [pc, #60]	; (80a1cfc <pinAvailable+0x44>)
 80a1cbe:	f7fe ffa3 	bl	80a0c08 <_ZN8SPIClass9isEnabledEv>
 80a1cc2:	b128      	cbz	r0, 80a1cd0 <pinAvailable+0x18>
 80a1cc4:	f1a4 030d 	sub.w	r3, r4, #13
 80a1cc8:	2b02      	cmp	r3, #2
 80a1cca:	d801      	bhi.n	80a1cd0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1ccc:	2000      	movs	r0, #0
 80a1cce:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1cd0:	f000 f88e 	bl	80a1df0 <_Z19__fetch_global_Wirev>
 80a1cd4:	f7ff ff2b 	bl	80a1b2e <_ZN7TwoWire9isEnabledEv>
 80a1cd8:	b108      	cbz	r0, 80a1cde <pinAvailable+0x26>
 80a1cda:	2c01      	cmp	r4, #1
 80a1cdc:	d9f6      	bls.n	80a1ccc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1cde:	f7ff fe95 	bl	80a1a0c <_Z22__fetch_global_Serial1v>
 80a1ce2:	f7ff fe8f 	bl	80a1a04 <_ZN11USARTSerial9isEnabledEv>
 80a1ce6:	b118      	cbz	r0, 80a1cf0 <pinAvailable+0x38>
 80a1ce8:	f1a4 0312 	sub.w	r3, r4, #18
 80a1cec:	2b01      	cmp	r3, #1
 80a1cee:	d9ed      	bls.n	80a1ccc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1cf0:	2c17      	cmp	r4, #23
 80a1cf2:	bf8c      	ite	hi
 80a1cf4:	2000      	movhi	r0, #0
 80a1cf6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1cf8:	bd10      	pop	{r4, pc}
 80a1cfa:	bf00      	nop
 80a1cfc:	20000528 	.word	0x20000528

080a1d00 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1d00:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1d02:	b538      	push	{r3, r4, r5, lr}
 80a1d04:	4604      	mov	r4, r0
 80a1d06:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1d08:	d80a      	bhi.n	80a1d20 <pinMode+0x20>
 80a1d0a:	29ff      	cmp	r1, #255	; 0xff
 80a1d0c:	d008      	beq.n	80a1d20 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1d0e:	f7ff ffd3 	bl	80a1cb8 <pinAvailable>
 80a1d12:	b128      	cbz	r0, 80a1d20 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1d14:	4629      	mov	r1, r5
 80a1d16:	4620      	mov	r0, r4
}
 80a1d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1d1c:	f7fe bd4a 	b.w	80a07b4 <HAL_Pin_Mode>
 80a1d20:	bd38      	pop	{r3, r4, r5, pc}

080a1d22 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1d22:	b538      	push	{r3, r4, r5, lr}
 80a1d24:	4604      	mov	r4, r0
 80a1d26:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1d28:	f7fe fd4c 	bl	80a07c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1d2c:	28ff      	cmp	r0, #255	; 0xff
 80a1d2e:	d010      	beq.n	80a1d52 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1d30:	2806      	cmp	r0, #6
 80a1d32:	d804      	bhi.n	80a1d3e <digitalWrite+0x1c>
 80a1d34:	234d      	movs	r3, #77	; 0x4d
 80a1d36:	fa23 f000 	lsr.w	r0, r3, r0
 80a1d3a:	07c3      	lsls	r3, r0, #31
 80a1d3c:	d409      	bmi.n	80a1d52 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1d3e:	4620      	mov	r0, r4
 80a1d40:	f7ff ffba 	bl	80a1cb8 <pinAvailable>
 80a1d44:	b128      	cbz	r0, 80a1d52 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1d46:	4629      	mov	r1, r5
 80a1d48:	4620      	mov	r0, r4
}
 80a1d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1d4e:	f7fe bd41 	b.w	80a07d4 <HAL_GPIO_Write>
 80a1d52:	bd38      	pop	{r3, r4, r5, pc}

080a1d54 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1d54:	b510      	push	{r4, lr}
 80a1d56:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1d58:	f7fe fd34 	bl	80a07c4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a1d5c:	3804      	subs	r0, #4
 80a1d5e:	b2c0      	uxtb	r0, r0
 80a1d60:	2801      	cmp	r0, #1
 80a1d62:	d908      	bls.n	80a1d76 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1d64:	4620      	mov	r0, r4
 80a1d66:	f7ff ffa7 	bl	80a1cb8 <pinAvailable>
 80a1d6a:	b120      	cbz	r0, 80a1d76 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1d6c:	4620      	mov	r0, r4
}
 80a1d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1d72:	f7fe bd37 	b.w	80a07e4 <HAL_GPIO_Read>
}
 80a1d76:	2000      	movs	r0, #0
 80a1d78:	bd10      	pop	{r4, pc}
	...

080a1d7c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1d7c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1d7e:	4c0c      	ldr	r4, [pc, #48]	; (80a1db0 <_GLOBAL__sub_I_SPI+0x34>)
 80a1d80:	4e0c      	ldr	r6, [pc, #48]	; (80a1db4 <_GLOBAL__sub_I_SPI+0x38>)
 80a1d82:	4d0d      	ldr	r5, [pc, #52]	; (80a1db8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1d84:	2100      	movs	r1, #0
 80a1d86:	4620      	mov	r0, r4
 80a1d88:	f7fe ff2a 	bl	80a0be0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1d8c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1d8e:	4c0b      	ldr	r4, [pc, #44]	; (80a1dbc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1d90:	4632      	mov	r2, r6
 80a1d92:	4629      	mov	r1, r5
 80a1d94:	f000 f84c 	bl	80a1e30 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1d98:	2101      	movs	r1, #1
 80a1d9a:	4620      	mov	r0, r4
 80a1d9c:	f7fe ff20 	bl	80a0be0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1da0:	4632      	mov	r2, r6
 80a1da2:	4629      	mov	r1, r5
 80a1da4:	4620      	mov	r0, r4
 80a1da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1daa:	f000 b841 	b.w	80a1e30 <__aeabi_atexit>
 80a1dae:	bf00      	nop
 80a1db0:	20000528 	.word	0x20000528
 80a1db4:	20000068 	.word	0x20000068
 80a1db8:	080a0bd1 	.word	0x080a0bd1
 80a1dbc:	20000538 	.word	0x20000538

080a1dc0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1dc0:	b513      	push	{r0, r1, r4, lr}
 80a1dc2:	4c08      	ldr	r4, [pc, #32]	; (80a1de4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1dc4:	2300      	movs	r3, #0
 80a1dc6:	461a      	mov	r2, r3
 80a1dc8:	4619      	mov	r1, r3
 80a1dca:	9300      	str	r3, [sp, #0]
 80a1dcc:	4620      	mov	r0, r4
 80a1dce:	f7ff fce3 	bl	80a1798 <_ZN9IPAddressC1Ehhhh>
 80a1dd2:	4620      	mov	r0, r4
 80a1dd4:	4a04      	ldr	r2, [pc, #16]	; (80a1de8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1dd6:	4905      	ldr	r1, [pc, #20]	; (80a1dec <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1dd8:	b002      	add	sp, #8
 80a1dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1dde:	f000 b827 	b.w	80a1e30 <__aeabi_atexit>
 80a1de2:	bf00      	nop
 80a1de4:	2000054c 	.word	0x2000054c
 80a1de8:	20000068 	.word	0x20000068
 80a1dec:	080a16e9 	.word	0x080a16e9

080a1df0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1df0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1df2:	4d0b      	ldr	r5, [pc, #44]	; (80a1e20 <_Z19__fetch_global_Wirev+0x30>)
 80a1df4:	6829      	ldr	r1, [r5, #0]
 80a1df6:	f011 0401 	ands.w	r4, r1, #1
 80a1dfa:	d10f      	bne.n	80a1e1c <_Z19__fetch_global_Wirev+0x2c>
 80a1dfc:	4628      	mov	r0, r5
 80a1dfe:	f7fe f950 	bl	80a00a2 <__cxa_guard_acquire>
 80a1e02:	b158      	cbz	r0, 80a1e1c <_Z19__fetch_global_Wirev+0x2c>
 80a1e04:	4621      	mov	r1, r4
 80a1e06:	4807      	ldr	r0, [pc, #28]	; (80a1e24 <_Z19__fetch_global_Wirev+0x34>)
 80a1e08:	f7ff fe66 	bl	80a1ad8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1e0c:	4628      	mov	r0, r5
 80a1e0e:	f7fe f94d 	bl	80a00ac <__cxa_guard_release>
 80a1e12:	4a05      	ldr	r2, [pc, #20]	; (80a1e28 <_Z19__fetch_global_Wirev+0x38>)
 80a1e14:	4905      	ldr	r1, [pc, #20]	; (80a1e2c <_Z19__fetch_global_Wirev+0x3c>)
 80a1e16:	4803      	ldr	r0, [pc, #12]	; (80a1e24 <_Z19__fetch_global_Wirev+0x34>)
 80a1e18:	f000 f80a 	bl	80a1e30 <__aeabi_atexit>
	return wire;
}
 80a1e1c:	4801      	ldr	r0, [pc, #4]	; (80a1e24 <_Z19__fetch_global_Wirev+0x34>)
 80a1e1e:	bd38      	pop	{r3, r4, r5, pc}
 80a1e20:	20000564 	.word	0x20000564
 80a1e24:	20000568 	.word	0x20000568
 80a1e28:	20000068 	.word	0x20000068
 80a1e2c:	080a1a81 	.word	0x080a1a81

080a1e30 <__aeabi_atexit>:
 80a1e30:	460b      	mov	r3, r1
 80a1e32:	4601      	mov	r1, r0
 80a1e34:	4618      	mov	r0, r3
 80a1e36:	f001 b8d1 	b.w	80a2fdc <__cxa_atexit>

080a1e3a <_ZdlPvj>:
 80a1e3a:	f7fe b930 	b.w	80a009e <_ZdlPv>

080a1e3e <_ZSt25__throw_bad_function_callv>:
 80a1e3e:	b508      	push	{r3, lr}
 80a1e40:	f7fe feb6 	bl	80a0bb0 <abort>

080a1e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1e44:	4b18      	ldr	r3, [pc, #96]	; (80a1ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1e46:	681a      	ldr	r2, [r3, #0]
 80a1e48:	07d1      	lsls	r1, r2, #31
 80a1e4a:	bf5c      	itt	pl
 80a1e4c:	2201      	movpl	r2, #1
 80a1e4e:	601a      	strpl	r2, [r3, #0]
 80a1e50:	4b16      	ldr	r3, [pc, #88]	; (80a1eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1e52:	681a      	ldr	r2, [r3, #0]
 80a1e54:	07d2      	lsls	r2, r2, #31
 80a1e56:	bf5c      	itt	pl
 80a1e58:	2201      	movpl	r2, #1
 80a1e5a:	601a      	strpl	r2, [r3, #0]
 80a1e5c:	4b14      	ldr	r3, [pc, #80]	; (80a1eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1e5e:	681a      	ldr	r2, [r3, #0]
 80a1e60:	07d0      	lsls	r0, r2, #31
 80a1e62:	bf5c      	itt	pl
 80a1e64:	2201      	movpl	r2, #1
 80a1e66:	601a      	strpl	r2, [r3, #0]
 80a1e68:	4b12      	ldr	r3, [pc, #72]	; (80a1eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1e6a:	681a      	ldr	r2, [r3, #0]
 80a1e6c:	07d1      	lsls	r1, r2, #31
 80a1e6e:	bf5c      	itt	pl
 80a1e70:	2201      	movpl	r2, #1
 80a1e72:	601a      	strpl	r2, [r3, #0]
 80a1e74:	4b10      	ldr	r3, [pc, #64]	; (80a1eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1e76:	681a      	ldr	r2, [r3, #0]
 80a1e78:	07d2      	lsls	r2, r2, #31
 80a1e7a:	bf5c      	itt	pl
 80a1e7c:	2201      	movpl	r2, #1
 80a1e7e:	601a      	strpl	r2, [r3, #0]
 80a1e80:	4b0e      	ldr	r3, [pc, #56]	; (80a1ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1e82:	681a      	ldr	r2, [r3, #0]
 80a1e84:	07d0      	lsls	r0, r2, #31
 80a1e86:	bf5c      	itt	pl
 80a1e88:	2201      	movpl	r2, #1
 80a1e8a:	601a      	strpl	r2, [r3, #0]
 80a1e8c:	4b0c      	ldr	r3, [pc, #48]	; (80a1ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1e8e:	681a      	ldr	r2, [r3, #0]
 80a1e90:	07d1      	lsls	r1, r2, #31
 80a1e92:	bf5c      	itt	pl
 80a1e94:	2201      	movpl	r2, #1
 80a1e96:	601a      	strpl	r2, [r3, #0]
 80a1e98:	4b0a      	ldr	r3, [pc, #40]	; (80a1ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1e9a:	681a      	ldr	r2, [r3, #0]
 80a1e9c:	07d2      	lsls	r2, r2, #31
 80a1e9e:	bf5c      	itt	pl
 80a1ea0:	2201      	movpl	r2, #1
 80a1ea2:	601a      	strpl	r2, [r3, #0]
 80a1ea4:	4770      	bx	lr
 80a1ea6:	bf00      	nop
 80a1ea8:	20000598 	.word	0x20000598
 80a1eac:	20000594 	.word	0x20000594
 80a1eb0:	20000590 	.word	0x20000590
 80a1eb4:	2000058c 	.word	0x2000058c
 80a1eb8:	20000588 	.word	0x20000588
 80a1ebc:	20000584 	.word	0x20000584
 80a1ec0:	20000580 	.word	0x20000580
 80a1ec4:	2000057c 	.word	0x2000057c

080a1ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1ec8:	4b24      	ldr	r3, [pc, #144]	; (80a1f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1eca:	681a      	ldr	r2, [r3, #0]
 80a1ecc:	07d0      	lsls	r0, r2, #31
 80a1ece:	bf5c      	itt	pl
 80a1ed0:	2201      	movpl	r2, #1
 80a1ed2:	601a      	strpl	r2, [r3, #0]
 80a1ed4:	4b22      	ldr	r3, [pc, #136]	; (80a1f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1ed6:	681a      	ldr	r2, [r3, #0]
 80a1ed8:	07d1      	lsls	r1, r2, #31
 80a1eda:	bf5c      	itt	pl
 80a1edc:	2201      	movpl	r2, #1
 80a1ede:	601a      	strpl	r2, [r3, #0]
 80a1ee0:	4b20      	ldr	r3, [pc, #128]	; (80a1f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1ee2:	681a      	ldr	r2, [r3, #0]
 80a1ee4:	07d2      	lsls	r2, r2, #31
 80a1ee6:	bf5c      	itt	pl
 80a1ee8:	2201      	movpl	r2, #1
 80a1eea:	601a      	strpl	r2, [r3, #0]
 80a1eec:	4b1e      	ldr	r3, [pc, #120]	; (80a1f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1eee:	681a      	ldr	r2, [r3, #0]
 80a1ef0:	07d0      	lsls	r0, r2, #31
 80a1ef2:	bf5c      	itt	pl
 80a1ef4:	2201      	movpl	r2, #1
 80a1ef6:	601a      	strpl	r2, [r3, #0]
 80a1ef8:	4b1c      	ldr	r3, [pc, #112]	; (80a1f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1efa:	681a      	ldr	r2, [r3, #0]
 80a1efc:	07d1      	lsls	r1, r2, #31
 80a1efe:	bf5c      	itt	pl
 80a1f00:	2201      	movpl	r2, #1
 80a1f02:	601a      	strpl	r2, [r3, #0]
 80a1f04:	4b1a      	ldr	r3, [pc, #104]	; (80a1f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1f06:	681a      	ldr	r2, [r3, #0]
 80a1f08:	07d2      	lsls	r2, r2, #31
 80a1f0a:	bf5c      	itt	pl
 80a1f0c:	2201      	movpl	r2, #1
 80a1f0e:	601a      	strpl	r2, [r3, #0]
 80a1f10:	4b18      	ldr	r3, [pc, #96]	; (80a1f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1f12:	681a      	ldr	r2, [r3, #0]
 80a1f14:	07d0      	lsls	r0, r2, #31
 80a1f16:	bf5c      	itt	pl
 80a1f18:	2201      	movpl	r2, #1
 80a1f1a:	601a      	strpl	r2, [r3, #0]
 80a1f1c:	4b16      	ldr	r3, [pc, #88]	; (80a1f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1f1e:	681a      	ldr	r2, [r3, #0]
 80a1f20:	07d1      	lsls	r1, r2, #31
 80a1f22:	bf5c      	itt	pl
 80a1f24:	2201      	movpl	r2, #1
 80a1f26:	601a      	strpl	r2, [r3, #0]
 80a1f28:	4b14      	ldr	r3, [pc, #80]	; (80a1f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1f2a:	681a      	ldr	r2, [r3, #0]
 80a1f2c:	07d2      	lsls	r2, r2, #31
 80a1f2e:	bf5c      	itt	pl
 80a1f30:	2201      	movpl	r2, #1
 80a1f32:	601a      	strpl	r2, [r3, #0]
 80a1f34:	4b12      	ldr	r3, [pc, #72]	; (80a1f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1f36:	681a      	ldr	r2, [r3, #0]
 80a1f38:	07d0      	lsls	r0, r2, #31
 80a1f3a:	bf5c      	itt	pl
 80a1f3c:	2201      	movpl	r2, #1
 80a1f3e:	601a      	strpl	r2, [r3, #0]
 80a1f40:	4b10      	ldr	r3, [pc, #64]	; (80a1f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1f42:	681a      	ldr	r2, [r3, #0]
 80a1f44:	07d1      	lsls	r1, r2, #31
 80a1f46:	bf5c      	itt	pl
 80a1f48:	2201      	movpl	r2, #1
 80a1f4a:	601a      	strpl	r2, [r3, #0]
 80a1f4c:	4b0e      	ldr	r3, [pc, #56]	; (80a1f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1f4e:	681a      	ldr	r2, [r3, #0]
 80a1f50:	07d2      	lsls	r2, r2, #31
 80a1f52:	bf5c      	itt	pl
 80a1f54:	2201      	movpl	r2, #1
 80a1f56:	601a      	strpl	r2, [r3, #0]
 80a1f58:	4770      	bx	lr
 80a1f5a:	bf00      	nop
 80a1f5c:	200005c8 	.word	0x200005c8
 80a1f60:	200005c4 	.word	0x200005c4
 80a1f64:	200005c0 	.word	0x200005c0
 80a1f68:	200005bc 	.word	0x200005bc
 80a1f6c:	200005b8 	.word	0x200005b8
 80a1f70:	200005b4 	.word	0x200005b4
 80a1f74:	200005b0 	.word	0x200005b0
 80a1f78:	200005ac 	.word	0x200005ac
 80a1f7c:	200005a8 	.word	0x200005a8
 80a1f80:	200005a4 	.word	0x200005a4
 80a1f84:	200005a0 	.word	0x200005a0
 80a1f88:	2000059c 	.word	0x2000059c

080a1f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1f8c:	4b24      	ldr	r3, [pc, #144]	; (80a2020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1f8e:	681a      	ldr	r2, [r3, #0]
 80a1f90:	07d0      	lsls	r0, r2, #31
 80a1f92:	bf5c      	itt	pl
 80a1f94:	2201      	movpl	r2, #1
 80a1f96:	601a      	strpl	r2, [r3, #0]
 80a1f98:	4b22      	ldr	r3, [pc, #136]	; (80a2024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1f9a:	681a      	ldr	r2, [r3, #0]
 80a1f9c:	07d1      	lsls	r1, r2, #31
 80a1f9e:	bf5c      	itt	pl
 80a1fa0:	2201      	movpl	r2, #1
 80a1fa2:	601a      	strpl	r2, [r3, #0]
 80a1fa4:	4b20      	ldr	r3, [pc, #128]	; (80a2028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1fa6:	681a      	ldr	r2, [r3, #0]
 80a1fa8:	07d2      	lsls	r2, r2, #31
 80a1faa:	bf5c      	itt	pl
 80a1fac:	2201      	movpl	r2, #1
 80a1fae:	601a      	strpl	r2, [r3, #0]
 80a1fb0:	4b1e      	ldr	r3, [pc, #120]	; (80a202c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1fb2:	681a      	ldr	r2, [r3, #0]
 80a1fb4:	07d0      	lsls	r0, r2, #31
 80a1fb6:	bf5c      	itt	pl
 80a1fb8:	2201      	movpl	r2, #1
 80a1fba:	601a      	strpl	r2, [r3, #0]
 80a1fbc:	4b1c      	ldr	r3, [pc, #112]	; (80a2030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1fbe:	681a      	ldr	r2, [r3, #0]
 80a1fc0:	07d1      	lsls	r1, r2, #31
 80a1fc2:	bf5c      	itt	pl
 80a1fc4:	2201      	movpl	r2, #1
 80a1fc6:	601a      	strpl	r2, [r3, #0]
 80a1fc8:	4b1a      	ldr	r3, [pc, #104]	; (80a2034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1fca:	681a      	ldr	r2, [r3, #0]
 80a1fcc:	07d2      	lsls	r2, r2, #31
 80a1fce:	bf5c      	itt	pl
 80a1fd0:	2201      	movpl	r2, #1
 80a1fd2:	601a      	strpl	r2, [r3, #0]
 80a1fd4:	4b18      	ldr	r3, [pc, #96]	; (80a2038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1fd6:	681a      	ldr	r2, [r3, #0]
 80a1fd8:	07d0      	lsls	r0, r2, #31
 80a1fda:	bf5c      	itt	pl
 80a1fdc:	2201      	movpl	r2, #1
 80a1fde:	601a      	strpl	r2, [r3, #0]
 80a1fe0:	4b16      	ldr	r3, [pc, #88]	; (80a203c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1fe2:	681a      	ldr	r2, [r3, #0]
 80a1fe4:	07d1      	lsls	r1, r2, #31
 80a1fe6:	bf5c      	itt	pl
 80a1fe8:	2201      	movpl	r2, #1
 80a1fea:	601a      	strpl	r2, [r3, #0]
 80a1fec:	4b14      	ldr	r3, [pc, #80]	; (80a2040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1fee:	681a      	ldr	r2, [r3, #0]
 80a1ff0:	07d2      	lsls	r2, r2, #31
 80a1ff2:	bf5c      	itt	pl
 80a1ff4:	2201      	movpl	r2, #1
 80a1ff6:	601a      	strpl	r2, [r3, #0]
 80a1ff8:	4b12      	ldr	r3, [pc, #72]	; (80a2044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1ffa:	681a      	ldr	r2, [r3, #0]
 80a1ffc:	07d0      	lsls	r0, r2, #31
 80a1ffe:	bf5c      	itt	pl
 80a2000:	2201      	movpl	r2, #1
 80a2002:	601a      	strpl	r2, [r3, #0]
 80a2004:	4b10      	ldr	r3, [pc, #64]	; (80a2048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2006:	681a      	ldr	r2, [r3, #0]
 80a2008:	07d1      	lsls	r1, r2, #31
 80a200a:	bf5c      	itt	pl
 80a200c:	2201      	movpl	r2, #1
 80a200e:	601a      	strpl	r2, [r3, #0]
 80a2010:	4b0e      	ldr	r3, [pc, #56]	; (80a204c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2012:	681a      	ldr	r2, [r3, #0]
 80a2014:	07d2      	lsls	r2, r2, #31
 80a2016:	bf5c      	itt	pl
 80a2018:	2201      	movpl	r2, #1
 80a201a:	601a      	strpl	r2, [r3, #0]
 80a201c:	4770      	bx	lr
 80a201e:	bf00      	nop
 80a2020:	200005f8 	.word	0x200005f8
 80a2024:	200005f4 	.word	0x200005f4
 80a2028:	200005f0 	.word	0x200005f0
 80a202c:	200005ec 	.word	0x200005ec
 80a2030:	200005e8 	.word	0x200005e8
 80a2034:	200005e4 	.word	0x200005e4
 80a2038:	200005e0 	.word	0x200005e0
 80a203c:	200005dc 	.word	0x200005dc
 80a2040:	200005d8 	.word	0x200005d8
 80a2044:	200005d4 	.word	0x200005d4
 80a2048:	200005d0 	.word	0x200005d0
 80a204c:	200005cc 	.word	0x200005cc

080a2050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2050:	4b18      	ldr	r3, [pc, #96]	; (80a20b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2052:	681a      	ldr	r2, [r3, #0]
 80a2054:	07d1      	lsls	r1, r2, #31
 80a2056:	bf5c      	itt	pl
 80a2058:	2201      	movpl	r2, #1
 80a205a:	601a      	strpl	r2, [r3, #0]
 80a205c:	4b16      	ldr	r3, [pc, #88]	; (80a20b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a205e:	681a      	ldr	r2, [r3, #0]
 80a2060:	07d2      	lsls	r2, r2, #31
 80a2062:	bf5c      	itt	pl
 80a2064:	2201      	movpl	r2, #1
 80a2066:	601a      	strpl	r2, [r3, #0]
 80a2068:	4b14      	ldr	r3, [pc, #80]	; (80a20bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a206a:	681a      	ldr	r2, [r3, #0]
 80a206c:	07d0      	lsls	r0, r2, #31
 80a206e:	bf5c      	itt	pl
 80a2070:	2201      	movpl	r2, #1
 80a2072:	601a      	strpl	r2, [r3, #0]
 80a2074:	4b12      	ldr	r3, [pc, #72]	; (80a20c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2076:	681a      	ldr	r2, [r3, #0]
 80a2078:	07d1      	lsls	r1, r2, #31
 80a207a:	bf5c      	itt	pl
 80a207c:	2201      	movpl	r2, #1
 80a207e:	601a      	strpl	r2, [r3, #0]
 80a2080:	4b10      	ldr	r3, [pc, #64]	; (80a20c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2082:	681a      	ldr	r2, [r3, #0]
 80a2084:	07d2      	lsls	r2, r2, #31
 80a2086:	bf5c      	itt	pl
 80a2088:	2201      	movpl	r2, #1
 80a208a:	601a      	strpl	r2, [r3, #0]
 80a208c:	4b0e      	ldr	r3, [pc, #56]	; (80a20c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a208e:	681a      	ldr	r2, [r3, #0]
 80a2090:	07d0      	lsls	r0, r2, #31
 80a2092:	bf5c      	itt	pl
 80a2094:	2201      	movpl	r2, #1
 80a2096:	601a      	strpl	r2, [r3, #0]
 80a2098:	4b0c      	ldr	r3, [pc, #48]	; (80a20cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a209a:	681a      	ldr	r2, [r3, #0]
 80a209c:	07d1      	lsls	r1, r2, #31
 80a209e:	bf5c      	itt	pl
 80a20a0:	2201      	movpl	r2, #1
 80a20a2:	601a      	strpl	r2, [r3, #0]
 80a20a4:	4b0a      	ldr	r3, [pc, #40]	; (80a20d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a20a6:	681a      	ldr	r2, [r3, #0]
 80a20a8:	07d2      	lsls	r2, r2, #31
 80a20aa:	bf5c      	itt	pl
 80a20ac:	2201      	movpl	r2, #1
 80a20ae:	601a      	strpl	r2, [r3, #0]
 80a20b0:	4770      	bx	lr
 80a20b2:	bf00      	nop
 80a20b4:	20000618 	.word	0x20000618
 80a20b8:	20000614 	.word	0x20000614
 80a20bc:	20000610 	.word	0x20000610
 80a20c0:	2000060c 	.word	0x2000060c
 80a20c4:	20000608 	.word	0x20000608
 80a20c8:	20000604 	.word	0x20000604
 80a20cc:	20000600 	.word	0x20000600
 80a20d0:	200005fc 	.word	0x200005fc

080a20d4 <__aeabi_drsub>:
 80a20d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a20d8:	e002      	b.n	80a20e0 <__adddf3>
 80a20da:	bf00      	nop

080a20dc <__aeabi_dsub>:
 80a20dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a20e0 <__adddf3>:
 80a20e0:	b530      	push	{r4, r5, lr}
 80a20e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a20e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a20ea:	ea94 0f05 	teq	r4, r5
 80a20ee:	bf08      	it	eq
 80a20f0:	ea90 0f02 	teqeq	r0, r2
 80a20f4:	bf1f      	itttt	ne
 80a20f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a20fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a20fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2102:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2106:	f000 80e2 	beq.w	80a22ce <__adddf3+0x1ee>
 80a210a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a210e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2112:	bfb8      	it	lt
 80a2114:	426d      	neglt	r5, r5
 80a2116:	dd0c      	ble.n	80a2132 <__adddf3+0x52>
 80a2118:	442c      	add	r4, r5
 80a211a:	ea80 0202 	eor.w	r2, r0, r2
 80a211e:	ea81 0303 	eor.w	r3, r1, r3
 80a2122:	ea82 0000 	eor.w	r0, r2, r0
 80a2126:	ea83 0101 	eor.w	r1, r3, r1
 80a212a:	ea80 0202 	eor.w	r2, r0, r2
 80a212e:	ea81 0303 	eor.w	r3, r1, r3
 80a2132:	2d36      	cmp	r5, #54	; 0x36
 80a2134:	bf88      	it	hi
 80a2136:	bd30      	pophi	{r4, r5, pc}
 80a2138:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a213c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2140:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2144:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2148:	d002      	beq.n	80a2150 <__adddf3+0x70>
 80a214a:	4240      	negs	r0, r0
 80a214c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2150:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2154:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2158:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a215c:	d002      	beq.n	80a2164 <__adddf3+0x84>
 80a215e:	4252      	negs	r2, r2
 80a2160:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2164:	ea94 0f05 	teq	r4, r5
 80a2168:	f000 80a7 	beq.w	80a22ba <__adddf3+0x1da>
 80a216c:	f1a4 0401 	sub.w	r4, r4, #1
 80a2170:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2174:	db0d      	blt.n	80a2192 <__adddf3+0xb2>
 80a2176:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a217a:	fa22 f205 	lsr.w	r2, r2, r5
 80a217e:	1880      	adds	r0, r0, r2
 80a2180:	f141 0100 	adc.w	r1, r1, #0
 80a2184:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2188:	1880      	adds	r0, r0, r2
 80a218a:	fa43 f305 	asr.w	r3, r3, r5
 80a218e:	4159      	adcs	r1, r3
 80a2190:	e00e      	b.n	80a21b0 <__adddf3+0xd0>
 80a2192:	f1a5 0520 	sub.w	r5, r5, #32
 80a2196:	f10e 0e20 	add.w	lr, lr, #32
 80a219a:	2a01      	cmp	r2, #1
 80a219c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a21a0:	bf28      	it	cs
 80a21a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a21a6:	fa43 f305 	asr.w	r3, r3, r5
 80a21aa:	18c0      	adds	r0, r0, r3
 80a21ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a21b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a21b4:	d507      	bpl.n	80a21c6 <__adddf3+0xe6>
 80a21b6:	f04f 0e00 	mov.w	lr, #0
 80a21ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80a21be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a21c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a21c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a21ca:	d31b      	bcc.n	80a2204 <__adddf3+0x124>
 80a21cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a21d0:	d30c      	bcc.n	80a21ec <__adddf3+0x10c>
 80a21d2:	0849      	lsrs	r1, r1, #1
 80a21d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a21d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a21dc:	f104 0401 	add.w	r4, r4, #1
 80a21e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a21e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a21e8:	f080 809a 	bcs.w	80a2320 <__adddf3+0x240>
 80a21ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a21f0:	bf08      	it	eq
 80a21f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a21f6:	f150 0000 	adcs.w	r0, r0, #0
 80a21fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a21fe:	ea41 0105 	orr.w	r1, r1, r5
 80a2202:	bd30      	pop	{r4, r5, pc}
 80a2204:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2208:	4140      	adcs	r0, r0
 80a220a:	eb41 0101 	adc.w	r1, r1, r1
 80a220e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2212:	f1a4 0401 	sub.w	r4, r4, #1
 80a2216:	d1e9      	bne.n	80a21ec <__adddf3+0x10c>
 80a2218:	f091 0f00 	teq	r1, #0
 80a221c:	bf04      	itt	eq
 80a221e:	4601      	moveq	r1, r0
 80a2220:	2000      	moveq	r0, #0
 80a2222:	fab1 f381 	clz	r3, r1
 80a2226:	bf08      	it	eq
 80a2228:	3320      	addeq	r3, #32
 80a222a:	f1a3 030b 	sub.w	r3, r3, #11
 80a222e:	f1b3 0220 	subs.w	r2, r3, #32
 80a2232:	da0c      	bge.n	80a224e <__adddf3+0x16e>
 80a2234:	320c      	adds	r2, #12
 80a2236:	dd08      	ble.n	80a224a <__adddf3+0x16a>
 80a2238:	f102 0c14 	add.w	ip, r2, #20
 80a223c:	f1c2 020c 	rsb	r2, r2, #12
 80a2240:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2244:	fa21 f102 	lsr.w	r1, r1, r2
 80a2248:	e00c      	b.n	80a2264 <__adddf3+0x184>
 80a224a:	f102 0214 	add.w	r2, r2, #20
 80a224e:	bfd8      	it	le
 80a2250:	f1c2 0c20 	rsble	ip, r2, #32
 80a2254:	fa01 f102 	lsl.w	r1, r1, r2
 80a2258:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a225c:	bfdc      	itt	le
 80a225e:	ea41 010c 	orrle.w	r1, r1, ip
 80a2262:	4090      	lslle	r0, r2
 80a2264:	1ae4      	subs	r4, r4, r3
 80a2266:	bfa2      	ittt	ge
 80a2268:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a226c:	4329      	orrge	r1, r5
 80a226e:	bd30      	popge	{r4, r5, pc}
 80a2270:	ea6f 0404 	mvn.w	r4, r4
 80a2274:	3c1f      	subs	r4, #31
 80a2276:	da1c      	bge.n	80a22b2 <__adddf3+0x1d2>
 80a2278:	340c      	adds	r4, #12
 80a227a:	dc0e      	bgt.n	80a229a <__adddf3+0x1ba>
 80a227c:	f104 0414 	add.w	r4, r4, #20
 80a2280:	f1c4 0220 	rsb	r2, r4, #32
 80a2284:	fa20 f004 	lsr.w	r0, r0, r4
 80a2288:	fa01 f302 	lsl.w	r3, r1, r2
 80a228c:	ea40 0003 	orr.w	r0, r0, r3
 80a2290:	fa21 f304 	lsr.w	r3, r1, r4
 80a2294:	ea45 0103 	orr.w	r1, r5, r3
 80a2298:	bd30      	pop	{r4, r5, pc}
 80a229a:	f1c4 040c 	rsb	r4, r4, #12
 80a229e:	f1c4 0220 	rsb	r2, r4, #32
 80a22a2:	fa20 f002 	lsr.w	r0, r0, r2
 80a22a6:	fa01 f304 	lsl.w	r3, r1, r4
 80a22aa:	ea40 0003 	orr.w	r0, r0, r3
 80a22ae:	4629      	mov	r1, r5
 80a22b0:	bd30      	pop	{r4, r5, pc}
 80a22b2:	fa21 f004 	lsr.w	r0, r1, r4
 80a22b6:	4629      	mov	r1, r5
 80a22b8:	bd30      	pop	{r4, r5, pc}
 80a22ba:	f094 0f00 	teq	r4, #0
 80a22be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a22c2:	bf06      	itte	eq
 80a22c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a22c8:	3401      	addeq	r4, #1
 80a22ca:	3d01      	subne	r5, #1
 80a22cc:	e74e      	b.n	80a216c <__adddf3+0x8c>
 80a22ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a22d2:	bf18      	it	ne
 80a22d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a22d8:	d029      	beq.n	80a232e <__adddf3+0x24e>
 80a22da:	ea94 0f05 	teq	r4, r5
 80a22de:	bf08      	it	eq
 80a22e0:	ea90 0f02 	teqeq	r0, r2
 80a22e4:	d005      	beq.n	80a22f2 <__adddf3+0x212>
 80a22e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a22ea:	bf04      	itt	eq
 80a22ec:	4619      	moveq	r1, r3
 80a22ee:	4610      	moveq	r0, r2
 80a22f0:	bd30      	pop	{r4, r5, pc}
 80a22f2:	ea91 0f03 	teq	r1, r3
 80a22f6:	bf1e      	ittt	ne
 80a22f8:	2100      	movne	r1, #0
 80a22fa:	2000      	movne	r0, #0
 80a22fc:	bd30      	popne	{r4, r5, pc}
 80a22fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2302:	d105      	bne.n	80a2310 <__adddf3+0x230>
 80a2304:	0040      	lsls	r0, r0, #1
 80a2306:	4149      	adcs	r1, r1
 80a2308:	bf28      	it	cs
 80a230a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a230e:	bd30      	pop	{r4, r5, pc}
 80a2310:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2314:	bf3c      	itt	cc
 80a2316:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a231a:	bd30      	popcc	{r4, r5, pc}
 80a231c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2320:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2324:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2328:	f04f 0000 	mov.w	r0, #0
 80a232c:	bd30      	pop	{r4, r5, pc}
 80a232e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2332:	bf1a      	itte	ne
 80a2334:	4619      	movne	r1, r3
 80a2336:	4610      	movne	r0, r2
 80a2338:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a233c:	bf1c      	itt	ne
 80a233e:	460b      	movne	r3, r1
 80a2340:	4602      	movne	r2, r0
 80a2342:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2346:	bf06      	itte	eq
 80a2348:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a234c:	ea91 0f03 	teqeq	r1, r3
 80a2350:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2354:	bd30      	pop	{r4, r5, pc}
 80a2356:	bf00      	nop

080a2358 <__aeabi_ui2d>:
 80a2358:	f090 0f00 	teq	r0, #0
 80a235c:	bf04      	itt	eq
 80a235e:	2100      	moveq	r1, #0
 80a2360:	4770      	bxeq	lr
 80a2362:	b530      	push	{r4, r5, lr}
 80a2364:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2368:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a236c:	f04f 0500 	mov.w	r5, #0
 80a2370:	f04f 0100 	mov.w	r1, #0
 80a2374:	e750      	b.n	80a2218 <__adddf3+0x138>
 80a2376:	bf00      	nop

080a2378 <__aeabi_i2d>:
 80a2378:	f090 0f00 	teq	r0, #0
 80a237c:	bf04      	itt	eq
 80a237e:	2100      	moveq	r1, #0
 80a2380:	4770      	bxeq	lr
 80a2382:	b530      	push	{r4, r5, lr}
 80a2384:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2388:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a238c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2390:	bf48      	it	mi
 80a2392:	4240      	negmi	r0, r0
 80a2394:	f04f 0100 	mov.w	r1, #0
 80a2398:	e73e      	b.n	80a2218 <__adddf3+0x138>
 80a239a:	bf00      	nop

080a239c <__aeabi_f2d>:
 80a239c:	0042      	lsls	r2, r0, #1
 80a239e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a23a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a23a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a23aa:	bf1f      	itttt	ne
 80a23ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a23b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a23b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a23b8:	4770      	bxne	lr
 80a23ba:	f092 0f00 	teq	r2, #0
 80a23be:	bf14      	ite	ne
 80a23c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a23c4:	4770      	bxeq	lr
 80a23c6:	b530      	push	{r4, r5, lr}
 80a23c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a23cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a23d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a23d4:	e720      	b.n	80a2218 <__adddf3+0x138>
 80a23d6:	bf00      	nop

080a23d8 <__aeabi_ul2d>:
 80a23d8:	ea50 0201 	orrs.w	r2, r0, r1
 80a23dc:	bf08      	it	eq
 80a23de:	4770      	bxeq	lr
 80a23e0:	b530      	push	{r4, r5, lr}
 80a23e2:	f04f 0500 	mov.w	r5, #0
 80a23e6:	e00a      	b.n	80a23fe <__aeabi_l2d+0x16>

080a23e8 <__aeabi_l2d>:
 80a23e8:	ea50 0201 	orrs.w	r2, r0, r1
 80a23ec:	bf08      	it	eq
 80a23ee:	4770      	bxeq	lr
 80a23f0:	b530      	push	{r4, r5, lr}
 80a23f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a23f6:	d502      	bpl.n	80a23fe <__aeabi_l2d+0x16>
 80a23f8:	4240      	negs	r0, r0
 80a23fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a23fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2402:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2406:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a240a:	f43f aedc 	beq.w	80a21c6 <__adddf3+0xe6>
 80a240e:	f04f 0203 	mov.w	r2, #3
 80a2412:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2416:	bf18      	it	ne
 80a2418:	3203      	addne	r2, #3
 80a241a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a241e:	bf18      	it	ne
 80a2420:	3203      	addne	r2, #3
 80a2422:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2426:	f1c2 0320 	rsb	r3, r2, #32
 80a242a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a242e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2432:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2436:	ea40 000e 	orr.w	r0, r0, lr
 80a243a:	fa21 f102 	lsr.w	r1, r1, r2
 80a243e:	4414      	add	r4, r2
 80a2440:	e6c1      	b.n	80a21c6 <__adddf3+0xe6>
 80a2442:	bf00      	nop

080a2444 <__aeabi_dmul>:
 80a2444:	b570      	push	{r4, r5, r6, lr}
 80a2446:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a244a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a244e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2452:	bf1d      	ittte	ne
 80a2454:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2458:	ea94 0f0c 	teqne	r4, ip
 80a245c:	ea95 0f0c 	teqne	r5, ip
 80a2460:	f000 f8de 	bleq	80a2620 <__aeabi_dmul+0x1dc>
 80a2464:	442c      	add	r4, r5
 80a2466:	ea81 0603 	eor.w	r6, r1, r3
 80a246a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a246e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2472:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2476:	bf18      	it	ne
 80a2478:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a247c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2484:	d038      	beq.n	80a24f8 <__aeabi_dmul+0xb4>
 80a2486:	fba0 ce02 	umull	ip, lr, r0, r2
 80a248a:	f04f 0500 	mov.w	r5, #0
 80a248e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2492:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2496:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a249a:	f04f 0600 	mov.w	r6, #0
 80a249e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a24a2:	f09c 0f00 	teq	ip, #0
 80a24a6:	bf18      	it	ne
 80a24a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a24ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a24b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a24b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a24b8:	d204      	bcs.n	80a24c4 <__aeabi_dmul+0x80>
 80a24ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a24be:	416d      	adcs	r5, r5
 80a24c0:	eb46 0606 	adc.w	r6, r6, r6
 80a24c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a24c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a24cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a24d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a24d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a24d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a24dc:	bf88      	it	hi
 80a24de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a24e2:	d81e      	bhi.n	80a2522 <__aeabi_dmul+0xde>
 80a24e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a24e8:	bf08      	it	eq
 80a24ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a24ee:	f150 0000 	adcs.w	r0, r0, #0
 80a24f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a24f6:	bd70      	pop	{r4, r5, r6, pc}
 80a24f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a24fc:	ea46 0101 	orr.w	r1, r6, r1
 80a2500:	ea40 0002 	orr.w	r0, r0, r2
 80a2504:	ea81 0103 	eor.w	r1, r1, r3
 80a2508:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a250c:	bfc2      	ittt	gt
 80a250e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2512:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2516:	bd70      	popgt	{r4, r5, r6, pc}
 80a2518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a251c:	f04f 0e00 	mov.w	lr, #0
 80a2520:	3c01      	subs	r4, #1
 80a2522:	f300 80ab 	bgt.w	80a267c <__aeabi_dmul+0x238>
 80a2526:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a252a:	bfde      	ittt	le
 80a252c:	2000      	movle	r0, #0
 80a252e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2532:	bd70      	pople	{r4, r5, r6, pc}
 80a2534:	f1c4 0400 	rsb	r4, r4, #0
 80a2538:	3c20      	subs	r4, #32
 80a253a:	da35      	bge.n	80a25a8 <__aeabi_dmul+0x164>
 80a253c:	340c      	adds	r4, #12
 80a253e:	dc1b      	bgt.n	80a2578 <__aeabi_dmul+0x134>
 80a2540:	f104 0414 	add.w	r4, r4, #20
 80a2544:	f1c4 0520 	rsb	r5, r4, #32
 80a2548:	fa00 f305 	lsl.w	r3, r0, r5
 80a254c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2550:	fa01 f205 	lsl.w	r2, r1, r5
 80a2554:	ea40 0002 	orr.w	r0, r0, r2
 80a2558:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a255c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2560:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2564:	fa21 f604 	lsr.w	r6, r1, r4
 80a2568:	eb42 0106 	adc.w	r1, r2, r6
 80a256c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2570:	bf08      	it	eq
 80a2572:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2576:	bd70      	pop	{r4, r5, r6, pc}
 80a2578:	f1c4 040c 	rsb	r4, r4, #12
 80a257c:	f1c4 0520 	rsb	r5, r4, #32
 80a2580:	fa00 f304 	lsl.w	r3, r0, r4
 80a2584:	fa20 f005 	lsr.w	r0, r0, r5
 80a2588:	fa01 f204 	lsl.w	r2, r1, r4
 80a258c:	ea40 0002 	orr.w	r0, r0, r2
 80a2590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2598:	f141 0100 	adc.w	r1, r1, #0
 80a259c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a25a0:	bf08      	it	eq
 80a25a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a25a6:	bd70      	pop	{r4, r5, r6, pc}
 80a25a8:	f1c4 0520 	rsb	r5, r4, #32
 80a25ac:	fa00 f205 	lsl.w	r2, r0, r5
 80a25b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a25b4:	fa20 f304 	lsr.w	r3, r0, r4
 80a25b8:	fa01 f205 	lsl.w	r2, r1, r5
 80a25bc:	ea43 0302 	orr.w	r3, r3, r2
 80a25c0:	fa21 f004 	lsr.w	r0, r1, r4
 80a25c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a25c8:	fa21 f204 	lsr.w	r2, r1, r4
 80a25cc:	ea20 0002 	bic.w	r0, r0, r2
 80a25d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a25d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a25d8:	bf08      	it	eq
 80a25da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a25de:	bd70      	pop	{r4, r5, r6, pc}
 80a25e0:	f094 0f00 	teq	r4, #0
 80a25e4:	d10f      	bne.n	80a2606 <__aeabi_dmul+0x1c2>
 80a25e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a25ea:	0040      	lsls	r0, r0, #1
 80a25ec:	eb41 0101 	adc.w	r1, r1, r1
 80a25f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a25f4:	bf08      	it	eq
 80a25f6:	3c01      	subeq	r4, #1
 80a25f8:	d0f7      	beq.n	80a25ea <__aeabi_dmul+0x1a6>
 80a25fa:	ea41 0106 	orr.w	r1, r1, r6
 80a25fe:	f095 0f00 	teq	r5, #0
 80a2602:	bf18      	it	ne
 80a2604:	4770      	bxne	lr
 80a2606:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a260a:	0052      	lsls	r2, r2, #1
 80a260c:	eb43 0303 	adc.w	r3, r3, r3
 80a2610:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2614:	bf08      	it	eq
 80a2616:	3d01      	subeq	r5, #1
 80a2618:	d0f7      	beq.n	80a260a <__aeabi_dmul+0x1c6>
 80a261a:	ea43 0306 	orr.w	r3, r3, r6
 80a261e:	4770      	bx	lr
 80a2620:	ea94 0f0c 	teq	r4, ip
 80a2624:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2628:	bf18      	it	ne
 80a262a:	ea95 0f0c 	teqne	r5, ip
 80a262e:	d00c      	beq.n	80a264a <__aeabi_dmul+0x206>
 80a2630:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2634:	bf18      	it	ne
 80a2636:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a263a:	d1d1      	bne.n	80a25e0 <__aeabi_dmul+0x19c>
 80a263c:	ea81 0103 	eor.w	r1, r1, r3
 80a2640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2644:	f04f 0000 	mov.w	r0, #0
 80a2648:	bd70      	pop	{r4, r5, r6, pc}
 80a264a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a264e:	bf06      	itte	eq
 80a2650:	4610      	moveq	r0, r2
 80a2652:	4619      	moveq	r1, r3
 80a2654:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2658:	d019      	beq.n	80a268e <__aeabi_dmul+0x24a>
 80a265a:	ea94 0f0c 	teq	r4, ip
 80a265e:	d102      	bne.n	80a2666 <__aeabi_dmul+0x222>
 80a2660:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2664:	d113      	bne.n	80a268e <__aeabi_dmul+0x24a>
 80a2666:	ea95 0f0c 	teq	r5, ip
 80a266a:	d105      	bne.n	80a2678 <__aeabi_dmul+0x234>
 80a266c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2670:	bf1c      	itt	ne
 80a2672:	4610      	movne	r0, r2
 80a2674:	4619      	movne	r1, r3
 80a2676:	d10a      	bne.n	80a268e <__aeabi_dmul+0x24a>
 80a2678:	ea81 0103 	eor.w	r1, r1, r3
 80a267c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2680:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2688:	f04f 0000 	mov.w	r0, #0
 80a268c:	bd70      	pop	{r4, r5, r6, pc}
 80a268e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2692:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2696:	bd70      	pop	{r4, r5, r6, pc}

080a2698 <__aeabi_ddiv>:
 80a2698:	b570      	push	{r4, r5, r6, lr}
 80a269a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a269e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a26a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a26a6:	bf1d      	ittte	ne
 80a26a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a26ac:	ea94 0f0c 	teqne	r4, ip
 80a26b0:	ea95 0f0c 	teqne	r5, ip
 80a26b4:	f000 f8a7 	bleq	80a2806 <__aeabi_ddiv+0x16e>
 80a26b8:	eba4 0405 	sub.w	r4, r4, r5
 80a26bc:	ea81 0e03 	eor.w	lr, r1, r3
 80a26c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a26c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a26c8:	f000 8088 	beq.w	80a27dc <__aeabi_ddiv+0x144>
 80a26cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a26d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a26d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a26d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a26dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a26e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a26e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a26e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a26ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a26f0:	429d      	cmp	r5, r3
 80a26f2:	bf08      	it	eq
 80a26f4:	4296      	cmpeq	r6, r2
 80a26f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a26fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a26fe:	d202      	bcs.n	80a2706 <__aeabi_ddiv+0x6e>
 80a2700:	085b      	lsrs	r3, r3, #1
 80a2702:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2706:	1ab6      	subs	r6, r6, r2
 80a2708:	eb65 0503 	sbc.w	r5, r5, r3
 80a270c:	085b      	lsrs	r3, r3, #1
 80a270e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2712:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2716:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a271a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a271e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2722:	bf22      	ittt	cs
 80a2724:	1ab6      	subcs	r6, r6, r2
 80a2726:	4675      	movcs	r5, lr
 80a2728:	ea40 000c 	orrcs.w	r0, r0, ip
 80a272c:	085b      	lsrs	r3, r3, #1
 80a272e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2732:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2736:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a273a:	bf22      	ittt	cs
 80a273c:	1ab6      	subcs	r6, r6, r2
 80a273e:	4675      	movcs	r5, lr
 80a2740:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2744:	085b      	lsrs	r3, r3, #1
 80a2746:	ea4f 0232 	mov.w	r2, r2, rrx
 80a274a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a274e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2752:	bf22      	ittt	cs
 80a2754:	1ab6      	subcs	r6, r6, r2
 80a2756:	4675      	movcs	r5, lr
 80a2758:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a275c:	085b      	lsrs	r3, r3, #1
 80a275e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2762:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2766:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a276a:	bf22      	ittt	cs
 80a276c:	1ab6      	subcs	r6, r6, r2
 80a276e:	4675      	movcs	r5, lr
 80a2770:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2774:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2778:	d018      	beq.n	80a27ac <__aeabi_ddiv+0x114>
 80a277a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a277e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2782:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2786:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a278a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a278e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2792:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2796:	d1c0      	bne.n	80a271a <__aeabi_ddiv+0x82>
 80a2798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a279c:	d10b      	bne.n	80a27b6 <__aeabi_ddiv+0x11e>
 80a279e:	ea41 0100 	orr.w	r1, r1, r0
 80a27a2:	f04f 0000 	mov.w	r0, #0
 80a27a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a27aa:	e7b6      	b.n	80a271a <__aeabi_ddiv+0x82>
 80a27ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a27b0:	bf04      	itt	eq
 80a27b2:	4301      	orreq	r1, r0
 80a27b4:	2000      	moveq	r0, #0
 80a27b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a27ba:	bf88      	it	hi
 80a27bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a27c0:	f63f aeaf 	bhi.w	80a2522 <__aeabi_dmul+0xde>
 80a27c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a27c8:	bf04      	itt	eq
 80a27ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a27ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a27d2:	f150 0000 	adcs.w	r0, r0, #0
 80a27d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a27da:	bd70      	pop	{r4, r5, r6, pc}
 80a27dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a27e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a27e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a27e8:	bfc2      	ittt	gt
 80a27ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a27ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a27f2:	bd70      	popgt	{r4, r5, r6, pc}
 80a27f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a27f8:	f04f 0e00 	mov.w	lr, #0
 80a27fc:	3c01      	subs	r4, #1
 80a27fe:	e690      	b.n	80a2522 <__aeabi_dmul+0xde>
 80a2800:	ea45 0e06 	orr.w	lr, r5, r6
 80a2804:	e68d      	b.n	80a2522 <__aeabi_dmul+0xde>
 80a2806:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a280a:	ea94 0f0c 	teq	r4, ip
 80a280e:	bf08      	it	eq
 80a2810:	ea95 0f0c 	teqeq	r5, ip
 80a2814:	f43f af3b 	beq.w	80a268e <__aeabi_dmul+0x24a>
 80a2818:	ea94 0f0c 	teq	r4, ip
 80a281c:	d10a      	bne.n	80a2834 <__aeabi_ddiv+0x19c>
 80a281e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2822:	f47f af34 	bne.w	80a268e <__aeabi_dmul+0x24a>
 80a2826:	ea95 0f0c 	teq	r5, ip
 80a282a:	f47f af25 	bne.w	80a2678 <__aeabi_dmul+0x234>
 80a282e:	4610      	mov	r0, r2
 80a2830:	4619      	mov	r1, r3
 80a2832:	e72c      	b.n	80a268e <__aeabi_dmul+0x24a>
 80a2834:	ea95 0f0c 	teq	r5, ip
 80a2838:	d106      	bne.n	80a2848 <__aeabi_ddiv+0x1b0>
 80a283a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a283e:	f43f aefd 	beq.w	80a263c <__aeabi_dmul+0x1f8>
 80a2842:	4610      	mov	r0, r2
 80a2844:	4619      	mov	r1, r3
 80a2846:	e722      	b.n	80a268e <__aeabi_dmul+0x24a>
 80a2848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a284c:	bf18      	it	ne
 80a284e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2852:	f47f aec5 	bne.w	80a25e0 <__aeabi_dmul+0x19c>
 80a2856:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a285a:	f47f af0d 	bne.w	80a2678 <__aeabi_dmul+0x234>
 80a285e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2862:	f47f aeeb 	bne.w	80a263c <__aeabi_dmul+0x1f8>
 80a2866:	e712      	b.n	80a268e <__aeabi_dmul+0x24a>

080a2868 <__gedf2>:
 80a2868:	f04f 3cff 	mov.w	ip, #4294967295
 80a286c:	e006      	b.n	80a287c <__cmpdf2+0x4>
 80a286e:	bf00      	nop

080a2870 <__ledf2>:
 80a2870:	f04f 0c01 	mov.w	ip, #1
 80a2874:	e002      	b.n	80a287c <__cmpdf2+0x4>
 80a2876:	bf00      	nop

080a2878 <__cmpdf2>:
 80a2878:	f04f 0c01 	mov.w	ip, #1
 80a287c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2880:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2884:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2888:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a288c:	bf18      	it	ne
 80a288e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2892:	d01b      	beq.n	80a28cc <__cmpdf2+0x54>
 80a2894:	b001      	add	sp, #4
 80a2896:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a289a:	bf0c      	ite	eq
 80a289c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a28a0:	ea91 0f03 	teqne	r1, r3
 80a28a4:	bf02      	ittt	eq
 80a28a6:	ea90 0f02 	teqeq	r0, r2
 80a28aa:	2000      	moveq	r0, #0
 80a28ac:	4770      	bxeq	lr
 80a28ae:	f110 0f00 	cmn.w	r0, #0
 80a28b2:	ea91 0f03 	teq	r1, r3
 80a28b6:	bf58      	it	pl
 80a28b8:	4299      	cmppl	r1, r3
 80a28ba:	bf08      	it	eq
 80a28bc:	4290      	cmpeq	r0, r2
 80a28be:	bf2c      	ite	cs
 80a28c0:	17d8      	asrcs	r0, r3, #31
 80a28c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a28c6:	f040 0001 	orr.w	r0, r0, #1
 80a28ca:	4770      	bx	lr
 80a28cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a28d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a28d4:	d102      	bne.n	80a28dc <__cmpdf2+0x64>
 80a28d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a28da:	d107      	bne.n	80a28ec <__cmpdf2+0x74>
 80a28dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a28e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a28e4:	d1d6      	bne.n	80a2894 <__cmpdf2+0x1c>
 80a28e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a28ea:	d0d3      	beq.n	80a2894 <__cmpdf2+0x1c>
 80a28ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a28f0:	4770      	bx	lr
 80a28f2:	bf00      	nop

080a28f4 <__aeabi_cdrcmple>:
 80a28f4:	4684      	mov	ip, r0
 80a28f6:	4610      	mov	r0, r2
 80a28f8:	4662      	mov	r2, ip
 80a28fa:	468c      	mov	ip, r1
 80a28fc:	4619      	mov	r1, r3
 80a28fe:	4663      	mov	r3, ip
 80a2900:	e000      	b.n	80a2904 <__aeabi_cdcmpeq>
 80a2902:	bf00      	nop

080a2904 <__aeabi_cdcmpeq>:
 80a2904:	b501      	push	{r0, lr}
 80a2906:	f7ff ffb7 	bl	80a2878 <__cmpdf2>
 80a290a:	2800      	cmp	r0, #0
 80a290c:	bf48      	it	mi
 80a290e:	f110 0f00 	cmnmi.w	r0, #0
 80a2912:	bd01      	pop	{r0, pc}

080a2914 <__aeabi_dcmpeq>:
 80a2914:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2918:	f7ff fff4 	bl	80a2904 <__aeabi_cdcmpeq>
 80a291c:	bf0c      	ite	eq
 80a291e:	2001      	moveq	r0, #1
 80a2920:	2000      	movne	r0, #0
 80a2922:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2926:	bf00      	nop

080a2928 <__aeabi_dcmplt>:
 80a2928:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a292c:	f7ff ffea 	bl	80a2904 <__aeabi_cdcmpeq>
 80a2930:	bf34      	ite	cc
 80a2932:	2001      	movcc	r0, #1
 80a2934:	2000      	movcs	r0, #0
 80a2936:	f85d fb08 	ldr.w	pc, [sp], #8
 80a293a:	bf00      	nop

080a293c <__aeabi_dcmple>:
 80a293c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2940:	f7ff ffe0 	bl	80a2904 <__aeabi_cdcmpeq>
 80a2944:	bf94      	ite	ls
 80a2946:	2001      	movls	r0, #1
 80a2948:	2000      	movhi	r0, #0
 80a294a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a294e:	bf00      	nop

080a2950 <__aeabi_dcmpge>:
 80a2950:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2954:	f7ff ffce 	bl	80a28f4 <__aeabi_cdrcmple>
 80a2958:	bf94      	ite	ls
 80a295a:	2001      	movls	r0, #1
 80a295c:	2000      	movhi	r0, #0
 80a295e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2962:	bf00      	nop

080a2964 <__aeabi_dcmpgt>:
 80a2964:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2968:	f7ff ffc4 	bl	80a28f4 <__aeabi_cdrcmple>
 80a296c:	bf34      	ite	cc
 80a296e:	2001      	movcc	r0, #1
 80a2970:	2000      	movcs	r0, #0
 80a2972:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2976:	bf00      	nop

080a2978 <__aeabi_dcmpun>:
 80a2978:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a297c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2980:	d102      	bne.n	80a2988 <__aeabi_dcmpun+0x10>
 80a2982:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2986:	d10a      	bne.n	80a299e <__aeabi_dcmpun+0x26>
 80a2988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a298c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2990:	d102      	bne.n	80a2998 <__aeabi_dcmpun+0x20>
 80a2992:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2996:	d102      	bne.n	80a299e <__aeabi_dcmpun+0x26>
 80a2998:	f04f 0000 	mov.w	r0, #0
 80a299c:	4770      	bx	lr
 80a299e:	f04f 0001 	mov.w	r0, #1
 80a29a2:	4770      	bx	lr

080a29a4 <__aeabi_d2iz>:
 80a29a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a29a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a29ac:	d215      	bcs.n	80a29da <__aeabi_d2iz+0x36>
 80a29ae:	d511      	bpl.n	80a29d4 <__aeabi_d2iz+0x30>
 80a29b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a29b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a29b8:	d912      	bls.n	80a29e0 <__aeabi_d2iz+0x3c>
 80a29ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a29be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a29c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a29c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a29ca:	fa23 f002 	lsr.w	r0, r3, r2
 80a29ce:	bf18      	it	ne
 80a29d0:	4240      	negne	r0, r0
 80a29d2:	4770      	bx	lr
 80a29d4:	f04f 0000 	mov.w	r0, #0
 80a29d8:	4770      	bx	lr
 80a29da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a29de:	d105      	bne.n	80a29ec <__aeabi_d2iz+0x48>
 80a29e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a29e4:	bf08      	it	eq
 80a29e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a29ea:	4770      	bx	lr
 80a29ec:	f04f 0000 	mov.w	r0, #0
 80a29f0:	4770      	bx	lr
 80a29f2:	bf00      	nop

080a29f4 <__aeabi_d2uiz>:
 80a29f4:	004a      	lsls	r2, r1, #1
 80a29f6:	d211      	bcs.n	80a2a1c <__aeabi_d2uiz+0x28>
 80a29f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a29fc:	d211      	bcs.n	80a2a22 <__aeabi_d2uiz+0x2e>
 80a29fe:	d50d      	bpl.n	80a2a1c <__aeabi_d2uiz+0x28>
 80a2a00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2a08:	d40e      	bmi.n	80a2a28 <__aeabi_d2uiz+0x34>
 80a2a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2a16:	fa23 f002 	lsr.w	r0, r3, r2
 80a2a1a:	4770      	bx	lr
 80a2a1c:	f04f 0000 	mov.w	r0, #0
 80a2a20:	4770      	bx	lr
 80a2a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2a26:	d102      	bne.n	80a2a2e <__aeabi_d2uiz+0x3a>
 80a2a28:	f04f 30ff 	mov.w	r0, #4294967295
 80a2a2c:	4770      	bx	lr
 80a2a2e:	f04f 0000 	mov.w	r0, #0
 80a2a32:	4770      	bx	lr

080a2a34 <__aeabi_frsub>:
 80a2a34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a2a38:	e002      	b.n	80a2a40 <__addsf3>
 80a2a3a:	bf00      	nop

080a2a3c <__aeabi_fsub>:
 80a2a3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a2a40 <__addsf3>:
 80a2a40:	0042      	lsls	r2, r0, #1
 80a2a42:	bf1f      	itttt	ne
 80a2a44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a2a48:	ea92 0f03 	teqne	r2, r3
 80a2a4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a2a50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2a54:	d06a      	beq.n	80a2b2c <__addsf3+0xec>
 80a2a56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a2a5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a2a5e:	bfc1      	itttt	gt
 80a2a60:	18d2      	addgt	r2, r2, r3
 80a2a62:	4041      	eorgt	r1, r0
 80a2a64:	4048      	eorgt	r0, r1
 80a2a66:	4041      	eorgt	r1, r0
 80a2a68:	bfb8      	it	lt
 80a2a6a:	425b      	neglt	r3, r3
 80a2a6c:	2b19      	cmp	r3, #25
 80a2a6e:	bf88      	it	hi
 80a2a70:	4770      	bxhi	lr
 80a2a72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a2a76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2a7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2a7e:	bf18      	it	ne
 80a2a80:	4240      	negne	r0, r0
 80a2a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2a86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2a8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2a8e:	bf18      	it	ne
 80a2a90:	4249      	negne	r1, r1
 80a2a92:	ea92 0f03 	teq	r2, r3
 80a2a96:	d03f      	beq.n	80a2b18 <__addsf3+0xd8>
 80a2a98:	f1a2 0201 	sub.w	r2, r2, #1
 80a2a9c:	fa41 fc03 	asr.w	ip, r1, r3
 80a2aa0:	eb10 000c 	adds.w	r0, r0, ip
 80a2aa4:	f1c3 0320 	rsb	r3, r3, #32
 80a2aa8:	fa01 f103 	lsl.w	r1, r1, r3
 80a2aac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2ab0:	d502      	bpl.n	80a2ab8 <__addsf3+0x78>
 80a2ab2:	4249      	negs	r1, r1
 80a2ab4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2ab8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2abc:	d313      	bcc.n	80a2ae6 <__addsf3+0xa6>
 80a2abe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2ac2:	d306      	bcc.n	80a2ad2 <__addsf3+0x92>
 80a2ac4:	0840      	lsrs	r0, r0, #1
 80a2ac6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2aca:	f102 0201 	add.w	r2, r2, #1
 80a2ace:	2afe      	cmp	r2, #254	; 0xfe
 80a2ad0:	d251      	bcs.n	80a2b76 <__addsf3+0x136>
 80a2ad2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2ad6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2ada:	bf08      	it	eq
 80a2adc:	f020 0001 	biceq.w	r0, r0, #1
 80a2ae0:	ea40 0003 	orr.w	r0, r0, r3
 80a2ae4:	4770      	bx	lr
 80a2ae6:	0049      	lsls	r1, r1, #1
 80a2ae8:	eb40 0000 	adc.w	r0, r0, r0
 80a2aec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a2af0:	f1a2 0201 	sub.w	r2, r2, #1
 80a2af4:	d1ed      	bne.n	80a2ad2 <__addsf3+0x92>
 80a2af6:	fab0 fc80 	clz	ip, r0
 80a2afa:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2afe:	ebb2 020c 	subs.w	r2, r2, ip
 80a2b02:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2b06:	bfaa      	itet	ge
 80a2b08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2b0c:	4252      	neglt	r2, r2
 80a2b0e:	4318      	orrge	r0, r3
 80a2b10:	bfbc      	itt	lt
 80a2b12:	40d0      	lsrlt	r0, r2
 80a2b14:	4318      	orrlt	r0, r3
 80a2b16:	4770      	bx	lr
 80a2b18:	f092 0f00 	teq	r2, #0
 80a2b1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2b20:	bf06      	itte	eq
 80a2b22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a2b26:	3201      	addeq	r2, #1
 80a2b28:	3b01      	subne	r3, #1
 80a2b2a:	e7b5      	b.n	80a2a98 <__addsf3+0x58>
 80a2b2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2b30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2b34:	bf18      	it	ne
 80a2b36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2b3a:	d021      	beq.n	80a2b80 <__addsf3+0x140>
 80a2b3c:	ea92 0f03 	teq	r2, r3
 80a2b40:	d004      	beq.n	80a2b4c <__addsf3+0x10c>
 80a2b42:	f092 0f00 	teq	r2, #0
 80a2b46:	bf08      	it	eq
 80a2b48:	4608      	moveq	r0, r1
 80a2b4a:	4770      	bx	lr
 80a2b4c:	ea90 0f01 	teq	r0, r1
 80a2b50:	bf1c      	itt	ne
 80a2b52:	2000      	movne	r0, #0
 80a2b54:	4770      	bxne	lr
 80a2b56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2b5a:	d104      	bne.n	80a2b66 <__addsf3+0x126>
 80a2b5c:	0040      	lsls	r0, r0, #1
 80a2b5e:	bf28      	it	cs
 80a2b60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2b64:	4770      	bx	lr
 80a2b66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2b6a:	bf3c      	itt	cc
 80a2b6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2b70:	4770      	bxcc	lr
 80a2b72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2b76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2b7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2b7e:	4770      	bx	lr
 80a2b80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2b84:	bf16      	itet	ne
 80a2b86:	4608      	movne	r0, r1
 80a2b88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2b8c:	4601      	movne	r1, r0
 80a2b8e:	0242      	lsls	r2, r0, #9
 80a2b90:	bf06      	itte	eq
 80a2b92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2b96:	ea90 0f01 	teqeq	r0, r1
 80a2b9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2b9e:	4770      	bx	lr

080a2ba0 <__aeabi_ui2f>:
 80a2ba0:	f04f 0300 	mov.w	r3, #0
 80a2ba4:	e004      	b.n	80a2bb0 <__aeabi_i2f+0x8>
 80a2ba6:	bf00      	nop

080a2ba8 <__aeabi_i2f>:
 80a2ba8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2bac:	bf48      	it	mi
 80a2bae:	4240      	negmi	r0, r0
 80a2bb0:	ea5f 0c00 	movs.w	ip, r0
 80a2bb4:	bf08      	it	eq
 80a2bb6:	4770      	bxeq	lr
 80a2bb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2bbc:	4601      	mov	r1, r0
 80a2bbe:	f04f 0000 	mov.w	r0, #0
 80a2bc2:	e01c      	b.n	80a2bfe <__aeabi_l2f+0x2a>

080a2bc4 <__aeabi_ul2f>:
 80a2bc4:	ea50 0201 	orrs.w	r2, r0, r1
 80a2bc8:	bf08      	it	eq
 80a2bca:	4770      	bxeq	lr
 80a2bcc:	f04f 0300 	mov.w	r3, #0
 80a2bd0:	e00a      	b.n	80a2be8 <__aeabi_l2f+0x14>
 80a2bd2:	bf00      	nop

080a2bd4 <__aeabi_l2f>:
 80a2bd4:	ea50 0201 	orrs.w	r2, r0, r1
 80a2bd8:	bf08      	it	eq
 80a2bda:	4770      	bxeq	lr
 80a2bdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2be0:	d502      	bpl.n	80a2be8 <__aeabi_l2f+0x14>
 80a2be2:	4240      	negs	r0, r0
 80a2be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2be8:	ea5f 0c01 	movs.w	ip, r1
 80a2bec:	bf02      	ittt	eq
 80a2bee:	4684      	moveq	ip, r0
 80a2bf0:	4601      	moveq	r1, r0
 80a2bf2:	2000      	moveq	r0, #0
 80a2bf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2bf8:	bf08      	it	eq
 80a2bfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2bfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2c02:	fabc f28c 	clz	r2, ip
 80a2c06:	3a08      	subs	r2, #8
 80a2c08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2c0c:	db10      	blt.n	80a2c30 <__aeabi_l2f+0x5c>
 80a2c0e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2c12:	4463      	add	r3, ip
 80a2c14:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2c18:	f1c2 0220 	rsb	r2, r2, #32
 80a2c1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2c20:	fa20 f202 	lsr.w	r2, r0, r2
 80a2c24:	eb43 0002 	adc.w	r0, r3, r2
 80a2c28:	bf08      	it	eq
 80a2c2a:	f020 0001 	biceq.w	r0, r0, #1
 80a2c2e:	4770      	bx	lr
 80a2c30:	f102 0220 	add.w	r2, r2, #32
 80a2c34:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2c38:	f1c2 0220 	rsb	r2, r2, #32
 80a2c3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2c40:	fa21 f202 	lsr.w	r2, r1, r2
 80a2c44:	eb43 0002 	adc.w	r0, r3, r2
 80a2c48:	bf08      	it	eq
 80a2c4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2c4e:	4770      	bx	lr

080a2c50 <__aeabi_fmul>:
 80a2c50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2c54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2c58:	bf1e      	ittt	ne
 80a2c5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2c5e:	ea92 0f0c 	teqne	r2, ip
 80a2c62:	ea93 0f0c 	teqne	r3, ip
 80a2c66:	d06f      	beq.n	80a2d48 <__aeabi_fmul+0xf8>
 80a2c68:	441a      	add	r2, r3
 80a2c6a:	ea80 0c01 	eor.w	ip, r0, r1
 80a2c6e:	0240      	lsls	r0, r0, #9
 80a2c70:	bf18      	it	ne
 80a2c72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2c76:	d01e      	beq.n	80a2cb6 <__aeabi_fmul+0x66>
 80a2c78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2c7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2c80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2c84:	fba0 3101 	umull	r3, r1, r0, r1
 80a2c88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2c8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2c90:	bf3e      	ittt	cc
 80a2c92:	0049      	lslcc	r1, r1, #1
 80a2c94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2c98:	005b      	lslcc	r3, r3, #1
 80a2c9a:	ea40 0001 	orr.w	r0, r0, r1
 80a2c9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2ca2:	2afd      	cmp	r2, #253	; 0xfd
 80a2ca4:	d81d      	bhi.n	80a2ce2 <__aeabi_fmul+0x92>
 80a2ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2cae:	bf08      	it	eq
 80a2cb0:	f020 0001 	biceq.w	r0, r0, #1
 80a2cb4:	4770      	bx	lr
 80a2cb6:	f090 0f00 	teq	r0, #0
 80a2cba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2cbe:	bf08      	it	eq
 80a2cc0:	0249      	lsleq	r1, r1, #9
 80a2cc2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2cc6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2cca:	3a7f      	subs	r2, #127	; 0x7f
 80a2ccc:	bfc2      	ittt	gt
 80a2cce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2cd2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2cd6:	4770      	bxgt	lr
 80a2cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2cdc:	f04f 0300 	mov.w	r3, #0
 80a2ce0:	3a01      	subs	r2, #1
 80a2ce2:	dc5d      	bgt.n	80a2da0 <__aeabi_fmul+0x150>
 80a2ce4:	f112 0f19 	cmn.w	r2, #25
 80a2ce8:	bfdc      	itt	le
 80a2cea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2cee:	4770      	bxle	lr
 80a2cf0:	f1c2 0200 	rsb	r2, r2, #0
 80a2cf4:	0041      	lsls	r1, r0, #1
 80a2cf6:	fa21 f102 	lsr.w	r1, r1, r2
 80a2cfa:	f1c2 0220 	rsb	r2, r2, #32
 80a2cfe:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2d02:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2d06:	f140 0000 	adc.w	r0, r0, #0
 80a2d0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2d0e:	bf08      	it	eq
 80a2d10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2d14:	4770      	bx	lr
 80a2d16:	f092 0f00 	teq	r2, #0
 80a2d1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2d1e:	bf02      	ittt	eq
 80a2d20:	0040      	lsleq	r0, r0, #1
 80a2d22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2d26:	3a01      	subeq	r2, #1
 80a2d28:	d0f9      	beq.n	80a2d1e <__aeabi_fmul+0xce>
 80a2d2a:	ea40 000c 	orr.w	r0, r0, ip
 80a2d2e:	f093 0f00 	teq	r3, #0
 80a2d32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2d36:	bf02      	ittt	eq
 80a2d38:	0049      	lsleq	r1, r1, #1
 80a2d3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2d3e:	3b01      	subeq	r3, #1
 80a2d40:	d0f9      	beq.n	80a2d36 <__aeabi_fmul+0xe6>
 80a2d42:	ea41 010c 	orr.w	r1, r1, ip
 80a2d46:	e78f      	b.n	80a2c68 <__aeabi_fmul+0x18>
 80a2d48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2d4c:	ea92 0f0c 	teq	r2, ip
 80a2d50:	bf18      	it	ne
 80a2d52:	ea93 0f0c 	teqne	r3, ip
 80a2d56:	d00a      	beq.n	80a2d6e <__aeabi_fmul+0x11e>
 80a2d58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2d5c:	bf18      	it	ne
 80a2d5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2d62:	d1d8      	bne.n	80a2d16 <__aeabi_fmul+0xc6>
 80a2d64:	ea80 0001 	eor.w	r0, r0, r1
 80a2d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2d6c:	4770      	bx	lr
 80a2d6e:	f090 0f00 	teq	r0, #0
 80a2d72:	bf17      	itett	ne
 80a2d74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2d78:	4608      	moveq	r0, r1
 80a2d7a:	f091 0f00 	teqne	r1, #0
 80a2d7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2d82:	d014      	beq.n	80a2dae <__aeabi_fmul+0x15e>
 80a2d84:	ea92 0f0c 	teq	r2, ip
 80a2d88:	d101      	bne.n	80a2d8e <__aeabi_fmul+0x13e>
 80a2d8a:	0242      	lsls	r2, r0, #9
 80a2d8c:	d10f      	bne.n	80a2dae <__aeabi_fmul+0x15e>
 80a2d8e:	ea93 0f0c 	teq	r3, ip
 80a2d92:	d103      	bne.n	80a2d9c <__aeabi_fmul+0x14c>
 80a2d94:	024b      	lsls	r3, r1, #9
 80a2d96:	bf18      	it	ne
 80a2d98:	4608      	movne	r0, r1
 80a2d9a:	d108      	bne.n	80a2dae <__aeabi_fmul+0x15e>
 80a2d9c:	ea80 0001 	eor.w	r0, r0, r1
 80a2da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2da4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2dac:	4770      	bx	lr
 80a2dae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2db2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2db6:	4770      	bx	lr

080a2db8 <__aeabi_fdiv>:
 80a2db8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2dbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2dc0:	bf1e      	ittt	ne
 80a2dc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2dc6:	ea92 0f0c 	teqne	r2, ip
 80a2dca:	ea93 0f0c 	teqne	r3, ip
 80a2dce:	d069      	beq.n	80a2ea4 <__aeabi_fdiv+0xec>
 80a2dd0:	eba2 0203 	sub.w	r2, r2, r3
 80a2dd4:	ea80 0c01 	eor.w	ip, r0, r1
 80a2dd8:	0249      	lsls	r1, r1, #9
 80a2dda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2dde:	d037      	beq.n	80a2e50 <__aeabi_fdiv+0x98>
 80a2de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2de4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2de8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2df0:	428b      	cmp	r3, r1
 80a2df2:	bf38      	it	cc
 80a2df4:	005b      	lslcc	r3, r3, #1
 80a2df6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2dfa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2dfe:	428b      	cmp	r3, r1
 80a2e00:	bf24      	itt	cs
 80a2e02:	1a5b      	subcs	r3, r3, r1
 80a2e04:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2e08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2e0c:	bf24      	itt	cs
 80a2e0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2e12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2e16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2e1a:	bf24      	itt	cs
 80a2e1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2e20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2e24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2e28:	bf24      	itt	cs
 80a2e2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2e2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2e32:	011b      	lsls	r3, r3, #4
 80a2e34:	bf18      	it	ne
 80a2e36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2e3a:	d1e0      	bne.n	80a2dfe <__aeabi_fdiv+0x46>
 80a2e3c:	2afd      	cmp	r2, #253	; 0xfd
 80a2e3e:	f63f af50 	bhi.w	80a2ce2 <__aeabi_fmul+0x92>
 80a2e42:	428b      	cmp	r3, r1
 80a2e44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2e48:	bf08      	it	eq
 80a2e4a:	f020 0001 	biceq.w	r0, r0, #1
 80a2e4e:	4770      	bx	lr
 80a2e50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2e54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2e58:	327f      	adds	r2, #127	; 0x7f
 80a2e5a:	bfc2      	ittt	gt
 80a2e5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2e60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2e64:	4770      	bxgt	lr
 80a2e66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2e6a:	f04f 0300 	mov.w	r3, #0
 80a2e6e:	3a01      	subs	r2, #1
 80a2e70:	e737      	b.n	80a2ce2 <__aeabi_fmul+0x92>
 80a2e72:	f092 0f00 	teq	r2, #0
 80a2e76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2e7a:	bf02      	ittt	eq
 80a2e7c:	0040      	lsleq	r0, r0, #1
 80a2e7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2e82:	3a01      	subeq	r2, #1
 80a2e84:	d0f9      	beq.n	80a2e7a <__aeabi_fdiv+0xc2>
 80a2e86:	ea40 000c 	orr.w	r0, r0, ip
 80a2e8a:	f093 0f00 	teq	r3, #0
 80a2e8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2e92:	bf02      	ittt	eq
 80a2e94:	0049      	lsleq	r1, r1, #1
 80a2e96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2e9a:	3b01      	subeq	r3, #1
 80a2e9c:	d0f9      	beq.n	80a2e92 <__aeabi_fdiv+0xda>
 80a2e9e:	ea41 010c 	orr.w	r1, r1, ip
 80a2ea2:	e795      	b.n	80a2dd0 <__aeabi_fdiv+0x18>
 80a2ea4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2ea8:	ea92 0f0c 	teq	r2, ip
 80a2eac:	d108      	bne.n	80a2ec0 <__aeabi_fdiv+0x108>
 80a2eae:	0242      	lsls	r2, r0, #9
 80a2eb0:	f47f af7d 	bne.w	80a2dae <__aeabi_fmul+0x15e>
 80a2eb4:	ea93 0f0c 	teq	r3, ip
 80a2eb8:	f47f af70 	bne.w	80a2d9c <__aeabi_fmul+0x14c>
 80a2ebc:	4608      	mov	r0, r1
 80a2ebe:	e776      	b.n	80a2dae <__aeabi_fmul+0x15e>
 80a2ec0:	ea93 0f0c 	teq	r3, ip
 80a2ec4:	d104      	bne.n	80a2ed0 <__aeabi_fdiv+0x118>
 80a2ec6:	024b      	lsls	r3, r1, #9
 80a2ec8:	f43f af4c 	beq.w	80a2d64 <__aeabi_fmul+0x114>
 80a2ecc:	4608      	mov	r0, r1
 80a2ece:	e76e      	b.n	80a2dae <__aeabi_fmul+0x15e>
 80a2ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2ed4:	bf18      	it	ne
 80a2ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2eda:	d1ca      	bne.n	80a2e72 <__aeabi_fdiv+0xba>
 80a2edc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2ee0:	f47f af5c 	bne.w	80a2d9c <__aeabi_fmul+0x14c>
 80a2ee4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2ee8:	f47f af3c 	bne.w	80a2d64 <__aeabi_fmul+0x114>
 80a2eec:	e75f      	b.n	80a2dae <__aeabi_fmul+0x15e>
 80a2eee:	bf00      	nop

080a2ef0 <__gesf2>:
 80a2ef0:	f04f 3cff 	mov.w	ip, #4294967295
 80a2ef4:	e006      	b.n	80a2f04 <__cmpsf2+0x4>
 80a2ef6:	bf00      	nop

080a2ef8 <__lesf2>:
 80a2ef8:	f04f 0c01 	mov.w	ip, #1
 80a2efc:	e002      	b.n	80a2f04 <__cmpsf2+0x4>
 80a2efe:	bf00      	nop

080a2f00 <__cmpsf2>:
 80a2f00:	f04f 0c01 	mov.w	ip, #1
 80a2f04:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2f08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2f0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2f10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2f14:	bf18      	it	ne
 80a2f16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2f1a:	d011      	beq.n	80a2f40 <__cmpsf2+0x40>
 80a2f1c:	b001      	add	sp, #4
 80a2f1e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2f22:	bf18      	it	ne
 80a2f24:	ea90 0f01 	teqne	r0, r1
 80a2f28:	bf58      	it	pl
 80a2f2a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2f2e:	bf88      	it	hi
 80a2f30:	17c8      	asrhi	r0, r1, #31
 80a2f32:	bf38      	it	cc
 80a2f34:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2f38:	bf18      	it	ne
 80a2f3a:	f040 0001 	orrne.w	r0, r0, #1
 80a2f3e:	4770      	bx	lr
 80a2f40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2f44:	d102      	bne.n	80a2f4c <__cmpsf2+0x4c>
 80a2f46:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2f4a:	d105      	bne.n	80a2f58 <__cmpsf2+0x58>
 80a2f4c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2f50:	d1e4      	bne.n	80a2f1c <__cmpsf2+0x1c>
 80a2f52:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2f56:	d0e1      	beq.n	80a2f1c <__cmpsf2+0x1c>
 80a2f58:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2f5c:	4770      	bx	lr
 80a2f5e:	bf00      	nop

080a2f60 <__aeabi_cfrcmple>:
 80a2f60:	4684      	mov	ip, r0
 80a2f62:	4608      	mov	r0, r1
 80a2f64:	4661      	mov	r1, ip
 80a2f66:	e7ff      	b.n	80a2f68 <__aeabi_cfcmpeq>

080a2f68 <__aeabi_cfcmpeq>:
 80a2f68:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2f6a:	f7ff ffc9 	bl	80a2f00 <__cmpsf2>
 80a2f6e:	2800      	cmp	r0, #0
 80a2f70:	bf48      	it	mi
 80a2f72:	f110 0f00 	cmnmi.w	r0, #0
 80a2f76:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2f78 <__aeabi_fcmpeq>:
 80a2f78:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f7c:	f7ff fff4 	bl	80a2f68 <__aeabi_cfcmpeq>
 80a2f80:	bf0c      	ite	eq
 80a2f82:	2001      	moveq	r0, #1
 80a2f84:	2000      	movne	r0, #0
 80a2f86:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f8a:	bf00      	nop

080a2f8c <__aeabi_fcmplt>:
 80a2f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f90:	f7ff ffea 	bl	80a2f68 <__aeabi_cfcmpeq>
 80a2f94:	bf34      	ite	cc
 80a2f96:	2001      	movcc	r0, #1
 80a2f98:	2000      	movcs	r0, #0
 80a2f9a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f9e:	bf00      	nop

080a2fa0 <__aeabi_fcmple>:
 80a2fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2fa4:	f7ff ffe0 	bl	80a2f68 <__aeabi_cfcmpeq>
 80a2fa8:	bf94      	ite	ls
 80a2faa:	2001      	movls	r0, #1
 80a2fac:	2000      	movhi	r0, #0
 80a2fae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2fb2:	bf00      	nop

080a2fb4 <__aeabi_fcmpge>:
 80a2fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2fb8:	f7ff ffd2 	bl	80a2f60 <__aeabi_cfrcmple>
 80a2fbc:	bf94      	ite	ls
 80a2fbe:	2001      	movls	r0, #1
 80a2fc0:	2000      	movhi	r0, #0
 80a2fc2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2fc6:	bf00      	nop

080a2fc8 <__aeabi_fcmpgt>:
 80a2fc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2fcc:	f7ff ffc8 	bl	80a2f60 <__aeabi_cfrcmple>
 80a2fd0:	bf34      	ite	cc
 80a2fd2:	2001      	movcc	r0, #1
 80a2fd4:	2000      	movcs	r0, #0
 80a2fd6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2fda:	bf00      	nop

080a2fdc <__cxa_atexit>:
 80a2fdc:	b510      	push	{r4, lr}
 80a2fde:	4c05      	ldr	r4, [pc, #20]	; (80a2ff4 <__cxa_atexit+0x18>)
 80a2fe0:	4613      	mov	r3, r2
 80a2fe2:	b12c      	cbz	r4, 80a2ff0 <__cxa_atexit+0x14>
 80a2fe4:	460a      	mov	r2, r1
 80a2fe6:	4601      	mov	r1, r0
 80a2fe8:	2002      	movs	r0, #2
 80a2fea:	f3af 8000 	nop.w
 80a2fee:	bd10      	pop	{r4, pc}
 80a2ff0:	4620      	mov	r0, r4
 80a2ff2:	bd10      	pop	{r4, pc}
 80a2ff4:	00000000 	.word	0x00000000

080a2ff8 <memcpy>:
 80a2ff8:	b510      	push	{r4, lr}
 80a2ffa:	1e43      	subs	r3, r0, #1
 80a2ffc:	440a      	add	r2, r1
 80a2ffe:	4291      	cmp	r1, r2
 80a3000:	d004      	beq.n	80a300c <memcpy+0x14>
 80a3002:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3006:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a300a:	e7f8      	b.n	80a2ffe <memcpy+0x6>
 80a300c:	bd10      	pop	{r4, pc}

080a300e <memset>:
 80a300e:	4603      	mov	r3, r0
 80a3010:	4402      	add	r2, r0
 80a3012:	4293      	cmp	r3, r2
 80a3014:	d002      	beq.n	80a301c <memset+0xe>
 80a3016:	f803 1b01 	strb.w	r1, [r3], #1
 80a301a:	e7fa      	b.n	80a3012 <memset+0x4>
 80a301c:	4770      	bx	lr
	...

080a3020 <srand>:
 80a3020:	b538      	push	{r3, r4, r5, lr}
 80a3022:	4b12      	ldr	r3, [pc, #72]	; (80a306c <srand+0x4c>)
 80a3024:	4605      	mov	r5, r0
 80a3026:	681c      	ldr	r4, [r3, #0]
 80a3028:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a302a:	b9d3      	cbnz	r3, 80a3062 <srand+0x42>
 80a302c:	2018      	movs	r0, #24
 80a302e:	f7fd fd9f 	bl	80a0b70 <malloc>
 80a3032:	f243 330e 	movw	r3, #13070	; 0x330e
 80a3036:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3038:	8003      	strh	r3, [r0, #0]
 80a303a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a303e:	8043      	strh	r3, [r0, #2]
 80a3040:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3044:	8083      	strh	r3, [r0, #4]
 80a3046:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a304a:	80c3      	strh	r3, [r0, #6]
 80a304c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3050:	8103      	strh	r3, [r0, #8]
 80a3052:	2305      	movs	r3, #5
 80a3054:	8143      	strh	r3, [r0, #10]
 80a3056:	230b      	movs	r3, #11
 80a3058:	8183      	strh	r3, [r0, #12]
 80a305a:	2201      	movs	r2, #1
 80a305c:	2300      	movs	r3, #0
 80a305e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3062:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3064:	2200      	movs	r2, #0
 80a3066:	611d      	str	r5, [r3, #16]
 80a3068:	615a      	str	r2, [r3, #20]
 80a306a:	bd38      	pop	{r3, r4, r5, pc}
 80a306c:	20000064 	.word	0x20000064

080a3070 <strdup>:
 80a3070:	4b02      	ldr	r3, [pc, #8]	; (80a307c <strdup+0xc>)
 80a3072:	4601      	mov	r1, r0
 80a3074:	6818      	ldr	r0, [r3, #0]
 80a3076:	f000 b803 	b.w	80a3080 <_strdup_r>
 80a307a:	bf00      	nop
 80a307c:	20000064 	.word	0x20000064

080a3080 <_strdup_r>:
 80a3080:	b570      	push	{r4, r5, r6, lr}
 80a3082:	4606      	mov	r6, r0
 80a3084:	4608      	mov	r0, r1
 80a3086:	460c      	mov	r4, r1
 80a3088:	f000 f80d 	bl	80a30a6 <strlen>
 80a308c:	1c45      	adds	r5, r0, #1
 80a308e:	4629      	mov	r1, r5
 80a3090:	4630      	mov	r0, r6
 80a3092:	f7fd fd95 	bl	80a0bc0 <_malloc_r>
 80a3096:	4606      	mov	r6, r0
 80a3098:	b118      	cbz	r0, 80a30a2 <_strdup_r+0x22>
 80a309a:	462a      	mov	r2, r5
 80a309c:	4621      	mov	r1, r4
 80a309e:	f7ff ffab 	bl	80a2ff8 <memcpy>
 80a30a2:	4630      	mov	r0, r6
 80a30a4:	bd70      	pop	{r4, r5, r6, pc}

080a30a6 <strlen>:
 80a30a6:	4603      	mov	r3, r0
 80a30a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a30ac:	2a00      	cmp	r2, #0
 80a30ae:	d1fb      	bne.n	80a30a8 <strlen+0x2>
 80a30b0:	1a18      	subs	r0, r3, r0
 80a30b2:	3801      	subs	r0, #1
 80a30b4:	4770      	bx	lr

080a30b6 <link_code_end>:
	...

080a30b8 <dynalib_user>:
 80a30b8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a30c8:	0000 0000 5620 6e65 6974 616c 6f74 2072     .... Ventilator 
 80a30d8:	6f43 746e 6f72 006c 7548 696d 2064 2020     Control.Humid   
 80a30e8:	203a 2500 5400 6d65 2070 2020 3a20 0020     : .%.Temp    : .
 80a30f8:	6543 006c 5053 4820 6d75 6469 203a 2500     Cel.SP Humid: .%
 80a3108:	322e 0066 6554 706d 7265 7461 7275 0065     .2f.Temperature.
 80a3118:	7548 696d 6964 7974 0000 0000               Humidity....

080a3124 <_ZTV17LiquidCrystal_I2C>:
	...
 80a312c:	00b3 080a 0335 080a 0637 080a 0d2d 080a     ....5...7...-...
 80a313c:	0000 0000 0040 0000 0014 0000 0054 0000     ....@.......T...

080a314c <_ZTV8SPIClass>:
	...
 80a3154:	0bd1 080a 0bd3 080a 616e 006e 766f 0066     ........nan.ovf.
 80a3164:	002e 6e69 0066 6162 6475 5300 7265 6169     ..inf.baud.Seria
 80a3174:	006c 5355 5342 7265 6169 316c 7400 7079     l.USBSerial1.typ
 80a3184:	0065 6170 6172 006d 6d63 0064 6469 6800     e.param.cmd.id.h
 80a3194:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
 80a31a4:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
 80a31b4:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
 80a31c4:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
 80a31d4:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
 80a31e4:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
 80a31f4:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
 80a3204:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
 80a3214:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
 80a3224:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
 80a3234:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
 80a3244:	696e 0063 6c61 006c 005a 2b25 3330 3a64     nic.all.Z.%+03d:
 80a3254:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a3264:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a3274:	0000 0000                                   ....

080a3278 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a3280:	1161 080a 1167 080a 11ab 080a 1175 080a     a...g.......u...
 80a3290:	1163 080a                                   c...

080a3294 <_ZTV9IPAddress>:
	...
 80a329c:	16f9 080a 16e9 080a 16eb 080a               ............

080a32a8 <_ZTV9USBSerial>:
	...
 80a32b0:	17b5 080a 1805 080a 1813 080a 0d2d 080a     ............-...
 80a32c0:	17f1 080a 17b7 080a 17cd 080a 17ff 080a     ................
 80a32d0:	17e3 080a 17b1 080a                         ........

080a32d8 <_ZTV11USARTSerial>:
	...
 80a32e0:	1955 080a 19a5 080a 19b3 080a 0d2d 080a     U...........-...
 80a32f0:	1969 080a 198b 080a 1977 080a 199f 080a     i.......w.......
 80a3300:	1957 080a 195b 080a                         W...[...

080a3308 <_ZTV7TwoWire>:
	...
 80a3310:	1a81 080a 1acb 080a 1aa3 080a 1a83 080a     ................
 80a3320:	1aab 080a 1ab3 080a 1abb 080a 1ac3 080a     ................

080a3330 <_ZTVN5spark9WiFiClassE>:
	...
 80a3338:	1bcd 080a 1bc3 080a 1bb9 080a 1b37 080a     ............7...
 80a3348:	0f8b 080a 1bad 080a 1ba1 080a 1b99 080a     ................
 80a3358:	1b8f 080a 1b85 080a 1b41 080a               ........A...

080a3364 <_ZTVN5spark12NetworkClassE>:
	...
 80a336c:	1bed 080a 1bf7 080a 1c01 080a 1c0b 080a     ................
 80a337c:	1c15 080a 1c21 080a 1c2d 080a 1c39 080a     ....!...-...9...
 80a338c:	1c41 080a 1c4b 080a 1c55 080a               A...K...U...

080a3398 <__sf_fake_stdin>:
	...

080a33b8 <__sf_fake_stdout>:
	...

080a33d8 <__sf_fake_stderr>:
	...
 80a33f8:	0043                                        C.

080a33fa <link_const_variable_data_end>:
	...

080a33fc <link_constructors_location>:
 80a33fc:	080a0345 	.word	0x080a0345
 80a3400:	080a0575 	.word	0x080a0575
 80a3404:	080a07a1 	.word	0x080a07a1
 80a3408:	080a0c11 	.word	0x080a0c11
 80a340c:	080a0fa5 	.word	0x080a0fa5
 80a3410:	080a0fb5 	.word	0x080a0fb5
 80a3414:	080a100d 	.word	0x080a100d
 80a3418:	080a1bd9 	.word	0x080a1bd9
 80a341c:	080a1ca5 	.word	0x080a1ca5
 80a3420:	080a1d7d 	.word	0x080a1d7d
 80a3424:	080a1dc1 	.word	0x080a1dc1
 80a3428:	080a1e45 	.word	0x080a1e45
 80a342c:	080a1ec9 	.word	0x080a1ec9
 80a3430:	080a1f8d 	.word	0x080a1f8d
 80a3434:	080a2051 	.word	0x080a2051

080a3438 <link_constructors_end>:
	...
